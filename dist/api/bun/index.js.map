{
  "version": 3,
  "sources": ["../../../src/bun/node_modules/tar/lib/high-level-opt.js", "../../../src/bun/node_modules/minipass/index.js", "../../../src/bun/node_modules/minizlib/constants.js", "../../../src/bun/node_modules/minizlib/node_modules/minipass/index.js", "../../../src/bun/node_modules/minizlib/index.js", "../../../src/bun/node_modules/tar/lib/normalize-windows-path.js", "../../../src/bun/node_modules/tar/lib/read-entry.js", "../../../src/bun/node_modules/tar/lib/types.js", "../../../src/bun/node_modules/tar/lib/large-numbers.js", "../../../src/bun/node_modules/tar/lib/header.js", "../../../src/bun/node_modules/tar/lib/pax.js", "../../../src/bun/node_modules/tar/lib/strip-trailing-slashes.js", "../../../src/bun/node_modules/tar/lib/warn-mixin.js", "../../../src/bun/node_modules/tar/lib/winchars.js", "../../../src/bun/node_modules/tar/lib/strip-absolute-path.js", "../../../src/bun/node_modules/tar/lib/mode-fix.js", "../../../src/bun/node_modules/tar/lib/write-entry.js", "../../../src/bun/node_modules/yallist/iterator.js", "../../../src/bun/node_modules/yallist/yallist.js", "../../../src/bun/node_modules/tar/lib/pack.js", "../../../src/bun/node_modules/fs-minipass/node_modules/minipass/index.js", "../../../src/bun/node_modules/fs-minipass/index.js", "../../../src/bun/node_modules/tar/lib/parse.js", "../../../src/bun/node_modules/tar/lib/list.js", "../../../src/bun/node_modules/tar/lib/create.js", "../../../src/bun/node_modules/tar/lib/replace.js", "../../../src/bun/node_modules/tar/lib/update.js", "../../../src/bun/node_modules/mkdirp/lib/opts-arg.js", "../../../src/bun/node_modules/mkdirp/lib/path-arg.js", "../../../src/bun/node_modules/mkdirp/lib/find-made.js", "../../../src/bun/node_modules/mkdirp/lib/mkdirp-manual.js", "../../../src/bun/node_modules/mkdirp/lib/mkdirp-native.js", "../../../src/bun/node_modules/mkdirp/lib/use-native.js", "../../../src/bun/node_modules/mkdirp/index.js", "../../../src/bun/node_modules/chownr/chownr.js", "../../../src/bun/node_modules/tar/lib/mkdir.js", "../../../src/bun/node_modules/tar/lib/normalize-unicode.js", "../../../src/bun/node_modules/tar/lib/path-reservations.js", "../../../src/bun/node_modules/tar/lib/get-write-flag.js", "../../../src/bun/node_modules/tar/lib/unpack.js", "../../../src/bun/node_modules/tar/lib/extract.js", "../../../src/bun/node_modules/tar/index.js", "../../../src/bun/events/eventEmitter.ts", "../../../src/bun/events/event.ts", "../../../src/bun/events/windowEvents.ts", "../../../src/bun/events/webviewEvents.ts", "../../../src/bun/events/trayEvents.ts", "../../../src/bun/events/applicationEvents.ts", "../../../src/bun/events/eventEmitter.ts", "../../../src/bun/proc/zig.ts", "../../../src/bun/node_modules/rpc-anywhere/dist/esm/rpc.js", "../../../src/bun/node_modules/rpc-anywhere/dist/esm/create-rpc.js", "../../../src/bun/proc/zig.ts", "../../../src/bun/core/BrowserView.ts", "../../../src/bun/core/Updater.ts", "../../../src/bun/node_modules/@oneidentity/zstd-js/wasm/index.js", "../../../src/bun/core/Updater.ts", "../../../src/bun/core/BrowserView.ts", "../../../src/bun/core/Paths.ts", "../../../src/bun/core/Tray.ts", "../../../src/bun/proc/zig.ts", "../../../src/bun/core/BrowserWindow.ts", "../../../src/bun/core/ApplicationMenu.ts", "../../../src/bun/core/ContextMenu.ts", "../../../src/bun/core/Utils.ts", "../../../src/bun/index.ts"],
  "sourcesContent": [
    "'use strict'\n\n// turn tar(1) style args like `C` into the more verbose things like `cwd`\n\nconst argmap = new Map([\n  ['C', 'cwd'],\n  ['f', 'file'],\n  ['z', 'gzip'],\n  ['P', 'preservePaths'],\n  ['U', 'unlink'],\n  ['strip-components', 'strip'],\n  ['stripComponents', 'strip'],\n  ['keep-newer', 'newer'],\n  ['keepNewer', 'newer'],\n  ['keep-newer-files', 'newer'],\n  ['keepNewerFiles', 'newer'],\n  ['k', 'keep'],\n  ['keep-existing', 'keep'],\n  ['keepExisting', 'keep'],\n  ['m', 'noMtime'],\n  ['no-mtime', 'noMtime'],\n  ['p', 'preserveOwner'],\n  ['L', 'follow'],\n  ['h', 'follow'],\n])\n\nmodule.exports = opt => opt ? Object.keys(opt).map(k => [\n  argmap.has(k) ? argmap.get(k) : k, opt[k],\n]).reduce((set, kv) => (set[kv[0]] = kv[1], set), Object.create(null)) : {}\n",
  "'use strict'\nconst proc =\n  typeof process === 'object' && process\n    ? process\n    : {\n        stdout: null,\n        stderr: null,\n      }\nconst EE = require('events')\nconst Stream = require('stream')\nconst stringdecoder = require('string_decoder')\nconst SD = stringdecoder.StringDecoder\n\nconst EOF = Symbol('EOF')\nconst MAYBE_EMIT_END = Symbol('maybeEmitEnd')\nconst EMITTED_END = Symbol('emittedEnd')\nconst EMITTING_END = Symbol('emittingEnd')\nconst EMITTED_ERROR = Symbol('emittedError')\nconst CLOSED = Symbol('closed')\nconst READ = Symbol('read')\nconst FLUSH = Symbol('flush')\nconst FLUSHCHUNK = Symbol('flushChunk')\nconst ENCODING = Symbol('encoding')\nconst DECODER = Symbol('decoder')\nconst FLOWING = Symbol('flowing')\nconst PAUSED = Symbol('paused')\nconst RESUME = Symbol('resume')\nconst BUFFER = Symbol('buffer')\nconst PIPES = Symbol('pipes')\nconst BUFFERLENGTH = Symbol('bufferLength')\nconst BUFFERPUSH = Symbol('bufferPush')\nconst BUFFERSHIFT = Symbol('bufferShift')\nconst OBJECTMODE = Symbol('objectMode')\n// internal event when stream is destroyed\nconst DESTROYED = Symbol('destroyed')\n// internal event when stream has an error\nconst ERROR = Symbol('error')\nconst EMITDATA = Symbol('emitData')\nconst EMITEND = Symbol('emitEnd')\nconst EMITEND2 = Symbol('emitEnd2')\nconst ASYNC = Symbol('async')\nconst ABORT = Symbol('abort')\nconst ABORTED = Symbol('aborted')\nconst SIGNAL = Symbol('signal')\n\nconst defer = fn => Promise.resolve().then(fn)\n\n// TODO remove when Node v8 support drops\nconst doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== '1'\nconst ASYNCITERATOR =\n  (doIter && Symbol.asyncIterator) || Symbol('asyncIterator not implemented')\nconst ITERATOR =\n  (doIter && Symbol.iterator) || Symbol('iterator not implemented')\n\n// events that mean 'the stream is over'\n// these are treated specially, and re-emitted\n// if they are listened for after emitting.\nconst isEndish = ev => ev === 'end' || ev === 'finish' || ev === 'prefinish'\n\nconst isArrayBuffer = b =>\n  b instanceof ArrayBuffer ||\n  (typeof b === 'object' &&\n    b.constructor &&\n    b.constructor.name === 'ArrayBuffer' &&\n    b.byteLength >= 0)\n\nconst isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)\n\nclass Pipe {\n  constructor(src, dest, opts) {\n    this.src = src\n    this.dest = dest\n    this.opts = opts\n    this.ondrain = () => src[RESUME]()\n    dest.on('drain', this.ondrain)\n  }\n  unpipe() {\n    this.dest.removeListener('drain', this.ondrain)\n  }\n  // istanbul ignore next - only here for the prototype\n  proxyErrors() {}\n  end() {\n    this.unpipe()\n    if (this.opts.end) this.dest.end()\n  }\n}\n\nclass PipeProxyErrors extends Pipe {\n  unpipe() {\n    this.src.removeListener('error', this.proxyErrors)\n    super.unpipe()\n  }\n  constructor(src, dest, opts) {\n    super(src, dest, opts)\n    this.proxyErrors = er => dest.emit('error', er)\n    src.on('error', this.proxyErrors)\n  }\n}\n\nclass Minipass extends Stream {\n  constructor(options) {\n    super()\n    this[FLOWING] = false\n    // whether we're explicitly paused\n    this[PAUSED] = false\n    this[PIPES] = []\n    this[BUFFER] = []\n    this[OBJECTMODE] = (options && options.objectMode) || false\n    if (this[OBJECTMODE]) this[ENCODING] = null\n    else this[ENCODING] = (options && options.encoding) || null\n    if (this[ENCODING] === 'buffer') this[ENCODING] = null\n    this[ASYNC] = (options && !!options.async) || false\n    this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null\n    this[EOF] = false\n    this[EMITTED_END] = false\n    this[EMITTING_END] = false\n    this[CLOSED] = false\n    this[EMITTED_ERROR] = null\n    this.writable = true\n    this.readable = true\n    this[BUFFERLENGTH] = 0\n    this[DESTROYED] = false\n    if (options && options.debugExposeBuffer === true) {\n      Object.defineProperty(this, 'buffer', { get: () => this[BUFFER] })\n    }\n    if (options && options.debugExposePipes === true) {\n      Object.defineProperty(this, 'pipes', { get: () => this[PIPES] })\n    }\n    this[SIGNAL] = options && options.signal\n    this[ABORTED] = false\n    if (this[SIGNAL]) {\n      this[SIGNAL].addEventListener('abort', () => this[ABORT]())\n      if (this[SIGNAL].aborted) {\n        this[ABORT]()\n      }\n    }\n  }\n\n  get bufferLength() {\n    return this[BUFFERLENGTH]\n  }\n\n  get encoding() {\n    return this[ENCODING]\n  }\n  set encoding(enc) {\n    if (this[OBJECTMODE]) throw new Error('cannot set encoding in objectMode')\n\n    if (\n      this[ENCODING] &&\n      enc !== this[ENCODING] &&\n      ((this[DECODER] && this[DECODER].lastNeed) || this[BUFFERLENGTH])\n    )\n      throw new Error('cannot change encoding')\n\n    if (this[ENCODING] !== enc) {\n      this[DECODER] = enc ? new SD(enc) : null\n      if (this[BUFFER].length)\n        this[BUFFER] = this[BUFFER].map(chunk => this[DECODER].write(chunk))\n    }\n\n    this[ENCODING] = enc\n  }\n\n  setEncoding(enc) {\n    this.encoding = enc\n  }\n\n  get objectMode() {\n    return this[OBJECTMODE]\n  }\n  set objectMode(om) {\n    this[OBJECTMODE] = this[OBJECTMODE] || !!om\n  }\n\n  get ['async']() {\n    return this[ASYNC]\n  }\n  set ['async'](a) {\n    this[ASYNC] = this[ASYNC] || !!a\n  }\n\n  // drop everything and get out of the flow completely\n  [ABORT]() {\n    this[ABORTED] = true\n    this.emit('abort', this[SIGNAL].reason)\n    this.destroy(this[SIGNAL].reason)\n  }\n\n  get aborted() {\n    return this[ABORTED]\n  }\n  set aborted(_) {}\n\n  write(chunk, encoding, cb) {\n    if (this[ABORTED]) return false\n    if (this[EOF]) throw new Error('write after end')\n\n    if (this[DESTROYED]) {\n      this.emit(\n        'error',\n        Object.assign(\n          new Error('Cannot call write after a stream was destroyed'),\n          { code: 'ERR_STREAM_DESTROYED' }\n        )\n      )\n      return true\n    }\n\n    if (typeof encoding === 'function') (cb = encoding), (encoding = 'utf8')\n\n    if (!encoding) encoding = 'utf8'\n\n    const fn = this[ASYNC] ? defer : f => f()\n\n    // convert array buffers and typed array views into buffers\n    // at some point in the future, we may want to do the opposite!\n    // leave strings and buffers as-is\n    // anything else switches us into object mode\n    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n      if (isArrayBufferView(chunk))\n        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n      else if (isArrayBuffer(chunk)) chunk = Buffer.from(chunk)\n      else if (typeof chunk !== 'string')\n        // use the setter so we throw if we have encoding set\n        this.objectMode = true\n    }\n\n    // handle object mode up front, since it's simpler\n    // this yields better performance, fewer checks later.\n    if (this[OBJECTMODE]) {\n      /* istanbul ignore if - maybe impossible? */\n      if (this.flowing && this[BUFFERLENGTH] !== 0) this[FLUSH](true)\n\n      if (this.flowing) this.emit('data', chunk)\n      else this[BUFFERPUSH](chunk)\n\n      if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n\n      if (cb) fn(cb)\n\n      return this.flowing\n    }\n\n    // at this point the chunk is a buffer or string\n    // don't buffer it up or send it to the decoder\n    if (!chunk.length) {\n      if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n      if (cb) fn(cb)\n      return this.flowing\n    }\n\n    // fast-path writing strings of same encoding to a stream with\n    // an empty buffer, skipping the buffer/decoder dance\n    if (\n      typeof chunk === 'string' &&\n      // unless it is a string already ready for us to use\n      !(encoding === this[ENCODING] && !this[DECODER].lastNeed)\n    ) {\n      chunk = Buffer.from(chunk, encoding)\n    }\n\n    if (Buffer.isBuffer(chunk) && this[ENCODING])\n      chunk = this[DECODER].write(chunk)\n\n    // Note: flushing CAN potentially switch us into not-flowing mode\n    if (this.flowing && this[BUFFERLENGTH] !== 0) this[FLUSH](true)\n\n    if (this.flowing) this.emit('data', chunk)\n    else this[BUFFERPUSH](chunk)\n\n    if (this[BUFFERLENGTH] !== 0) this.emit('readable')\n\n    if (cb) fn(cb)\n\n    return this.flowing\n  }\n\n  read(n) {\n    if (this[DESTROYED]) return null\n\n    if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {\n      this[MAYBE_EMIT_END]()\n      return null\n    }\n\n    if (this[OBJECTMODE]) n = null\n\n    if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {\n      if (this.encoding) this[BUFFER] = [this[BUFFER].join('')]\n      else this[BUFFER] = [Buffer.concat(this[BUFFER], this[BUFFERLENGTH])]\n    }\n\n    const ret = this[READ](n || null, this[BUFFER][0])\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [READ](n, chunk) {\n    if (n === chunk.length || n === null) this[BUFFERSHIFT]()\n    else {\n      this[BUFFER][0] = chunk.slice(n)\n      chunk = chunk.slice(0, n)\n      this[BUFFERLENGTH] -= n\n    }\n\n    this.emit('data', chunk)\n\n    if (!this[BUFFER].length && !this[EOF]) this.emit('drain')\n\n    return chunk\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') (cb = chunk), (chunk = null)\n    if (typeof encoding === 'function') (cb = encoding), (encoding = 'utf8')\n    if (chunk) this.write(chunk, encoding)\n    if (cb) this.once('end', cb)\n    this[EOF] = true\n    this.writable = false\n\n    // if we haven't written anything, then go ahead and emit,\n    // even if we're not reading.\n    // we'll re-emit if a new 'end' listener is added anyway.\n    // This makes MP more suitable to write-only use cases.\n    if (this.flowing || !this[PAUSED]) this[MAYBE_EMIT_END]()\n    return this\n  }\n\n  // don't let the internal resume be overwritten\n  [RESUME]() {\n    if (this[DESTROYED]) return\n\n    this[PAUSED] = false\n    this[FLOWING] = true\n    this.emit('resume')\n    if (this[BUFFER].length) this[FLUSH]()\n    else if (this[EOF]) this[MAYBE_EMIT_END]()\n    else this.emit('drain')\n  }\n\n  resume() {\n    return this[RESUME]()\n  }\n\n  pause() {\n    this[FLOWING] = false\n    this[PAUSED] = true\n  }\n\n  get destroyed() {\n    return this[DESTROYED]\n  }\n\n  get flowing() {\n    return this[FLOWING]\n  }\n\n  get paused() {\n    return this[PAUSED]\n  }\n\n  [BUFFERPUSH](chunk) {\n    if (this[OBJECTMODE]) this[BUFFERLENGTH] += 1\n    else this[BUFFERLENGTH] += chunk.length\n    this[BUFFER].push(chunk)\n  }\n\n  [BUFFERSHIFT]() {\n    if (this[OBJECTMODE]) this[BUFFERLENGTH] -= 1\n    else this[BUFFERLENGTH] -= this[BUFFER][0].length\n    return this[BUFFER].shift()\n  }\n\n  [FLUSH](noDrain) {\n    do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length)\n\n    if (!noDrain && !this[BUFFER].length && !this[EOF]) this.emit('drain')\n  }\n\n  [FLUSHCHUNK](chunk) {\n    this.emit('data', chunk)\n    return this.flowing\n  }\n\n  pipe(dest, opts) {\n    if (this[DESTROYED]) return\n\n    const ended = this[EMITTED_END]\n    opts = opts || {}\n    if (dest === proc.stdout || dest === proc.stderr) opts.end = false\n    else opts.end = opts.end !== false\n    opts.proxyErrors = !!opts.proxyErrors\n\n    // piping an ended stream ends immediately\n    if (ended) {\n      if (opts.end) dest.end()\n    } else {\n      this[PIPES].push(\n        !opts.proxyErrors\n          ? new Pipe(this, dest, opts)\n          : new PipeProxyErrors(this, dest, opts)\n      )\n      if (this[ASYNC]) defer(() => this[RESUME]())\n      else this[RESUME]()\n    }\n\n    return dest\n  }\n\n  unpipe(dest) {\n    const p = this[PIPES].find(p => p.dest === dest)\n    if (p) {\n      this[PIPES].splice(this[PIPES].indexOf(p), 1)\n      p.unpipe()\n    }\n  }\n\n  addListener(ev, fn) {\n    return this.on(ev, fn)\n  }\n\n  on(ev, fn) {\n    const ret = super.on(ev, fn)\n    if (ev === 'data' && !this[PIPES].length && !this.flowing) this[RESUME]()\n    else if (ev === 'readable' && this[BUFFERLENGTH] !== 0)\n      super.emit('readable')\n    else if (isEndish(ev) && this[EMITTED_END]) {\n      super.emit(ev)\n      this.removeAllListeners(ev)\n    } else if (ev === 'error' && this[EMITTED_ERROR]) {\n      if (this[ASYNC]) defer(() => fn.call(this, this[EMITTED_ERROR]))\n      else fn.call(this, this[EMITTED_ERROR])\n    }\n    return ret\n  }\n\n  get emittedEnd() {\n    return this[EMITTED_END]\n  }\n\n  [MAYBE_EMIT_END]() {\n    if (\n      !this[EMITTING_END] &&\n      !this[EMITTED_END] &&\n      !this[DESTROYED] &&\n      this[BUFFER].length === 0 &&\n      this[EOF]\n    ) {\n      this[EMITTING_END] = true\n      this.emit('end')\n      this.emit('prefinish')\n      this.emit('finish')\n      if (this[CLOSED]) this.emit('close')\n      this[EMITTING_END] = false\n    }\n  }\n\n  emit(ev, data, ...extra) {\n    // error and close are only events allowed after calling destroy()\n    if (ev !== 'error' && ev !== 'close' && ev !== DESTROYED && this[DESTROYED])\n      return\n    else if (ev === 'data') {\n      return !this[OBJECTMODE] && !data\n        ? false\n        : this[ASYNC]\n        ? defer(() => this[EMITDATA](data))\n        : this[EMITDATA](data)\n    } else if (ev === 'end') {\n      return this[EMITEND]()\n    } else if (ev === 'close') {\n      this[CLOSED] = true\n      // don't emit close before 'end' and 'finish'\n      if (!this[EMITTED_END] && !this[DESTROYED]) return\n      const ret = super.emit('close')\n      this.removeAllListeners('close')\n      return ret\n    } else if (ev === 'error') {\n      this[EMITTED_ERROR] = data\n      super.emit(ERROR, data)\n      const ret =\n        !this[SIGNAL] || this.listeners('error').length\n          ? super.emit('error', data)\n          : false\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'resume') {\n      const ret = super.emit('resume')\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'finish' || ev === 'prefinish') {\n      const ret = super.emit(ev)\n      this.removeAllListeners(ev)\n      return ret\n    }\n\n    // Some other unknown event\n    const ret = super.emit(ev, data, ...extra)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITDATA](data) {\n    for (const p of this[PIPES]) {\n      if (p.dest.write(data) === false) this.pause()\n    }\n    const ret = super.emit('data', data)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITEND]() {\n    if (this[EMITTED_END]) return\n\n    this[EMITTED_END] = true\n    this.readable = false\n    if (this[ASYNC]) defer(() => this[EMITEND2]())\n    else this[EMITEND2]()\n  }\n\n  [EMITEND2]() {\n    if (this[DECODER]) {\n      const data = this[DECODER].end()\n      if (data) {\n        for (const p of this[PIPES]) {\n          p.dest.write(data)\n        }\n        super.emit('data', data)\n      }\n    }\n\n    for (const p of this[PIPES]) {\n      p.end()\n    }\n    const ret = super.emit('end')\n    this.removeAllListeners('end')\n    return ret\n  }\n\n  // const all = await stream.collect()\n  collect() {\n    const buf = []\n    if (!this[OBJECTMODE]) buf.dataLength = 0\n    // set the promise first, in case an error is raised\n    // by triggering the flow here.\n    const p = this.promise()\n    this.on('data', c => {\n      buf.push(c)\n      if (!this[OBJECTMODE]) buf.dataLength += c.length\n    })\n    return p.then(() => buf)\n  }\n\n  // const data = await stream.concat()\n  concat() {\n    return this[OBJECTMODE]\n      ? Promise.reject(new Error('cannot concat in objectMode'))\n      : this.collect().then(buf =>\n          this[OBJECTMODE]\n            ? Promise.reject(new Error('cannot concat in objectMode'))\n            : this[ENCODING]\n            ? buf.join('')\n            : Buffer.concat(buf, buf.dataLength)\n        )\n  }\n\n  // stream.promise().then(() => done, er => emitted error)\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on(DESTROYED, () => reject(new Error('stream destroyed')))\n      this.on('error', er => reject(er))\n      this.on('end', () => resolve())\n    })\n  }\n\n  // for await (let chunk of stream)\n  [ASYNCITERATOR]() {\n    let stopped = false\n    const stop = () => {\n      this.pause()\n      stopped = true\n      return Promise.resolve({ done: true })\n    }\n    const next = () => {\n      if (stopped) return stop()\n      const res = this.read()\n      if (res !== null) return Promise.resolve({ done: false, value: res })\n\n      if (this[EOF]) return stop()\n\n      let resolve = null\n      let reject = null\n      const onerr = er => {\n        this.removeListener('data', ondata)\n        this.removeListener('end', onend)\n        this.removeListener(DESTROYED, ondestroy)\n        stop()\n        reject(er)\n      }\n      const ondata = value => {\n        this.removeListener('error', onerr)\n        this.removeListener('end', onend)\n        this.removeListener(DESTROYED, ondestroy)\n        this.pause()\n        resolve({ value: value, done: !!this[EOF] })\n      }\n      const onend = () => {\n        this.removeListener('error', onerr)\n        this.removeListener('data', ondata)\n        this.removeListener(DESTROYED, ondestroy)\n        stop()\n        resolve({ done: true })\n      }\n      const ondestroy = () => onerr(new Error('stream destroyed'))\n      return new Promise((res, rej) => {\n        reject = rej\n        resolve = res\n        this.once(DESTROYED, ondestroy)\n        this.once('error', onerr)\n        this.once('end', onend)\n        this.once('data', ondata)\n      })\n    }\n\n    return {\n      next,\n      throw: stop,\n      return: stop,\n      [ASYNCITERATOR]() {\n        return this\n      },\n    }\n  }\n\n  // for (let chunk of stream)\n  [ITERATOR]() {\n    let stopped = false\n    const stop = () => {\n      this.pause()\n      this.removeListener(ERROR, stop)\n      this.removeListener(DESTROYED, stop)\n      this.removeListener('end', stop)\n      stopped = true\n      return { done: true }\n    }\n\n    const next = () => {\n      if (stopped) return stop()\n      const value = this.read()\n      return value === null ? stop() : { value }\n    }\n    this.once('end', stop)\n    this.once(ERROR, stop)\n    this.once(DESTROYED, stop)\n\n    return {\n      next,\n      throw: stop,\n      return: stop,\n      [ITERATOR]() {\n        return this\n      },\n    }\n  }\n\n  destroy(er) {\n    if (this[DESTROYED]) {\n      if (er) this.emit('error', er)\n      else this.emit(DESTROYED)\n      return this\n    }\n\n    this[DESTROYED] = true\n\n    // throw away all buffered data, it's never coming out\n    this[BUFFER].length = 0\n    this[BUFFERLENGTH] = 0\n\n    if (typeof this.close === 'function' && !this[CLOSED]) this.close()\n\n    if (er) this.emit('error', er)\n    // if no error to emit, still reject pending promises\n    else this.emit(DESTROYED)\n\n    return this\n  }\n\n  static isStream(s) {\n    return (\n      !!s &&\n      (s instanceof Minipass ||\n        s instanceof Stream ||\n        (s instanceof EE &&\n          // readable\n          (typeof s.pipe === 'function' ||\n            // writable\n            (typeof s.write === 'function' && typeof s.end === 'function'))))\n    )\n  }\n}\n\nexports.Minipass = Minipass\n",
  "// Update with any zlib constants that are added or changed in the future.\n// Node v6 didn't export this, so we just hard code the version and rely\n// on all the other hard-coded values from zlib v4736.  When node v6\n// support drops, we can just export the realZlibConstants object.\nconst realZlibConstants = require('zlib').constants ||\n  /* istanbul ignore next */ { ZLIB_VERNUM: 4736 }\n\nmodule.exports = Object.freeze(Object.assign(Object.create(null), {\n  Z_NO_FLUSH: 0,\n  Z_PARTIAL_FLUSH: 1,\n  Z_SYNC_FLUSH: 2,\n  Z_FULL_FLUSH: 3,\n  Z_FINISH: 4,\n  Z_BLOCK: 5,\n  Z_OK: 0,\n  Z_STREAM_END: 1,\n  Z_NEED_DICT: 2,\n  Z_ERRNO: -1,\n  Z_STREAM_ERROR: -2,\n  Z_DATA_ERROR: -3,\n  Z_MEM_ERROR: -4,\n  Z_BUF_ERROR: -5,\n  Z_VERSION_ERROR: -6,\n  Z_NO_COMPRESSION: 0,\n  Z_BEST_SPEED: 1,\n  Z_BEST_COMPRESSION: 9,\n  Z_DEFAULT_COMPRESSION: -1,\n  Z_FILTERED: 1,\n  Z_HUFFMAN_ONLY: 2,\n  Z_RLE: 3,\n  Z_FIXED: 4,\n  Z_DEFAULT_STRATEGY: 0,\n  DEFLATE: 1,\n  INFLATE: 2,\n  GZIP: 3,\n  GUNZIP: 4,\n  DEFLATERAW: 5,\n  INFLATERAW: 6,\n  UNZIP: 7,\n  BROTLI_DECODE: 8,\n  BROTLI_ENCODE: 9,\n  Z_MIN_WINDOWBITS: 8,\n  Z_MAX_WINDOWBITS: 15,\n  Z_DEFAULT_WINDOWBITS: 15,\n  Z_MIN_CHUNK: 64,\n  Z_MAX_CHUNK: Infinity,\n  Z_DEFAULT_CHUNK: 16384,\n  Z_MIN_MEMLEVEL: 1,\n  Z_MAX_MEMLEVEL: 9,\n  Z_DEFAULT_MEMLEVEL: 8,\n  Z_MIN_LEVEL: -1,\n  Z_MAX_LEVEL: 9,\n  Z_DEFAULT_LEVEL: -1,\n  BROTLI_OPERATION_PROCESS: 0,\n  BROTLI_OPERATION_FLUSH: 1,\n  BROTLI_OPERATION_FINISH: 2,\n  BROTLI_OPERATION_EMIT_METADATA: 3,\n  BROTLI_MODE_GENERIC: 0,\n  BROTLI_MODE_TEXT: 1,\n  BROTLI_MODE_FONT: 2,\n  BROTLI_DEFAULT_MODE: 0,\n  BROTLI_MIN_QUALITY: 0,\n  BROTLI_MAX_QUALITY: 11,\n  BROTLI_DEFAULT_QUALITY: 11,\n  BROTLI_MIN_WINDOW_BITS: 10,\n  BROTLI_MAX_WINDOW_BITS: 24,\n  BROTLI_LARGE_MAX_WINDOW_BITS: 30,\n  BROTLI_DEFAULT_WINDOW: 22,\n  BROTLI_MIN_INPUT_BLOCK_BITS: 16,\n  BROTLI_MAX_INPUT_BLOCK_BITS: 24,\n  BROTLI_PARAM_MODE: 0,\n  BROTLI_PARAM_QUALITY: 1,\n  BROTLI_PARAM_LGWIN: 2,\n  BROTLI_PARAM_LGBLOCK: 3,\n  BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,\n  BROTLI_PARAM_SIZE_HINT: 5,\n  BROTLI_PARAM_LARGE_WINDOW: 6,\n  BROTLI_PARAM_NPOSTFIX: 7,\n  BROTLI_PARAM_NDIRECT: 8,\n  BROTLI_DECODER_RESULT_ERROR: 0,\n  BROTLI_DECODER_RESULT_SUCCESS: 1,\n  BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,\n  BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,\n  BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,\n  BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,\n  BROTLI_DECODER_NO_ERROR: 0,\n  BROTLI_DECODER_SUCCESS: 1,\n  BROTLI_DECODER_NEEDS_MORE_INPUT: 2,\n  BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,\n  BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,\n  BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,\n  BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,\n  BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,\n  BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,\n  BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,\n  BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,\n  BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,\n  BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,\n  BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,\n  BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,\n  BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,\n  BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,\n  BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,\n  BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,\n  BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,\n  BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,\n  BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,\n  BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,\n  BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,\n  BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,\n  BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,\n  BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,\n  BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,\n  BROTLI_DECODER_ERROR_UNREACHABLE: -31,\n}, realZlibConstants))\n",
  "'use strict'\nconst proc = typeof process === 'object' && process ? process : {\n  stdout: null,\n  stderr: null,\n}\nconst EE = require('events')\nconst Stream = require('stream')\nconst SD = require('string_decoder').StringDecoder\n\nconst EOF = Symbol('EOF')\nconst MAYBE_EMIT_END = Symbol('maybeEmitEnd')\nconst EMITTED_END = Symbol('emittedEnd')\nconst EMITTING_END = Symbol('emittingEnd')\nconst EMITTED_ERROR = Symbol('emittedError')\nconst CLOSED = Symbol('closed')\nconst READ = Symbol('read')\nconst FLUSH = Symbol('flush')\nconst FLUSHCHUNK = Symbol('flushChunk')\nconst ENCODING = Symbol('encoding')\nconst DECODER = Symbol('decoder')\nconst FLOWING = Symbol('flowing')\nconst PAUSED = Symbol('paused')\nconst RESUME = Symbol('resume')\nconst BUFFERLENGTH = Symbol('bufferLength')\nconst BUFFERPUSH = Symbol('bufferPush')\nconst BUFFERSHIFT = Symbol('bufferShift')\nconst OBJECTMODE = Symbol('objectMode')\nconst DESTROYED = Symbol('destroyed')\nconst EMITDATA = Symbol('emitData')\nconst EMITEND = Symbol('emitEnd')\nconst EMITEND2 = Symbol('emitEnd2')\nconst ASYNC = Symbol('async')\n\nconst defer = fn => Promise.resolve().then(fn)\n\n// TODO remove when Node v8 support drops\nconst doIter = global._MP_NO_ITERATOR_SYMBOLS_  !== '1'\nconst ASYNCITERATOR = doIter && Symbol.asyncIterator\n  || Symbol('asyncIterator not implemented')\nconst ITERATOR = doIter && Symbol.iterator\n  || Symbol('iterator not implemented')\n\n// events that mean 'the stream is over'\n// these are treated specially, and re-emitted\n// if they are listened for after emitting.\nconst isEndish = ev =>\n  ev === 'end' ||\n  ev === 'finish' ||\n  ev === 'prefinish'\n\nconst isArrayBuffer = b => b instanceof ArrayBuffer ||\n  typeof b === 'object' &&\n  b.constructor &&\n  b.constructor.name === 'ArrayBuffer' &&\n  b.byteLength >= 0\n\nconst isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)\n\nclass Pipe {\n  constructor (src, dest, opts) {\n    this.src = src\n    this.dest = dest\n    this.opts = opts\n    this.ondrain = () => src[RESUME]()\n    dest.on('drain', this.ondrain)\n  }\n  unpipe () {\n    this.dest.removeListener('drain', this.ondrain)\n  }\n  // istanbul ignore next - only here for the prototype\n  proxyErrors () {}\n  end () {\n    this.unpipe()\n    if (this.opts.end)\n      this.dest.end()\n  }\n}\n\nclass PipeProxyErrors extends Pipe {\n  unpipe () {\n    this.src.removeListener('error', this.proxyErrors)\n    super.unpipe()\n  }\n  constructor (src, dest, opts) {\n    super(src, dest, opts)\n    this.proxyErrors = er => dest.emit('error', er)\n    src.on('error', this.proxyErrors)\n  }\n}\n\nmodule.exports = class Minipass extends Stream {\n  constructor (options) {\n    super()\n    this[FLOWING] = false\n    // whether we're explicitly paused\n    this[PAUSED] = false\n    this.pipes = []\n    this.buffer = []\n    this[OBJECTMODE] = options && options.objectMode || false\n    if (this[OBJECTMODE])\n      this[ENCODING] = null\n    else\n      this[ENCODING] = options && options.encoding || null\n    if (this[ENCODING] === 'buffer')\n      this[ENCODING] = null\n    this[ASYNC] = options && !!options.async || false\n    this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null\n    this[EOF] = false\n    this[EMITTED_END] = false\n    this[EMITTING_END] = false\n    this[CLOSED] = false\n    this[EMITTED_ERROR] = null\n    this.writable = true\n    this.readable = true\n    this[BUFFERLENGTH] = 0\n    this[DESTROYED] = false\n  }\n\n  get bufferLength () { return this[BUFFERLENGTH] }\n\n  get encoding () { return this[ENCODING] }\n  set encoding (enc) {\n    if (this[OBJECTMODE])\n      throw new Error('cannot set encoding in objectMode')\n\n    if (this[ENCODING] && enc !== this[ENCODING] &&\n        (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))\n      throw new Error('cannot change encoding')\n\n    if (this[ENCODING] !== enc) {\n      this[DECODER] = enc ? new SD(enc) : null\n      if (this.buffer.length)\n        this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))\n    }\n\n    this[ENCODING] = enc\n  }\n\n  setEncoding (enc) {\n    this.encoding = enc\n  }\n\n  get objectMode () { return this[OBJECTMODE] }\n  set objectMode (om) { this[OBJECTMODE] = this[OBJECTMODE] || !!om }\n\n  get ['async'] () { return this[ASYNC] }\n  set ['async'] (a) { this[ASYNC] = this[ASYNC] || !!a }\n\n  write (chunk, encoding, cb) {\n    if (this[EOF])\n      throw new Error('write after end')\n\n    if (this[DESTROYED]) {\n      this.emit('error', Object.assign(\n        new Error('Cannot call write after a stream was destroyed'),\n        { code: 'ERR_STREAM_DESTROYED' }\n      ))\n      return true\n    }\n\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n\n    if (!encoding)\n      encoding = 'utf8'\n\n    const fn = this[ASYNC] ? defer : f => f()\n\n    // convert array buffers and typed array views into buffers\n    // at some point in the future, we may want to do the opposite!\n    // leave strings and buffers as-is\n    // anything else switches us into object mode\n    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n      if (isArrayBufferView(chunk))\n        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n      else if (isArrayBuffer(chunk))\n        chunk = Buffer.from(chunk)\n      else if (typeof chunk !== 'string')\n        // use the setter so we throw if we have encoding set\n        this.objectMode = true\n    }\n\n    // handle object mode up front, since it's simpler\n    // this yields better performance, fewer checks later.\n    if (this[OBJECTMODE]) {\n      /* istanbul ignore if - maybe impossible? */\n      if (this.flowing && this[BUFFERLENGTH] !== 0)\n        this[FLUSH](true)\n\n      if (this.flowing)\n        this.emit('data', chunk)\n      else\n        this[BUFFERPUSH](chunk)\n\n      if (this[BUFFERLENGTH] !== 0)\n        this.emit('readable')\n\n      if (cb)\n        fn(cb)\n\n      return this.flowing\n    }\n\n    // at this point the chunk is a buffer or string\n    // don't buffer it up or send it to the decoder\n    if (!chunk.length) {\n      if (this[BUFFERLENGTH] !== 0)\n        this.emit('readable')\n      if (cb)\n        fn(cb)\n      return this.flowing\n    }\n\n    // fast-path writing strings of same encoding to a stream with\n    // an empty buffer, skipping the buffer/decoder dance\n    if (typeof chunk === 'string' &&\n        // unless it is a string already ready for us to use\n        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {\n      chunk = Buffer.from(chunk, encoding)\n    }\n\n    if (Buffer.isBuffer(chunk) && this[ENCODING])\n      chunk = this[DECODER].write(chunk)\n\n    // Note: flushing CAN potentially switch us into not-flowing mode\n    if (this.flowing && this[BUFFERLENGTH] !== 0)\n      this[FLUSH](true)\n\n    if (this.flowing)\n      this.emit('data', chunk)\n    else\n      this[BUFFERPUSH](chunk)\n\n    if (this[BUFFERLENGTH] !== 0)\n      this.emit('readable')\n\n    if (cb)\n      fn(cb)\n\n    return this.flowing\n  }\n\n  read (n) {\n    if (this[DESTROYED])\n      return null\n\n    if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {\n      this[MAYBE_EMIT_END]()\n      return null\n    }\n\n    if (this[OBJECTMODE])\n      n = null\n\n    if (this.buffer.length > 1 && !this[OBJECTMODE]) {\n      if (this.encoding)\n        this.buffer = [this.buffer.join('')]\n      else\n        this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]\n    }\n\n    const ret = this[READ](n || null, this.buffer[0])\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [READ] (n, chunk) {\n    if (n === chunk.length || n === null)\n      this[BUFFERSHIFT]()\n    else {\n      this.buffer[0] = chunk.slice(n)\n      chunk = chunk.slice(0, n)\n      this[BUFFERLENGTH] -= n\n    }\n\n    this.emit('data', chunk)\n\n    if (!this.buffer.length && !this[EOF])\n      this.emit('drain')\n\n    return chunk\n  }\n\n  end (chunk, encoding, cb) {\n    if (typeof chunk === 'function')\n      cb = chunk, chunk = null\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n    if (chunk)\n      this.write(chunk, encoding)\n    if (cb)\n      this.once('end', cb)\n    this[EOF] = true\n    this.writable = false\n\n    // if we haven't written anything, then go ahead and emit,\n    // even if we're not reading.\n    // we'll re-emit if a new 'end' listener is added anyway.\n    // This makes MP more suitable to write-only use cases.\n    if (this.flowing || !this[PAUSED])\n      this[MAYBE_EMIT_END]()\n    return this\n  }\n\n  // don't let the internal resume be overwritten\n  [RESUME] () {\n    if (this[DESTROYED])\n      return\n\n    this[PAUSED] = false\n    this[FLOWING] = true\n    this.emit('resume')\n    if (this.buffer.length)\n      this[FLUSH]()\n    else if (this[EOF])\n      this[MAYBE_EMIT_END]()\n    else\n      this.emit('drain')\n  }\n\n  resume () {\n    return this[RESUME]()\n  }\n\n  pause () {\n    this[FLOWING] = false\n    this[PAUSED] = true\n  }\n\n  get destroyed () {\n    return this[DESTROYED]\n  }\n\n  get flowing () {\n    return this[FLOWING]\n  }\n\n  get paused () {\n    return this[PAUSED]\n  }\n\n  [BUFFERPUSH] (chunk) {\n    if (this[OBJECTMODE])\n      this[BUFFERLENGTH] += 1\n    else\n      this[BUFFERLENGTH] += chunk.length\n    this.buffer.push(chunk)\n  }\n\n  [BUFFERSHIFT] () {\n    if (this.buffer.length) {\n      if (this[OBJECTMODE])\n        this[BUFFERLENGTH] -= 1\n      else\n        this[BUFFERLENGTH] -= this.buffer[0].length\n    }\n    return this.buffer.shift()\n  }\n\n  [FLUSH] (noDrain) {\n    do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))\n\n    if (!noDrain && !this.buffer.length && !this[EOF])\n      this.emit('drain')\n  }\n\n  [FLUSHCHUNK] (chunk) {\n    return chunk ? (this.emit('data', chunk), this.flowing) : false\n  }\n\n  pipe (dest, opts) {\n    if (this[DESTROYED])\n      return\n\n    const ended = this[EMITTED_END]\n    opts = opts || {}\n    if (dest === proc.stdout || dest === proc.stderr)\n      opts.end = false\n    else\n      opts.end = opts.end !== false\n    opts.proxyErrors = !!opts.proxyErrors\n\n    // piping an ended stream ends immediately\n    if (ended) {\n      if (opts.end)\n        dest.end()\n    } else {\n      this.pipes.push(!opts.proxyErrors ? new Pipe(this, dest, opts)\n        : new PipeProxyErrors(this, dest, opts))\n      if (this[ASYNC])\n        defer(() => this[RESUME]())\n      else\n        this[RESUME]()\n    }\n\n    return dest\n  }\n\n  unpipe (dest) {\n    const p = this.pipes.find(p => p.dest === dest)\n    if (p) {\n      this.pipes.splice(this.pipes.indexOf(p), 1)\n      p.unpipe()\n    }\n  }\n\n  addListener (ev, fn) {\n    return this.on(ev, fn)\n  }\n\n  on (ev, fn) {\n    const ret = super.on(ev, fn)\n    if (ev === 'data' && !this.pipes.length && !this.flowing)\n      this[RESUME]()\n    else if (ev === 'readable' && this[BUFFERLENGTH] !== 0)\n      super.emit('readable')\n    else if (isEndish(ev) && this[EMITTED_END]) {\n      super.emit(ev)\n      this.removeAllListeners(ev)\n    } else if (ev === 'error' && this[EMITTED_ERROR]) {\n      if (this[ASYNC])\n        defer(() => fn.call(this, this[EMITTED_ERROR]))\n      else\n        fn.call(this, this[EMITTED_ERROR])\n    }\n    return ret\n  }\n\n  get emittedEnd () {\n    return this[EMITTED_END]\n  }\n\n  [MAYBE_EMIT_END] () {\n    if (!this[EMITTING_END] &&\n        !this[EMITTED_END] &&\n        !this[DESTROYED] &&\n        this.buffer.length === 0 &&\n        this[EOF]) {\n      this[EMITTING_END] = true\n      this.emit('end')\n      this.emit('prefinish')\n      this.emit('finish')\n      if (this[CLOSED])\n        this.emit('close')\n      this[EMITTING_END] = false\n    }\n  }\n\n  emit (ev, data, ...extra) {\n    // error and close are only events allowed after calling destroy()\n    if (ev !== 'error' && ev !== 'close' && ev !== DESTROYED && this[DESTROYED])\n      return\n    else if (ev === 'data') {\n      return !data ? false\n        : this[ASYNC] ? defer(() => this[EMITDATA](data))\n        : this[EMITDATA](data)\n    } else if (ev === 'end') {\n      return this[EMITEND]()\n    } else if (ev === 'close') {\n      this[CLOSED] = true\n      // don't emit close before 'end' and 'finish'\n      if (!this[EMITTED_END] && !this[DESTROYED])\n        return\n      const ret = super.emit('close')\n      this.removeAllListeners('close')\n      return ret\n    } else if (ev === 'error') {\n      this[EMITTED_ERROR] = data\n      const ret = super.emit('error', data)\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'resume') {\n      const ret = super.emit('resume')\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'finish' || ev === 'prefinish') {\n      const ret = super.emit(ev)\n      this.removeAllListeners(ev)\n      return ret\n    }\n\n    // Some other unknown event\n    const ret = super.emit(ev, data, ...extra)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITDATA] (data) {\n    for (const p of this.pipes) {\n      if (p.dest.write(data) === false)\n        this.pause()\n    }\n    const ret = super.emit('data', data)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITEND] () {\n    if (this[EMITTED_END])\n      return\n\n    this[EMITTED_END] = true\n    this.readable = false\n    if (this[ASYNC])\n      defer(() => this[EMITEND2]())\n    else\n      this[EMITEND2]()\n  }\n\n  [EMITEND2] () {\n    if (this[DECODER]) {\n      const data = this[DECODER].end()\n      if (data) {\n        for (const p of this.pipes) {\n          p.dest.write(data)\n        }\n        super.emit('data', data)\n      }\n    }\n\n    for (const p of this.pipes) {\n      p.end()\n    }\n    const ret = super.emit('end')\n    this.removeAllListeners('end')\n    return ret\n  }\n\n  // const all = await stream.collect()\n  collect () {\n    const buf = []\n    if (!this[OBJECTMODE])\n      buf.dataLength = 0\n    // set the promise first, in case an error is raised\n    // by triggering the flow here.\n    const p = this.promise()\n    this.on('data', c => {\n      buf.push(c)\n      if (!this[OBJECTMODE])\n        buf.dataLength += c.length\n    })\n    return p.then(() => buf)\n  }\n\n  // const data = await stream.concat()\n  concat () {\n    return this[OBJECTMODE]\n      ? Promise.reject(new Error('cannot concat in objectMode'))\n      : this.collect().then(buf =>\n          this[OBJECTMODE]\n            ? Promise.reject(new Error('cannot concat in objectMode'))\n            : this[ENCODING] ? buf.join('') : Buffer.concat(buf, buf.dataLength))\n  }\n\n  // stream.promise().then(() => done, er => emitted error)\n  promise () {\n    return new Promise((resolve, reject) => {\n      this.on(DESTROYED, () => reject(new Error('stream destroyed')))\n      this.on('error', er => reject(er))\n      this.on('end', () => resolve())\n    })\n  }\n\n  // for await (let chunk of stream)\n  [ASYNCITERATOR] () {\n    const next = () => {\n      const res = this.read()\n      if (res !== null)\n        return Promise.resolve({ done: false, value: res })\n\n      if (this[EOF])\n        return Promise.resolve({ done: true })\n\n      let resolve = null\n      let reject = null\n      const onerr = er => {\n        this.removeListener('data', ondata)\n        this.removeListener('end', onend)\n        reject(er)\n      }\n      const ondata = value => {\n        this.removeListener('error', onerr)\n        this.removeListener('end', onend)\n        this.pause()\n        resolve({ value: value, done: !!this[EOF] })\n      }\n      const onend = () => {\n        this.removeListener('error', onerr)\n        this.removeListener('data', ondata)\n        resolve({ done: true })\n      }\n      const ondestroy = () => onerr(new Error('stream destroyed'))\n      return new Promise((res, rej) => {\n        reject = rej\n        resolve = res\n        this.once(DESTROYED, ondestroy)\n        this.once('error', onerr)\n        this.once('end', onend)\n        this.once('data', ondata)\n      })\n    }\n\n    return { next }\n  }\n\n  // for (let chunk of stream)\n  [ITERATOR] () {\n    const next = () => {\n      const value = this.read()\n      const done = value === null\n      return { value, done }\n    }\n    return { next }\n  }\n\n  destroy (er) {\n    if (this[DESTROYED]) {\n      if (er)\n        this.emit('error', er)\n      else\n        this.emit(DESTROYED)\n      return this\n    }\n\n    this[DESTROYED] = true\n\n    // throw away all buffered data, it's never coming out\n    this.buffer.length = 0\n    this[BUFFERLENGTH] = 0\n\n    if (typeof this.close === 'function' && !this[CLOSED])\n      this.close()\n\n    if (er)\n      this.emit('error', er)\n    else // if no error to emit, still reject pending promises\n      this.emit(DESTROYED)\n\n    return this\n  }\n\n  static isStream (s) {\n    return !!s && (s instanceof Minipass || s instanceof Stream ||\n      s instanceof EE && (\n        typeof s.pipe === 'function' || // readable\n        (typeof s.write === 'function' && typeof s.end === 'function') // writable\n      ))\n  }\n}\n",
  "'use strict'\n\nconst assert = require('assert')\nconst Buffer = require('buffer').Buffer\nconst realZlib = require('zlib')\n\nconst constants = exports.constants = require('./constants.js')\nconst Minipass = require('minipass')\n\nconst OriginalBufferConcat = Buffer.concat\n\nconst _superWrite = Symbol('_superWrite')\nclass ZlibError extends Error {\n  constructor (err) {\n    super('zlib: ' + err.message)\n    this.code = err.code\n    this.errno = err.errno\n    /* istanbul ignore if */\n    if (!this.code)\n      this.code = 'ZLIB_ERROR'\n\n    this.message = 'zlib: ' + err.message\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  get name () {\n    return 'ZlibError'\n  }\n}\n\n// the Zlib class they all inherit from\n// This thing manages the queue of requests, and returns\n// true or false if there is anything in the queue when\n// you call the .write() method.\nconst _opts = Symbol('opts')\nconst _flushFlag = Symbol('flushFlag')\nconst _finishFlushFlag = Symbol('finishFlushFlag')\nconst _fullFlushFlag = Symbol('fullFlushFlag')\nconst _handle = Symbol('handle')\nconst _onError = Symbol('onError')\nconst _sawError = Symbol('sawError')\nconst _level = Symbol('level')\nconst _strategy = Symbol('strategy')\nconst _ended = Symbol('ended')\nconst _defaultFullFlush = Symbol('_defaultFullFlush')\n\nclass ZlibBase extends Minipass {\n  constructor (opts, mode) {\n    if (!opts || typeof opts !== 'object')\n      throw new TypeError('invalid options for ZlibBase constructor')\n\n    super(opts)\n    this[_sawError] = false\n    this[_ended] = false\n    this[_opts] = opts\n\n    this[_flushFlag] = opts.flush\n    this[_finishFlushFlag] = opts.finishFlush\n    // this will throw if any options are invalid for the class selected\n    try {\n      this[_handle] = new realZlib[mode](opts)\n    } catch (er) {\n      // make sure that all errors get decorated properly\n      throw new ZlibError(er)\n    }\n\n    this[_onError] = (err) => {\n      // no sense raising multiple errors, since we abort on the first one.\n      if (this[_sawError])\n        return\n\n      this[_sawError] = true\n\n      // there is no way to cleanly recover.\n      // continuing only obscures problems.\n      this.close()\n      this.emit('error', err)\n    }\n\n    this[_handle].on('error', er => this[_onError](new ZlibError(er)))\n    this.once('end', () => this.close)\n  }\n\n  close () {\n    if (this[_handle]) {\n      this[_handle].close()\n      this[_handle] = null\n      this.emit('close')\n    }\n  }\n\n  reset () {\n    if (!this[_sawError]) {\n      assert(this[_handle], 'zlib binding closed')\n      return this[_handle].reset()\n    }\n  }\n\n  flush (flushFlag) {\n    if (this.ended)\n      return\n\n    if (typeof flushFlag !== 'number')\n      flushFlag = this[_fullFlushFlag]\n    this.write(Object.assign(Buffer.alloc(0), { [_flushFlag]: flushFlag }))\n  }\n\n  end (chunk, encoding, cb) {\n    if (chunk)\n      this.write(chunk, encoding)\n    this.flush(this[_finishFlushFlag])\n    this[_ended] = true\n    return super.end(null, null, cb)\n  }\n\n  get ended () {\n    return this[_ended]\n  }\n\n  write (chunk, encoding, cb) {\n    // process the chunk using the sync process\n    // then super.write() all the outputted chunks\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n\n    if (typeof chunk === 'string')\n      chunk = Buffer.from(chunk, encoding)\n\n    if (this[_sawError])\n      return\n    assert(this[_handle], 'zlib binding closed')\n\n    // _processChunk tries to .close() the native handle after it's done, so we\n    // intercept that by temporarily making it a no-op.\n    const nativeHandle = this[_handle]._handle\n    const originalNativeClose = nativeHandle.close\n    nativeHandle.close = () => {}\n    const originalClose = this[_handle].close\n    this[_handle].close = () => {}\n    // It also calls `Buffer.concat()` at the end, which may be convenient\n    // for some, but which we are not interested in as it slows us down.\n    Buffer.concat = (args) => args\n    let result\n    try {\n      const flushFlag = typeof chunk[_flushFlag] === 'number'\n        ? chunk[_flushFlag] : this[_flushFlag]\n      result = this[_handle]._processChunk(chunk, flushFlag)\n      // if we don't throw, reset it back how it was\n      Buffer.concat = OriginalBufferConcat\n    } catch (err) {\n      // or if we do, put Buffer.concat() back before we emit error\n      // Error events call into user code, which may call Buffer.concat()\n      Buffer.concat = OriginalBufferConcat\n      this[_onError](new ZlibError(err))\n    } finally {\n      if (this[_handle]) {\n        // Core zlib resets `_handle` to null after attempting to close the\n        // native handle. Our no-op handler prevented actual closure, but we\n        // need to restore the `._handle` property.\n        this[_handle]._handle = nativeHandle\n        nativeHandle.close = originalNativeClose\n        this[_handle].close = originalClose\n        // `_processChunk()` adds an 'error' listener. If we don't remove it\n        // after each call, these handlers start piling up.\n        this[_handle].removeAllListeners('error')\n        // make sure OUR error listener is still attached tho\n      }\n    }\n\n    if (this[_handle])\n      this[_handle].on('error', er => this[_onError](new ZlibError(er)))\n\n    let writeReturn\n    if (result) {\n      if (Array.isArray(result) && result.length > 0) {\n        // The first buffer is always `handle._outBuffer`, which would be\n        // re-used for later invocations; so, we always have to copy that one.\n        writeReturn = this[_superWrite](Buffer.from(result[0]))\n        for (let i = 1; i < result.length; i++) {\n          writeReturn = this[_superWrite](result[i])\n        }\n      } else {\n        writeReturn = this[_superWrite](Buffer.from(result))\n      }\n    }\n\n    if (cb)\n      cb()\n    return writeReturn\n  }\n\n  [_superWrite] (data) {\n    return super.write(data)\n  }\n}\n\nclass Zlib extends ZlibBase {\n  constructor (opts, mode) {\n    opts = opts || {}\n\n    opts.flush = opts.flush || constants.Z_NO_FLUSH\n    opts.finishFlush = opts.finishFlush || constants.Z_FINISH\n    super(opts, mode)\n\n    this[_fullFlushFlag] = constants.Z_FULL_FLUSH\n    this[_level] = opts.level\n    this[_strategy] = opts.strategy\n  }\n\n  params (level, strategy) {\n    if (this[_sawError])\n      return\n\n    if (!this[_handle])\n      throw new Error('cannot switch params when binding is closed')\n\n    // no way to test this without also not supporting params at all\n    /* istanbul ignore if */\n    if (!this[_handle].params)\n      throw new Error('not supported in this implementation')\n\n    if (this[_level] !== level || this[_strategy] !== strategy) {\n      this.flush(constants.Z_SYNC_FLUSH)\n      assert(this[_handle], 'zlib binding closed')\n      // .params() calls .flush(), but the latter is always async in the\n      // core zlib. We override .flush() temporarily to intercept that and\n      // flush synchronously.\n      const origFlush = this[_handle].flush\n      this[_handle].flush = (flushFlag, cb) => {\n        this.flush(flushFlag)\n        cb()\n      }\n      try {\n        this[_handle].params(level, strategy)\n      } finally {\n        this[_handle].flush = origFlush\n      }\n      /* istanbul ignore else */\n      if (this[_handle]) {\n        this[_level] = level\n        this[_strategy] = strategy\n      }\n    }\n  }\n}\n\n// minimal 2-byte header\nclass Deflate extends Zlib {\n  constructor (opts) {\n    super(opts, 'Deflate')\n  }\n}\n\nclass Inflate extends Zlib {\n  constructor (opts) {\n    super(opts, 'Inflate')\n  }\n}\n\n// gzip - bigger header, same deflate compression\nconst _portable = Symbol('_portable')\nclass Gzip extends Zlib {\n  constructor (opts) {\n    super(opts, 'Gzip')\n    this[_portable] = opts && !!opts.portable\n  }\n\n  [_superWrite] (data) {\n    if (!this[_portable])\n      return super[_superWrite](data)\n\n    // we'll always get the header emitted in one first chunk\n    // overwrite the OS indicator byte with 0xFF\n    this[_portable] = false\n    data[9] = 255\n    return super[_superWrite](data)\n  }\n}\n\nclass Gunzip extends Zlib {\n  constructor (opts) {\n    super(opts, 'Gunzip')\n  }\n}\n\n// raw - no header\nclass DeflateRaw extends Zlib {\n  constructor (opts) {\n    super(opts, 'DeflateRaw')\n  }\n}\n\nclass InflateRaw extends Zlib {\n  constructor (opts) {\n    super(opts, 'InflateRaw')\n  }\n}\n\n// auto-detect header.\nclass Unzip extends Zlib {\n  constructor (opts) {\n    super(opts, 'Unzip')\n  }\n}\n\nclass Brotli extends ZlibBase {\n  constructor (opts, mode) {\n    opts = opts || {}\n\n    opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS\n    opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH\n\n    super(opts, mode)\n\n    this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH\n  }\n}\n\nclass BrotliCompress extends Brotli {\n  constructor (opts) {\n    super(opts, 'BrotliCompress')\n  }\n}\n\nclass BrotliDecompress extends Brotli {\n  constructor (opts) {\n    super(opts, 'BrotliDecompress')\n  }\n}\n\nexports.Deflate = Deflate\nexports.Inflate = Inflate\nexports.Gzip = Gzip\nexports.Gunzip = Gunzip\nexports.DeflateRaw = DeflateRaw\nexports.InflateRaw = InflateRaw\nexports.Unzip = Unzip\n/* istanbul ignore else */\nif (typeof realZlib.BrotliCompress === 'function') {\n  exports.BrotliCompress = BrotliCompress\n  exports.BrotliDecompress = BrotliDecompress\n} else {\n  exports.BrotliCompress = exports.BrotliDecompress = class {\n    constructor () {\n      throw new Error('Brotli is not supported in this version of Node.js')\n    }\n  }\n}\n",
  "// on windows, either \\ or / are valid directory separators.\n// on unix, \\ is a valid character in filenames.\n// so, on windows, and only on windows, we replace all \\ chars with /,\n// so that we can use / as our one and only directory separator char.\n\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nmodule.exports = platform !== 'win32' ? p => p\n  : p => p && p.replace(/\\\\/g, '/')\n",
  "'use strict'\nconst { Minipass } = require('minipass')\nconst normPath = require('./normalize-windows-path.js')\n\nconst SLURP = Symbol('slurp')\nmodule.exports = class ReadEntry extends Minipass {\n  constructor (header, ex, gex) {\n    super()\n    // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n    this.pause()\n    this.extended = ex\n    this.globalExtended = gex\n    this.header = header\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\n    this.blockRemain = this.startBlockSize\n    this.remain = header.size\n    this.type = header.type\n    this.meta = false\n    this.ignore = false\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true\n        break\n\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n      default:\n        this.ignore = true\n    }\n\n    this.path = normPath(header.path)\n    this.mode = header.mode\n    if (this.mode) {\n      this.mode = this.mode & 0o7777\n    }\n    this.uid = header.uid\n    this.gid = header.gid\n    this.uname = header.uname\n    this.gname = header.gname\n    this.size = header.size\n    this.mtime = header.mtime\n    this.atime = header.atime\n    this.ctime = header.ctime\n    this.linkpath = normPath(header.linkpath)\n    this.uname = header.uname\n    this.gname = header.gname\n\n    if (ex) {\n      this[SLURP](ex)\n    }\n    if (gex) {\n      this[SLURP](gex, true)\n    }\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain) {\n      throw new Error('writing more to entry than is appropriate')\n    }\n\n    const r = this.remain\n    const br = this.blockRemain\n    this.remain = Math.max(0, r - writeLen)\n    this.blockRemain = Math.max(0, br - writeLen)\n    if (this.ignore) {\n      return true\n    }\n\n    if (r >= writeLen) {\n      return super.write(data)\n    }\n\n    // r < writeLen\n    return super.write(data.slice(0, r))\n  }\n\n  [SLURP] (ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path')) {\n        this[k] = k === 'path' || k === 'linkpath' ? normPath(ex[k]) : ex[k]\n      }\n    }\n  }\n}\n",
  "'use strict'\n// map types from key to human-friendly name\nexports.name = new Map([\n  ['0', 'File'],\n  // same as File\n  ['', 'OldFile'],\n  ['1', 'Link'],\n  ['2', 'SymbolicLink'],\n  // Devices and FIFOs aren't fully supported\n  // they are parsed, but skipped when unpacking\n  ['3', 'CharacterDevice'],\n  ['4', 'BlockDevice'],\n  ['5', 'Directory'],\n  ['6', 'FIFO'],\n  // same as File\n  ['7', 'ContiguousFile'],\n  // pax headers\n  ['g', 'GlobalExtendedHeader'],\n  ['x', 'ExtendedHeader'],\n  // vendor-specific stuff\n  // skip\n  ['A', 'SolarisACL'],\n  // like 5, but with data, which should be skipped\n  ['D', 'GNUDumpDir'],\n  // metadata only, skip\n  ['I', 'Inode'],\n  // data = link path of next file\n  ['K', 'NextFileHasLongLinkpath'],\n  // data = path of next file\n  ['L', 'NextFileHasLongPath'],\n  // skip\n  ['M', 'ContinuationFile'],\n  // like L\n  ['N', 'OldGnuLongPath'],\n  // skip\n  ['S', 'SparseFile'],\n  // skip\n  ['V', 'TapeVolumeHeader'],\n  // like x\n  ['X', 'OldExtendedHeader'],\n])\n\n// map the other direction\nexports.code = new Map(Array.from(exports.name).map(kv => [kv[1], kv[0]]))\n",
  "'use strict'\n// Tar can encode large and negative numbers using a leading byte of\n// 0xff for negative, and 0x80 for positive.\n\nconst encode = (num, buf) => {\n  if (!Number.isSafeInteger(num)) {\n  // The number is so large that javascript cannot represent it with integer\n  // precision.\n    throw Error('cannot encode number outside of javascript safe integer range')\n  } else if (num < 0) {\n    encodeNegative(num, buf)\n  } else {\n    encodePositive(num, buf)\n  }\n  return buf\n}\n\nconst encodePositive = (num, buf) => {\n  buf[0] = 0x80\n\n  for (var i = buf.length; i > 1; i--) {\n    buf[i - 1] = num & 0xff\n    num = Math.floor(num / 0x100)\n  }\n}\n\nconst encodeNegative = (num, buf) => {\n  buf[0] = 0xff\n  var flipped = false\n  num = num * -1\n  for (var i = buf.length; i > 1; i--) {\n    var byte = num & 0xff\n    num = Math.floor(num / 0x100)\n    if (flipped) {\n      buf[i - 1] = onesComp(byte)\n    } else if (byte === 0) {\n      buf[i - 1] = 0\n    } else {\n      flipped = true\n      buf[i - 1] = twosComp(byte)\n    }\n  }\n}\n\nconst parse = (buf) => {\n  const pre = buf[0]\n  const value = pre === 0x80 ? pos(buf.slice(1, buf.length))\n    : pre === 0xff ? twos(buf)\n    : null\n  if (value === null) {\n    throw Error('invalid base256 encoding')\n  }\n\n  if (!Number.isSafeInteger(value)) {\n  // The number is so large that javascript cannot represent it with integer\n  // precision.\n    throw Error('parsed number outside of javascript safe integer range')\n  }\n\n  return value\n}\n\nconst twos = (buf) => {\n  var len = buf.length\n  var sum = 0\n  var flipped = false\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i]\n    var f\n    if (flipped) {\n      f = onesComp(byte)\n    } else if (byte === 0) {\n      f = byte\n    } else {\n      flipped = true\n      f = twosComp(byte)\n    }\n    if (f !== 0) {\n      sum -= f * Math.pow(256, len - i - 1)\n    }\n  }\n  return sum\n}\n\nconst pos = (buf) => {\n  var len = buf.length\n  var sum = 0\n  for (var i = len - 1; i > -1; i--) {\n    var byte = buf[i]\n    if (byte !== 0) {\n      sum += byte * Math.pow(256, len - i - 1)\n    }\n  }\n  return sum\n}\n\nconst onesComp = byte => (0xff ^ byte) & 0xff\n\nconst twosComp = byte => ((0xff ^ byte) + 1) & 0xff\n\nmodule.exports = {\n  encode,\n  parse,\n}\n",
  "'use strict'\n// parse a 512-byte header block to a data object, or vice-versa\n// encode returns `true` if a pax extended header is needed, because\n// the data could not be faithfully encoded in a simple header.\n// (Also, check header.needPax to see if it needs a pax header.)\n\nconst types = require('./types.js')\nconst pathModule = require('path').posix\nconst large = require('./large-numbers.js')\n\nconst SLURP = Symbol('slurp')\nconst TYPE = Symbol('type')\n\nclass Header {\n  constructor (data, off, ex, gex) {\n    this.cksumValid = false\n    this.needPax = false\n    this.nullBlock = false\n\n    this.block = null\n    this.path = null\n    this.mode = null\n    this.uid = null\n    this.gid = null\n    this.size = null\n    this.mtime = null\n    this.cksum = null\n    this[TYPE] = '0'\n    this.linkpath = null\n    this.uname = null\n    this.gname = null\n    this.devmaj = 0\n    this.devmin = 0\n    this.atime = null\n    this.ctime = null\n\n    if (Buffer.isBuffer(data)) {\n      this.decode(data, off || 0, ex, gex)\n    } else if (data) {\n      this.set(data)\n    }\n  }\n\n  decode (buf, off, ex, gex) {\n    if (!off) {\n      off = 0\n    }\n\n    if (!buf || !(buf.length >= off + 512)) {\n      throw new Error('need 512 bytes for header')\n    }\n\n    this.path = decString(buf, off, 100)\n    this.mode = decNumber(buf, off + 100, 8)\n    this.uid = decNumber(buf, off + 108, 8)\n    this.gid = decNumber(buf, off + 116, 8)\n    this.size = decNumber(buf, off + 124, 12)\n    this.mtime = decDate(buf, off + 136, 12)\n    this.cksum = decNumber(buf, off + 148, 12)\n\n    // if we have extended or global extended headers, apply them now\n    // See https://github.com/npm/node-tar/pull/187\n    this[SLURP](ex)\n    this[SLURP](gex, true)\n\n    // old tar versions marked dirs as a file with a trailing /\n    this[TYPE] = decString(buf, off + 156, 1)\n    if (this[TYPE] === '') {\n      this[TYPE] = '0'\n    }\n    if (this[TYPE] === '0' && this.path.slice(-1) === '/') {\n      this[TYPE] = '5'\n    }\n\n    // tar implementations sometimes incorrectly put the stat(dir).size\n    // as the size in the tarball, even though Directory entries are\n    // not able to have any body at all.  In the very rare chance that\n    // it actually DOES have a body, we weren't going to do anything with\n    // it anyway, and it'll just be a warning about an invalid header.\n    if (this[TYPE] === '5') {\n      this.size = 0\n    }\n\n    this.linkpath = decString(buf, off + 157, 100)\n    if (buf.slice(off + 257, off + 265).toString() === 'ustar\\u000000') {\n      this.uname = decString(buf, off + 265, 32)\n      this.gname = decString(buf, off + 297, 32)\n      this.devmaj = decNumber(buf, off + 329, 8)\n      this.devmin = decNumber(buf, off + 337, 8)\n      if (buf[off + 475] !== 0) {\n        // definitely a prefix, definitely >130 chars.\n        const prefix = decString(buf, off + 345, 155)\n        this.path = prefix + '/' + this.path\n      } else {\n        const prefix = decString(buf, off + 345, 130)\n        if (prefix) {\n          this.path = prefix + '/' + this.path\n        }\n        this.atime = decDate(buf, off + 476, 12)\n        this.ctime = decDate(buf, off + 488, 12)\n      }\n    }\n\n    let sum = 8 * 0x20\n    for (let i = off; i < off + 148; i++) {\n      sum += buf[i]\n    }\n\n    for (let i = off + 156; i < off + 512; i++) {\n      sum += buf[i]\n    }\n\n    this.cksumValid = sum === this.cksum\n    if (this.cksum === null && sum === 8 * 0x20) {\n      this.nullBlock = true\n    }\n  }\n\n  [SLURP] (ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path')) {\n        this[k] = ex[k]\n      }\n    }\n  }\n\n  encode (buf, off) {\n    if (!buf) {\n      buf = this.block = Buffer.alloc(512)\n      off = 0\n    }\n\n    if (!off) {\n      off = 0\n    }\n\n    if (!(buf.length >= off + 512)) {\n      throw new Error('need 512 bytes for header')\n    }\n\n    const prefixSize = this.ctime || this.atime ? 130 : 155\n    const split = splitPrefix(this.path || '', prefixSize)\n    const path = split[0]\n    const prefix = split[1]\n    this.needPax = split[2]\n\n    this.needPax = encString(buf, off, 100, path) || this.needPax\n    this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax\n    this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax\n    this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax\n    this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax\n    this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax\n    buf[off + 156] = this[TYPE].charCodeAt(0)\n    this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax\n    buf.write('ustar\\u000000', off + 257, 8)\n    this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax\n    this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax\n    this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax\n    this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax\n    this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax\n    if (buf[off + 475] !== 0) {\n      this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax\n    } else {\n      this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax\n      this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax\n      this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax\n    }\n\n    let sum = 8 * 0x20\n    for (let i = off; i < off + 148; i++) {\n      sum += buf[i]\n    }\n\n    for (let i = off + 156; i < off + 512; i++) {\n      sum += buf[i]\n    }\n\n    this.cksum = sum\n    encNumber(buf, off + 148, 8, this.cksum)\n    this.cksumValid = true\n\n    return this.needPax\n  }\n\n  set (data) {\n    for (const i in data) {\n      if (data[i] !== null && data[i] !== undefined) {\n        this[i] = data[i]\n      }\n    }\n  }\n\n  get type () {\n    return types.name.get(this[TYPE]) || this[TYPE]\n  }\n\n  get typeKey () {\n    return this[TYPE]\n  }\n\n  set type (type) {\n    if (types.code.has(type)) {\n      this[TYPE] = types.code.get(type)\n    } else {\n      this[TYPE] = type\n    }\n  }\n}\n\nconst splitPrefix = (p, prefixSize) => {\n  const pathSize = 100\n  let pp = p\n  let prefix = ''\n  let ret\n  const root = pathModule.parse(p).root || '.'\n\n  if (Buffer.byteLength(pp) < pathSize) {\n    ret = [pp, prefix, false]\n  } else {\n    // first set prefix to the dir, and path to the base\n    prefix = pathModule.dirname(pp)\n    pp = pathModule.basename(pp)\n\n    do {\n      if (Buffer.byteLength(pp) <= pathSize &&\n          Buffer.byteLength(prefix) <= prefixSize) {\n        // both fit!\n        ret = [pp, prefix, false]\n      } else if (Buffer.byteLength(pp) > pathSize &&\n          Buffer.byteLength(prefix) <= prefixSize) {\n        // prefix fits in prefix, but path doesn't fit in path\n        ret = [pp.slice(0, pathSize - 1), prefix, true]\n      } else {\n        // make path take a bit from prefix\n        pp = pathModule.join(pathModule.basename(prefix), pp)\n        prefix = pathModule.dirname(prefix)\n      }\n    } while (prefix !== root && !ret)\n\n    // at this point, found no resolution, just truncate\n    if (!ret) {\n      ret = [p.slice(0, pathSize - 1), '', true]\n    }\n  }\n  return ret\n}\n\nconst decString = (buf, off, size) =>\n  buf.slice(off, off + size).toString('utf8').replace(/\\0.*/, '')\n\nconst decDate = (buf, off, size) =>\n  numToDate(decNumber(buf, off, size))\n\nconst numToDate = num => num === null ? null : new Date(num * 1000)\n\nconst decNumber = (buf, off, size) =>\n  buf[off] & 0x80 ? large.parse(buf.slice(off, off + size))\n  : decSmallNumber(buf, off, size)\n\nconst nanNull = value => isNaN(value) ? null : value\n\nconst decSmallNumber = (buf, off, size) =>\n  nanNull(parseInt(\n    buf.slice(off, off + size)\n      .toString('utf8').replace(/\\0.*$/, '').trim(), 8))\n\n// the maximum encodable as a null-terminated octal, by field size\nconst MAXNUM = {\n  12: 0o77777777777,\n  8: 0o7777777,\n}\n\nconst encNumber = (buf, off, size, number) =>\n  number === null ? false :\n  number > MAXNUM[size] || number < 0\n    ? (large.encode(number, buf.slice(off, off + size)), true)\n    : (encSmallNumber(buf, off, size, number), false)\n\nconst encSmallNumber = (buf, off, size, number) =>\n  buf.write(octalString(number, size), off, size, 'ascii')\n\nconst octalString = (number, size) =>\n  padOctal(Math.floor(number).toString(8), size)\n\nconst padOctal = (string, size) =>\n  (string.length === size - 1 ? string\n  : new Array(size - string.length - 1).join('0') + string + ' ') + '\\0'\n\nconst encDate = (buf, off, size, date) =>\n  date === null ? false :\n  encNumber(buf, off, size, date.getTime() / 1000)\n\n// enough to fill the longest string we've got\nconst NULLS = new Array(156).join('\\0')\n// pad with nulls, return true if it's longer or non-ascii\nconst encString = (buf, off, size, string) =>\n  string === null ? false :\n  (buf.write(string + NULLS, off, size, 'utf8'),\n  string.length !== Buffer.byteLength(string) || string.length > size)\n\nmodule.exports = Header\n",
  "'use strict'\nconst Header = require('./header.js')\nconst path = require('path')\n\nclass Pax {\n  constructor (obj, global) {\n    this.atime = obj.atime || null\n    this.charset = obj.charset || null\n    this.comment = obj.comment || null\n    this.ctime = obj.ctime || null\n    this.gid = obj.gid || null\n    this.gname = obj.gname || null\n    this.linkpath = obj.linkpath || null\n    this.mtime = obj.mtime || null\n    this.path = obj.path || null\n    this.size = obj.size || null\n    this.uid = obj.uid || null\n    this.uname = obj.uname || null\n    this.dev = obj.dev || null\n    this.ino = obj.ino || null\n    this.nlink = obj.nlink || null\n    this.global = global || false\n  }\n\n  encode () {\n    const body = this.encodeBody()\n    if (body === '') {\n      return null\n    }\n\n    const bodyLen = Buffer.byteLength(body)\n    // round up to 512 bytes\n    // add 512 for header\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512)\n    const buf = Buffer.allocUnsafe(bufLen)\n\n    // 0-fill the header section, it might not hit every field\n    for (let i = 0; i < 512; i++) {\n      buf[i] = 0\n    }\n\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null,\n    }).encode(buf)\n\n    buf.write(body, 512, bodyLen, 'utf8')\n\n    // null pad after the body\n    for (let i = bodyLen + 512; i < buf.length; i++) {\n      buf[i] = 0\n    }\n\n    return buf\n  }\n\n  encodeBody () {\n    return (\n      this.encodeField('path') +\n      this.encodeField('ctime') +\n      this.encodeField('atime') +\n      this.encodeField('dev') +\n      this.encodeField('ino') +\n      this.encodeField('nlink') +\n      this.encodeField('charset') +\n      this.encodeField('comment') +\n      this.encodeField('gid') +\n      this.encodeField('gname') +\n      this.encodeField('linkpath') +\n      this.encodeField('mtime') +\n      this.encodeField('size') +\n      this.encodeField('uid') +\n      this.encodeField('uname')\n    )\n  }\n\n  encodeField (field) {\n    if (this[field] === null || this[field] === undefined) {\n      return ''\n    }\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000\n      : this[field]\n    const s = ' ' +\n      (field === 'dev' || field === 'ino' || field === 'nlink'\n        ? 'SCHILY.' : '') +\n      field + '=' + v + '\\n'\n    const byteLen = Buffer.byteLength(s)\n    // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1\n    if (byteLen + digits >= Math.pow(10, digits)) {\n      digits += 1\n    }\n    const len = digits + byteLen\n    return len + s\n  }\n}\n\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)\n\nconst merge = (a, b) =>\n  b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a\n\nconst parseKV = string =>\n  string\n    .replace(/\\n$/, '')\n    .split('\\n')\n    .reduce(parseKVLine, Object.create(null))\n\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10)\n\n  // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n  if (n !== Buffer.byteLength(line) + 1) {\n    return set\n  }\n\n  line = line.slice((n + ' ').length)\n  const kv = line.split('=')\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1')\n  if (!k) {\n    return set\n  }\n\n  const v = kv.join('=')\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k)\n    ? new Date(v * 1000)\n    : /^[0-9]+$/.test(v) ? +v\n    : v\n  return set\n}\n\nmodule.exports = Pax\n",
  "// warning: extremely hot code path.\n// This has been meticulously optimized for use\n// within npm install on large package trees.\n// Do not edit without careful benchmarking.\nmodule.exports = str => {\n  let i = str.length - 1\n  let slashesStart = -1\n  while (i > -1 && str.charAt(i) === '/') {\n    slashesStart = i\n    i--\n  }\n  return slashesStart === -1 ? str : str.slice(0, slashesStart)\n}\n",
  "'use strict'\nmodule.exports = Base => class extends Base {\n  warn (code, message, data = {}) {\n    if (this.file) {\n      data.file = this.file\n    }\n    if (this.cwd) {\n      data.cwd = this.cwd\n    }\n    data.code = message instanceof Error && message.code || code\n    data.tarCode = code\n    if (!this.strict && data.recoverable !== false) {\n      if (message instanceof Error) {\n        data = Object.assign(message, data)\n        message = message.message\n      }\n      this.emit('warn', data.tarCode, message, data)\n    } else if (message instanceof Error) {\n      this.emit('error', Object.assign(message, data))\n    } else {\n      this.emit('error', Object.assign(new Error(`${code}: ${message}`), data))\n    }\n  }\n}\n",
  "'use strict'\n\n// When writing files on Windows, translate the characters to their\n// 0xf000 higher-encoded versions.\n\nconst raw = [\n  '|',\n  '<',\n  '>',\n  '?',\n  ':',\n]\n\nconst win = raw.map(char =>\n  String.fromCharCode(0xf000 + char.charCodeAt(0)))\n\nconst toWin = new Map(raw.map((char, i) => [char, win[i]]))\nconst toRaw = new Map(win.map((char, i) => [char, raw[i]]))\n\nmodule.exports = {\n  encode: s => raw.reduce((s, c) => s.split(c).join(toWin.get(c)), s),\n  decode: s => win.reduce((s, c) => s.split(c).join(toRaw.get(c)), s),\n}\n",
  "// unix absolute paths are also absolute on win32, so we use this for both\nconst { isAbsolute, parse } = require('path').win32\n\n// returns [root, stripped]\n// Note that windows will think that //x/y/z/a has a \"root\" of //x/y, and in\n// those cases, we want to sanitize it to x/y/z/a, not z/a, so we strip /\n// explicitly if it's the first character.\n// drive-specific relative paths on Windows get their root stripped off even\n// though they are not absolute, so `c:../foo` becomes ['c:', '../foo']\nmodule.exports = path => {\n  let r = ''\n\n  let parsed = parse(path)\n  while (isAbsolute(path) || parsed.root) {\n    // windows will think that //x/y/z has a \"root\" of //x/y/\n    // but strip the //?/C:/ off of //?/C:/path\n    const root = path.charAt(0) === '/' && path.slice(0, 4) !== '//?/' ? '/'\n      : parsed.root\n    path = path.slice(root.length)\n    r += root\n    parsed = parse(path)\n  }\n  return [r, path]\n}\n",
  "'use strict'\nmodule.exports = (mode, isDir, portable) => {\n  mode &= 0o7777\n\n  // in portable mode, use the minimum reasonable umask\n  // if this system creates files with 0o664 by default\n  // (as some linux distros do), then we'll write the\n  // archive with 0o644 instead.  Also, don't ever create\n  // a file that is not readable/writable by the owner.\n  if (portable) {\n    mode = (mode | 0o600) & ~0o22\n  }\n\n  // if dirs are readable, then they should be listable\n  if (isDir) {\n    if (mode & 0o400) {\n      mode |= 0o100\n    }\n    if (mode & 0o40) {\n      mode |= 0o10\n    }\n    if (mode & 0o4) {\n      mode |= 0o1\n    }\n  }\n  return mode\n}\n",
  "'use strict'\nconst { Minipass } = require('minipass')\nconst Pax = require('./pax.js')\nconst Header = require('./header.js')\nconst fs = require('fs')\nconst path = require('path')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix) {\n    return normPath(path)\n  }\n  path = normPath(path).replace(/^\\.(\\/|$)/, '')\n  return stripSlash(prefix) + '/' + path\n}\n\nconst maxReadSize = 16 * 1024 * 1024\nconst PROCESS = Symbol('process')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst HEADER = Symbol('header')\nconst READ = Symbol('read')\nconst LSTAT = Symbol('lstat')\nconst ONLSTAT = Symbol('onlstat')\nconst ONREAD = Symbol('onread')\nconst ONREADLINK = Symbol('onreadlink')\nconst OPENFILE = Symbol('openfile')\nconst ONOPENFILE = Symbol('onopenfile')\nconst CLOSE = Symbol('close')\nconst MODE = Symbol('mode')\nconst AWAITDRAIN = Symbol('awaitDrain')\nconst ONDRAIN = Symbol('ondrain')\nconst PREFIX = Symbol('prefix')\nconst HAD_ERROR = Symbol('hadError')\nconst warner = require('./warn-mixin.js')\nconst winchars = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\n\nconst modeFix = require('./mode-fix.js')\n\nconst WriteEntry = warner(class WriteEntry extends Minipass {\n  constructor (p, opt) {\n    opt = opt || {}\n    super(opt)\n    if (typeof p !== 'string') {\n      throw new TypeError('path is required')\n    }\n    this.path = normPath(p)\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid() || 0\n    this.myuser = process.env.USER || ''\n    this.maxReadSize = opt.maxReadSize || maxReadSize\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.preservePaths = !!opt.preservePaths\n    this.cwd = normPath(opt.cwd || process.cwd())\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null\n\n    this.fd = null\n    this.blockLen = null\n    this.blockRemain = null\n    this.buf = null\n    this.offset = null\n    this.length = null\n    this.pos = null\n    this.remain = null\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'))\n      p = p.replace(/\\\\/g, '/')\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))\n\n    if (this.path === '') {\n      this.path = './'\n    }\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.statCache.has(this.absolute)) {\n      this[ONLSTAT](this.statCache.get(this.absolute))\n    } else {\n      this[LSTAT]()\n    }\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'error') {\n      this[HAD_ERROR] = true\n    }\n    return super.emit(ev, ...data)\n  }\n\n  [LSTAT] () {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er) {\n        return this.emit('error', er)\n      }\n      this[ONLSTAT](stat)\n    })\n  }\n\n  [ONLSTAT] (stat) {\n    this.statCache.set(this.absolute, stat)\n    this.stat = stat\n    if (!stat.isFile()) {\n      stat.size = 0\n    }\n    this.type = getType(stat)\n    this.emit('stat', stat)\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    switch (this.type) {\n      case 'File': return this[FILE]()\n      case 'Directory': return this[DIRECTORY]()\n      case 'SymbolicLink': return this[SYMLINK]()\n      // unsupported types are ignored.\n      default: return this.end()\n    }\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [HEADER] () {\n    if (this.type === 'Directory' && this.portable) {\n      this.noMtime = true\n    }\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null :\n      this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime,\n    })\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink,\n      }).encode())\n    }\n    super.write(this.header.block)\n  }\n\n  [DIRECTORY] () {\n    if (this.path.slice(-1) !== '/') {\n      this.path += '/'\n    }\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [SYMLINK] () {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er) {\n        return this.emit('error', er)\n      }\n      this[ONREADLINK](linkpath)\n    })\n  }\n\n  [ONREADLINK] (linkpath) {\n    this.linkpath = normPath(linkpath)\n    this[HEADER]()\n    this.end()\n  }\n\n  [HARDLINK] (linkpath) {\n    this.type = 'Link'\n    this.linkpath = normPath(path.relative(this.cwd, linkpath))\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [FILE] () {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey)\n        if (linkpath.indexOf(this.cwd) === 0) {\n          return this[HARDLINK](linkpath)\n        }\n      }\n      this.linkCache.set(linkKey, this.absolute)\n    }\n\n    this[HEADER]()\n    if (this.stat.size === 0) {\n      return this.end()\n    }\n\n    this[OPENFILE]()\n  }\n\n  [OPENFILE] () {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er) {\n        return this.emit('error', er)\n      }\n      this[ONOPENFILE](fd)\n    })\n  }\n\n  [ONOPENFILE] (fd) {\n    this.fd = fd\n    if (this[HAD_ERROR]) {\n      return this[CLOSE]()\n    }\n\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512)\n    this.blockRemain = this.blockLen\n    const bufLen = Math.min(this.blockLen, this.maxReadSize)\n    this.buf = Buffer.allocUnsafe(bufLen)\n    this.offset = 0\n    this.pos = 0\n    this.remain = this.stat.size\n    this.length = this.buf.length\n    this[READ]()\n  }\n\n  [READ] () {\n    const { fd, buf, offset, length, pos } = this\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er))\n      }\n      this[ONREAD](bytesRead)\n    })\n  }\n\n  [CLOSE] (cb) {\n    fs.close(this.fd, cb)\n  }\n\n  [ONREAD] (bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0\n        bytesRead++\n        this.remain++\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ?\n      this.buf : this.buf.slice(this.offset, this.offset + bytesRead)\n\n    const flushed = this.write(writeBuf)\n    if (!flushed) {\n      this[AWAITDRAIN](() => this[ONDRAIN]())\n    } else {\n      this[ONDRAIN]()\n    }\n  }\n\n  [AWAITDRAIN] (cb) {\n    this.once('drain', cb)\n  }\n\n  write (writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected')\n      er.path = this.absolute\n      return this.emit('error', er)\n    }\n    this.remain -= writeBuf.length\n    this.blockRemain -= writeBuf.length\n    this.pos += writeBuf.length\n    this.offset += writeBuf.length\n    return super.write(writeBuf)\n  }\n\n  [ONDRAIN] () {\n    if (!this.remain) {\n      if (this.blockRemain) {\n        super.write(Buffer.alloc(this.blockRemain))\n      }\n      return this[CLOSE](er => er ? this.emit('error', er) : this.end())\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length))\n      this.offset = 0\n    }\n    this.length = this.buf.length - this.offset\n    this[READ]()\n  }\n})\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT] () {\n    this[ONLSTAT](fs.lstatSync(this.absolute))\n  }\n\n  [SYMLINK] () {\n    this[ONREADLINK](fs.readlinkSync(this.absolute))\n  }\n\n  [OPENFILE] () {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'))\n  }\n\n  [READ] () {\n    let threw = true\n    try {\n      const { fd, buf, offset, length, pos } = this\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos)\n      this[ONREAD](bytesRead)\n      threw = false\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {})\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN] (cb) {\n    cb()\n  }\n\n  [CLOSE] (cb) {\n    fs.closeSync(this.fd)\n    cb()\n  }\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends Minipass {\n  constructor (readEntry, opt) {\n    opt = opt || {}\n    super(opt)\n    this.preservePaths = !!opt.preservePaths\n    this.portable = !!opt.portable\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n\n    this.readEntry = readEntry\n    this.type = readEntry.type\n    if (this.type === 'Directory' && this.portable) {\n      this.noMtime = true\n    }\n\n    this.prefix = opt.prefix || null\n\n    this.path = normPath(readEntry.path)\n    this.mode = this[MODE](readEntry.mode)\n    this.uid = this.portable ? null : readEntry.uid\n    this.gid = this.portable ? null : readEntry.gid\n    this.uname = this.portable ? null : readEntry.uname\n    this.gname = this.portable ? null : readEntry.gname\n    this.size = readEntry.size\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime\n    this.atime = this.portable ? null : readEntry.atime\n    this.ctime = this.portable ? null : readEntry.ctime\n    this.linkpath = normPath(readEntry.linkpath)\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.remain = readEntry.size\n    this.blockRemain = readEntry.startBlockSize\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime,\n    })\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink,\n      }).encode())\n    }\n\n    super.write(this.header.block)\n    readEntry.pipe(this)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain) {\n      throw new Error('writing more to entry than is appropriate')\n    }\n    this.blockRemain -= writeLen\n    return super.write(data)\n  }\n\n  end () {\n    if (this.blockRemain) {\n      super.write(Buffer.alloc(this.blockRemain))\n    }\n    return super.end()\n  }\n})\n\nWriteEntry.Sync = WriteEntrySync\nWriteEntry.Tar = WriteEntryTar\n\nconst getType = stat =>\n  stat.isFile() ? 'File'\n  : stat.isDirectory() ? 'Directory'\n  : stat.isSymbolicLink() ? 'SymbolicLink'\n  : 'Unsupported'\n\nmodule.exports = WriteEntry\n",
  "'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n",
  "'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n",
  "'use strict'\n\n// A readable tar stream creator\n// Technically, this is a transform stream that you write paths into,\n// and tar format comes out of.\n// The `add()` method is like `write()` but returns this,\n// and end() return `this` as well, so you can\n// do `new Pack(opt).add('files').add('dir').end().pipe(output)\n// You could also do something like:\n// streamOfPaths().pipe(new Pack()).pipe(new fs.WriteStream('out.tar'))\n\nclass PackJob {\n  constructor (path, absolute) {\n    this.path = path || './'\n    this.absolute = absolute\n    this.entry = null\n    this.stat = null\n    this.readdir = null\n    this.pending = false\n    this.ignore = false\n    this.piped = false\n  }\n}\n\nconst { Minipass } = require('minipass')\nconst zlib = require('minizlib')\nconst ReadEntry = require('./read-entry.js')\nconst WriteEntry = require('./write-entry.js')\nconst WriteEntrySync = WriteEntry.Sync\nconst WriteEntryTar = WriteEntry.Tar\nconst Yallist = require('yallist')\nconst EOF = Buffer.alloc(1024)\nconst ONSTAT = Symbol('onStat')\nconst ENDED = Symbol('ended')\nconst QUEUE = Symbol('queue')\nconst CURRENT = Symbol('current')\nconst PROCESS = Symbol('process')\nconst PROCESSING = Symbol('processing')\nconst PROCESSJOB = Symbol('processJob')\nconst JOBS = Symbol('jobs')\nconst JOBDONE = Symbol('jobDone')\nconst ADDFSENTRY = Symbol('addFSEntry')\nconst ADDTARENTRY = Symbol('addTarEntry')\nconst STAT = Symbol('stat')\nconst READDIR = Symbol('readdir')\nconst ONREADDIR = Symbol('onreaddir')\nconst PIPE = Symbol('pipe')\nconst ENTRY = Symbol('entry')\nconst ENTRYOPT = Symbol('entryOpt')\nconst WRITEENTRYCLASS = Symbol('writeEntryClass')\nconst WRITE = Symbol('write')\nconst ONDRAIN = Symbol('ondrain')\n\nconst fs = require('fs')\nconst path = require('path')\nconst warner = require('./warn-mixin.js')\nconst normPath = require('./normalize-windows-path.js')\n\nconst Pack = warner(class Pack extends Minipass {\n  constructor (opt) {\n    super(opt)\n    opt = opt || Object.create(null)\n    this.opt = opt\n    this.file = opt.file || ''\n    this.cwd = opt.cwd || process.cwd()\n    this.maxReadSize = opt.maxReadSize\n    this.preservePaths = !!opt.preservePaths\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.prefix = normPath(opt.prefix || '')\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.readdirCache = opt.readdirCache || new Map()\n\n    this[WRITEENTRYCLASS] = WriteEntry\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n\n    this.portable = !!opt.portable\n    this.zip = null\n\n    if (opt.gzip || opt.brotli) {\n      if (opt.gzip && opt.brotli) {\n        throw new TypeError('gzip and brotli are mutually exclusive')\n      }\n      if (opt.gzip) {\n        if (typeof opt.gzip !== 'object') {\n          opt.gzip = {}\n        }\n        if (this.portable) {\n          opt.gzip.portable = true\n        }\n        this.zip = new zlib.Gzip(opt.gzip)\n      }\n      if (opt.brotli) {\n        if (typeof opt.brotli !== 'object') {\n          opt.brotli = {}\n        }\n        this.zip = new zlib.BrotliCompress(opt.brotli)\n      }\n      this.zip.on('data', chunk => super.write(chunk))\n      this.zip.on('end', _ => super.end())\n      this.zip.on('drain', _ => this[ONDRAIN]())\n      this.on('resume', _ => this.zip.resume())\n    } else {\n      this.on('drain', this[ONDRAIN])\n    }\n\n    this.noDirRecurse = !!opt.noDirRecurse\n    this.follow = !!opt.follow\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n\n    this.filter = typeof opt.filter === 'function' ? opt.filter : _ => true\n\n    this[QUEUE] = new Yallist()\n    this[JOBS] = 0\n    this.jobs = +opt.jobs || 4\n    this[PROCESSING] = false\n    this[ENDED] = false\n  }\n\n  [WRITE] (chunk) {\n    return super.write(chunk)\n  }\n\n  add (path) {\n    this.write(path)\n    return this\n  }\n\n  end (path) {\n    if (path) {\n      this.write(path)\n    }\n    this[ENDED] = true\n    this[PROCESS]()\n    return this\n  }\n\n  write (path) {\n    if (this[ENDED]) {\n      throw new Error('write after end')\n    }\n\n    if (path instanceof ReadEntry) {\n      this[ADDTARENTRY](path)\n    } else {\n      this[ADDFSENTRY](path)\n    }\n    return this.flowing\n  }\n\n  [ADDTARENTRY] (p) {\n    const absolute = normPath(path.resolve(this.cwd, p.path))\n    // in this case, we don't have to wait for the stat\n    if (!this.filter(p.path, p)) {\n      p.resume()\n    } else {\n      const job = new PackJob(p.path, absolute, false)\n      job.entry = new WriteEntryTar(p, this[ENTRYOPT](job))\n      job.entry.on('end', _ => this[JOBDONE](job))\n      this[JOBS] += 1\n      this[QUEUE].push(job)\n    }\n\n    this[PROCESS]()\n  }\n\n  [ADDFSENTRY] (p) {\n    const absolute = normPath(path.resolve(this.cwd, p))\n    this[QUEUE].push(new PackJob(p, absolute))\n    this[PROCESS]()\n  }\n\n  [STAT] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    const stat = this.follow ? 'stat' : 'lstat'\n    fs[stat](job.absolute, (er, stat) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er) {\n        this.emit('error', er)\n      } else {\n        this[ONSTAT](job, stat)\n      }\n    })\n  }\n\n  [ONSTAT] (job, stat) {\n    this.statCache.set(job.absolute, stat)\n    job.stat = stat\n\n    // now we have the stat, we can filter it.\n    if (!this.filter(job.path, stat)) {\n      job.ignore = true\n    }\n\n    this[PROCESS]()\n  }\n\n  [READDIR] (job) {\n    job.pending = true\n    this[JOBS] += 1\n    fs.readdir(job.absolute, (er, entries) => {\n      job.pending = false\n      this[JOBS] -= 1\n      if (er) {\n        return this.emit('error', er)\n      }\n      this[ONREADDIR](job, entries)\n    })\n  }\n\n  [ONREADDIR] (job, entries) {\n    this.readdirCache.set(job.absolute, entries)\n    job.readdir = entries\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    if (this[PROCESSING]) {\n      return\n    }\n\n    this[PROCESSING] = true\n    for (let w = this[QUEUE].head;\n      w !== null && this[JOBS] < this.jobs;\n      w = w.next) {\n      this[PROCESSJOB](w.value)\n      if (w.value.ignore) {\n        const p = w.next\n        this[QUEUE].removeNode(w)\n        w.next = p\n      }\n    }\n\n    this[PROCESSING] = false\n\n    if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {\n      if (this.zip) {\n        this.zip.end(EOF)\n      } else {\n        super.write(EOF)\n        super.end()\n      }\n    }\n  }\n\n  get [CURRENT] () {\n    return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value\n  }\n\n  [JOBDONE] (job) {\n    this[QUEUE].shift()\n    this[JOBS] -= 1\n    this[PROCESS]()\n  }\n\n  [PROCESSJOB] (job) {\n    if (job.pending) {\n      return\n    }\n\n    if (job.entry) {\n      if (job === this[CURRENT] && !job.piped) {\n        this[PIPE](job)\n      }\n      return\n    }\n\n    if (!job.stat) {\n      if (this.statCache.has(job.absolute)) {\n        this[ONSTAT](job, this.statCache.get(job.absolute))\n      } else {\n        this[STAT](job)\n      }\n    }\n    if (!job.stat) {\n      return\n    }\n\n    // filtered out!\n    if (job.ignore) {\n      return\n    }\n\n    if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {\n      if (this.readdirCache.has(job.absolute)) {\n        this[ONREADDIR](job, this.readdirCache.get(job.absolute))\n      } else {\n        this[READDIR](job)\n      }\n      if (!job.readdir) {\n        return\n      }\n    }\n\n    // we know it doesn't have an entry, because that got checked above\n    job.entry = this[ENTRY](job)\n    if (!job.entry) {\n      job.ignore = true\n      return\n    }\n\n    if (job === this[CURRENT] && !job.piped) {\n      this[PIPE](job)\n    }\n  }\n\n  [ENTRYOPT] (job) {\n    return {\n      onwarn: (code, msg, data) => this.warn(code, msg, data),\n      noPax: this.noPax,\n      cwd: this.cwd,\n      absolute: job.absolute,\n      preservePaths: this.preservePaths,\n      maxReadSize: this.maxReadSize,\n      strict: this.strict,\n      portable: this.portable,\n      linkCache: this.linkCache,\n      statCache: this.statCache,\n      noMtime: this.noMtime,\n      mtime: this.mtime,\n      prefix: this.prefix,\n    }\n  }\n\n  [ENTRY] (job) {\n    this[JOBS] += 1\n    try {\n      return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job))\n        .on('end', () => this[JOBDONE](job))\n        .on('error', er => this.emit('error', er))\n    } catch (er) {\n      this.emit('error', er)\n    }\n  }\n\n  [ONDRAIN] () {\n    if (this[CURRENT] && this[CURRENT].entry) {\n      this[CURRENT].entry.resume()\n    }\n  }\n\n  // like .pipe() but using super, because our write() is special\n  [PIPE] (job) {\n    job.piped = true\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n    }\n\n    const source = job.entry\n    const zip = this.zip\n\n    if (zip) {\n      source.on('data', chunk => {\n        if (!zip.write(chunk)) {\n          source.pause()\n        }\n      })\n    } else {\n      source.on('data', chunk => {\n        if (!super.write(chunk)) {\n          source.pause()\n        }\n      })\n    }\n  }\n\n  pause () {\n    if (this.zip) {\n      this.zip.pause()\n    }\n    return super.pause()\n  }\n})\n\nclass PackSync extends Pack {\n  constructor (opt) {\n    super(opt)\n    this[WRITEENTRYCLASS] = WriteEntrySync\n  }\n\n  // pause/resume are no-ops in sync streams.\n  pause () {}\n  resume () {}\n\n  [STAT] (job) {\n    const stat = this.follow ? 'statSync' : 'lstatSync'\n    this[ONSTAT](job, fs[stat](job.absolute))\n  }\n\n  [READDIR] (job, stat) {\n    this[ONREADDIR](job, fs.readdirSync(job.absolute))\n  }\n\n  // gotta get it all in this tick\n  [PIPE] (job) {\n    const source = job.entry\n    const zip = this.zip\n\n    if (job.readdir) {\n      job.readdir.forEach(entry => {\n        const p = job.path\n        const base = p === './' ? '' : p.replace(/\\/*$/, '/')\n        this[ADDFSENTRY](base + entry)\n      })\n    }\n\n    if (zip) {\n      source.on('data', chunk => {\n        zip.write(chunk)\n      })\n    } else {\n      source.on('data', chunk => {\n        super[WRITE](chunk)\n      })\n    }\n  }\n}\n\nPack.Sync = PackSync\n\nmodule.exports = Pack\n",
  "'use strict'\nconst proc = typeof process === 'object' && process ? process : {\n  stdout: null,\n  stderr: null,\n}\nconst EE = require('events')\nconst Stream = require('stream')\nconst SD = require('string_decoder').StringDecoder\n\nconst EOF = Symbol('EOF')\nconst MAYBE_EMIT_END = Symbol('maybeEmitEnd')\nconst EMITTED_END = Symbol('emittedEnd')\nconst EMITTING_END = Symbol('emittingEnd')\nconst EMITTED_ERROR = Symbol('emittedError')\nconst CLOSED = Symbol('closed')\nconst READ = Symbol('read')\nconst FLUSH = Symbol('flush')\nconst FLUSHCHUNK = Symbol('flushChunk')\nconst ENCODING = Symbol('encoding')\nconst DECODER = Symbol('decoder')\nconst FLOWING = Symbol('flowing')\nconst PAUSED = Symbol('paused')\nconst RESUME = Symbol('resume')\nconst BUFFERLENGTH = Symbol('bufferLength')\nconst BUFFERPUSH = Symbol('bufferPush')\nconst BUFFERSHIFT = Symbol('bufferShift')\nconst OBJECTMODE = Symbol('objectMode')\nconst DESTROYED = Symbol('destroyed')\nconst EMITDATA = Symbol('emitData')\nconst EMITEND = Symbol('emitEnd')\nconst EMITEND2 = Symbol('emitEnd2')\nconst ASYNC = Symbol('async')\n\nconst defer = fn => Promise.resolve().then(fn)\n\n// TODO remove when Node v8 support drops\nconst doIter = global._MP_NO_ITERATOR_SYMBOLS_  !== '1'\nconst ASYNCITERATOR = doIter && Symbol.asyncIterator\n  || Symbol('asyncIterator not implemented')\nconst ITERATOR = doIter && Symbol.iterator\n  || Symbol('iterator not implemented')\n\n// events that mean 'the stream is over'\n// these are treated specially, and re-emitted\n// if they are listened for after emitting.\nconst isEndish = ev =>\n  ev === 'end' ||\n  ev === 'finish' ||\n  ev === 'prefinish'\n\nconst isArrayBuffer = b => b instanceof ArrayBuffer ||\n  typeof b === 'object' &&\n  b.constructor &&\n  b.constructor.name === 'ArrayBuffer' &&\n  b.byteLength >= 0\n\nconst isArrayBufferView = b => !Buffer.isBuffer(b) && ArrayBuffer.isView(b)\n\nclass Pipe {\n  constructor (src, dest, opts) {\n    this.src = src\n    this.dest = dest\n    this.opts = opts\n    this.ondrain = () => src[RESUME]()\n    dest.on('drain', this.ondrain)\n  }\n  unpipe () {\n    this.dest.removeListener('drain', this.ondrain)\n  }\n  // istanbul ignore next - only here for the prototype\n  proxyErrors () {}\n  end () {\n    this.unpipe()\n    if (this.opts.end)\n      this.dest.end()\n  }\n}\n\nclass PipeProxyErrors extends Pipe {\n  unpipe () {\n    this.src.removeListener('error', this.proxyErrors)\n    super.unpipe()\n  }\n  constructor (src, dest, opts) {\n    super(src, dest, opts)\n    this.proxyErrors = er => dest.emit('error', er)\n    src.on('error', this.proxyErrors)\n  }\n}\n\nmodule.exports = class Minipass extends Stream {\n  constructor (options) {\n    super()\n    this[FLOWING] = false\n    // whether we're explicitly paused\n    this[PAUSED] = false\n    this.pipes = []\n    this.buffer = []\n    this[OBJECTMODE] = options && options.objectMode || false\n    if (this[OBJECTMODE])\n      this[ENCODING] = null\n    else\n      this[ENCODING] = options && options.encoding || null\n    if (this[ENCODING] === 'buffer')\n      this[ENCODING] = null\n    this[ASYNC] = options && !!options.async || false\n    this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null\n    this[EOF] = false\n    this[EMITTED_END] = false\n    this[EMITTING_END] = false\n    this[CLOSED] = false\n    this[EMITTED_ERROR] = null\n    this.writable = true\n    this.readable = true\n    this[BUFFERLENGTH] = 0\n    this[DESTROYED] = false\n  }\n\n  get bufferLength () { return this[BUFFERLENGTH] }\n\n  get encoding () { return this[ENCODING] }\n  set encoding (enc) {\n    if (this[OBJECTMODE])\n      throw new Error('cannot set encoding in objectMode')\n\n    if (this[ENCODING] && enc !== this[ENCODING] &&\n        (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))\n      throw new Error('cannot change encoding')\n\n    if (this[ENCODING] !== enc) {\n      this[DECODER] = enc ? new SD(enc) : null\n      if (this.buffer.length)\n        this.buffer = this.buffer.map(chunk => this[DECODER].write(chunk))\n    }\n\n    this[ENCODING] = enc\n  }\n\n  setEncoding (enc) {\n    this.encoding = enc\n  }\n\n  get objectMode () { return this[OBJECTMODE] }\n  set objectMode (om) { this[OBJECTMODE] = this[OBJECTMODE] || !!om }\n\n  get ['async'] () { return this[ASYNC] }\n  set ['async'] (a) { this[ASYNC] = this[ASYNC] || !!a }\n\n  write (chunk, encoding, cb) {\n    if (this[EOF])\n      throw new Error('write after end')\n\n    if (this[DESTROYED]) {\n      this.emit('error', Object.assign(\n        new Error('Cannot call write after a stream was destroyed'),\n        { code: 'ERR_STREAM_DESTROYED' }\n      ))\n      return true\n    }\n\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n\n    if (!encoding)\n      encoding = 'utf8'\n\n    const fn = this[ASYNC] ? defer : f => f()\n\n    // convert array buffers and typed array views into buffers\n    // at some point in the future, we may want to do the opposite!\n    // leave strings and buffers as-is\n    // anything else switches us into object mode\n    if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {\n      if (isArrayBufferView(chunk))\n        chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n      else if (isArrayBuffer(chunk))\n        chunk = Buffer.from(chunk)\n      else if (typeof chunk !== 'string')\n        // use the setter so we throw if we have encoding set\n        this.objectMode = true\n    }\n\n    // handle object mode up front, since it's simpler\n    // this yields better performance, fewer checks later.\n    if (this[OBJECTMODE]) {\n      /* istanbul ignore if - maybe impossible? */\n      if (this.flowing && this[BUFFERLENGTH] !== 0)\n        this[FLUSH](true)\n\n      if (this.flowing)\n        this.emit('data', chunk)\n      else\n        this[BUFFERPUSH](chunk)\n\n      if (this[BUFFERLENGTH] !== 0)\n        this.emit('readable')\n\n      if (cb)\n        fn(cb)\n\n      return this.flowing\n    }\n\n    // at this point the chunk is a buffer or string\n    // don't buffer it up or send it to the decoder\n    if (!chunk.length) {\n      if (this[BUFFERLENGTH] !== 0)\n        this.emit('readable')\n      if (cb)\n        fn(cb)\n      return this.flowing\n    }\n\n    // fast-path writing strings of same encoding to a stream with\n    // an empty buffer, skipping the buffer/decoder dance\n    if (typeof chunk === 'string' &&\n        // unless it is a string already ready for us to use\n        !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {\n      chunk = Buffer.from(chunk, encoding)\n    }\n\n    if (Buffer.isBuffer(chunk) && this[ENCODING])\n      chunk = this[DECODER].write(chunk)\n\n    // Note: flushing CAN potentially switch us into not-flowing mode\n    if (this.flowing && this[BUFFERLENGTH] !== 0)\n      this[FLUSH](true)\n\n    if (this.flowing)\n      this.emit('data', chunk)\n    else\n      this[BUFFERPUSH](chunk)\n\n    if (this[BUFFERLENGTH] !== 0)\n      this.emit('readable')\n\n    if (cb)\n      fn(cb)\n\n    return this.flowing\n  }\n\n  read (n) {\n    if (this[DESTROYED])\n      return null\n\n    if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH]) {\n      this[MAYBE_EMIT_END]()\n      return null\n    }\n\n    if (this[OBJECTMODE])\n      n = null\n\n    if (this.buffer.length > 1 && !this[OBJECTMODE]) {\n      if (this.encoding)\n        this.buffer = [this.buffer.join('')]\n      else\n        this.buffer = [Buffer.concat(this.buffer, this[BUFFERLENGTH])]\n    }\n\n    const ret = this[READ](n || null, this.buffer[0])\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [READ] (n, chunk) {\n    if (n === chunk.length || n === null)\n      this[BUFFERSHIFT]()\n    else {\n      this.buffer[0] = chunk.slice(n)\n      chunk = chunk.slice(0, n)\n      this[BUFFERLENGTH] -= n\n    }\n\n    this.emit('data', chunk)\n\n    if (!this.buffer.length && !this[EOF])\n      this.emit('drain')\n\n    return chunk\n  }\n\n  end (chunk, encoding, cb) {\n    if (typeof chunk === 'function')\n      cb = chunk, chunk = null\n    if (typeof encoding === 'function')\n      cb = encoding, encoding = 'utf8'\n    if (chunk)\n      this.write(chunk, encoding)\n    if (cb)\n      this.once('end', cb)\n    this[EOF] = true\n    this.writable = false\n\n    // if we haven't written anything, then go ahead and emit,\n    // even if we're not reading.\n    // we'll re-emit if a new 'end' listener is added anyway.\n    // This makes MP more suitable to write-only use cases.\n    if (this.flowing || !this[PAUSED])\n      this[MAYBE_EMIT_END]()\n    return this\n  }\n\n  // don't let the internal resume be overwritten\n  [RESUME] () {\n    if (this[DESTROYED])\n      return\n\n    this[PAUSED] = false\n    this[FLOWING] = true\n    this.emit('resume')\n    if (this.buffer.length)\n      this[FLUSH]()\n    else if (this[EOF])\n      this[MAYBE_EMIT_END]()\n    else\n      this.emit('drain')\n  }\n\n  resume () {\n    return this[RESUME]()\n  }\n\n  pause () {\n    this[FLOWING] = false\n    this[PAUSED] = true\n  }\n\n  get destroyed () {\n    return this[DESTROYED]\n  }\n\n  get flowing () {\n    return this[FLOWING]\n  }\n\n  get paused () {\n    return this[PAUSED]\n  }\n\n  [BUFFERPUSH] (chunk) {\n    if (this[OBJECTMODE])\n      this[BUFFERLENGTH] += 1\n    else\n      this[BUFFERLENGTH] += chunk.length\n    this.buffer.push(chunk)\n  }\n\n  [BUFFERSHIFT] () {\n    if (this.buffer.length) {\n      if (this[OBJECTMODE])\n        this[BUFFERLENGTH] -= 1\n      else\n        this[BUFFERLENGTH] -= this.buffer[0].length\n    }\n    return this.buffer.shift()\n  }\n\n  [FLUSH] (noDrain) {\n    do {} while (this[FLUSHCHUNK](this[BUFFERSHIFT]()))\n\n    if (!noDrain && !this.buffer.length && !this[EOF])\n      this.emit('drain')\n  }\n\n  [FLUSHCHUNK] (chunk) {\n    return chunk ? (this.emit('data', chunk), this.flowing) : false\n  }\n\n  pipe (dest, opts) {\n    if (this[DESTROYED])\n      return\n\n    const ended = this[EMITTED_END]\n    opts = opts || {}\n    if (dest === proc.stdout || dest === proc.stderr)\n      opts.end = false\n    else\n      opts.end = opts.end !== false\n    opts.proxyErrors = !!opts.proxyErrors\n\n    // piping an ended stream ends immediately\n    if (ended) {\n      if (opts.end)\n        dest.end()\n    } else {\n      this.pipes.push(!opts.proxyErrors ? new Pipe(this, dest, opts)\n        : new PipeProxyErrors(this, dest, opts))\n      if (this[ASYNC])\n        defer(() => this[RESUME]())\n      else\n        this[RESUME]()\n    }\n\n    return dest\n  }\n\n  unpipe (dest) {\n    const p = this.pipes.find(p => p.dest === dest)\n    if (p) {\n      this.pipes.splice(this.pipes.indexOf(p), 1)\n      p.unpipe()\n    }\n  }\n\n  addListener (ev, fn) {\n    return this.on(ev, fn)\n  }\n\n  on (ev, fn) {\n    const ret = super.on(ev, fn)\n    if (ev === 'data' && !this.pipes.length && !this.flowing)\n      this[RESUME]()\n    else if (ev === 'readable' && this[BUFFERLENGTH] !== 0)\n      super.emit('readable')\n    else if (isEndish(ev) && this[EMITTED_END]) {\n      super.emit(ev)\n      this.removeAllListeners(ev)\n    } else if (ev === 'error' && this[EMITTED_ERROR]) {\n      if (this[ASYNC])\n        defer(() => fn.call(this, this[EMITTED_ERROR]))\n      else\n        fn.call(this, this[EMITTED_ERROR])\n    }\n    return ret\n  }\n\n  get emittedEnd () {\n    return this[EMITTED_END]\n  }\n\n  [MAYBE_EMIT_END] () {\n    if (!this[EMITTING_END] &&\n        !this[EMITTED_END] &&\n        !this[DESTROYED] &&\n        this.buffer.length === 0 &&\n        this[EOF]) {\n      this[EMITTING_END] = true\n      this.emit('end')\n      this.emit('prefinish')\n      this.emit('finish')\n      if (this[CLOSED])\n        this.emit('close')\n      this[EMITTING_END] = false\n    }\n  }\n\n  emit (ev, data, ...extra) {\n    // error and close are only events allowed after calling destroy()\n    if (ev !== 'error' && ev !== 'close' && ev !== DESTROYED && this[DESTROYED])\n      return\n    else if (ev === 'data') {\n      return !data ? false\n        : this[ASYNC] ? defer(() => this[EMITDATA](data))\n        : this[EMITDATA](data)\n    } else if (ev === 'end') {\n      return this[EMITEND]()\n    } else if (ev === 'close') {\n      this[CLOSED] = true\n      // don't emit close before 'end' and 'finish'\n      if (!this[EMITTED_END] && !this[DESTROYED])\n        return\n      const ret = super.emit('close')\n      this.removeAllListeners('close')\n      return ret\n    } else if (ev === 'error') {\n      this[EMITTED_ERROR] = data\n      const ret = super.emit('error', data)\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'resume') {\n      const ret = super.emit('resume')\n      this[MAYBE_EMIT_END]()\n      return ret\n    } else if (ev === 'finish' || ev === 'prefinish') {\n      const ret = super.emit(ev)\n      this.removeAllListeners(ev)\n      return ret\n    }\n\n    // Some other unknown event\n    const ret = super.emit(ev, data, ...extra)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITDATA] (data) {\n    for (const p of this.pipes) {\n      if (p.dest.write(data) === false)\n        this.pause()\n    }\n    const ret = super.emit('data', data)\n    this[MAYBE_EMIT_END]()\n    return ret\n  }\n\n  [EMITEND] () {\n    if (this[EMITTED_END])\n      return\n\n    this[EMITTED_END] = true\n    this.readable = false\n    if (this[ASYNC])\n      defer(() => this[EMITEND2]())\n    else\n      this[EMITEND2]()\n  }\n\n  [EMITEND2] () {\n    if (this[DECODER]) {\n      const data = this[DECODER].end()\n      if (data) {\n        for (const p of this.pipes) {\n          p.dest.write(data)\n        }\n        super.emit('data', data)\n      }\n    }\n\n    for (const p of this.pipes) {\n      p.end()\n    }\n    const ret = super.emit('end')\n    this.removeAllListeners('end')\n    return ret\n  }\n\n  // const all = await stream.collect()\n  collect () {\n    const buf = []\n    if (!this[OBJECTMODE])\n      buf.dataLength = 0\n    // set the promise first, in case an error is raised\n    // by triggering the flow here.\n    const p = this.promise()\n    this.on('data', c => {\n      buf.push(c)\n      if (!this[OBJECTMODE])\n        buf.dataLength += c.length\n    })\n    return p.then(() => buf)\n  }\n\n  // const data = await stream.concat()\n  concat () {\n    return this[OBJECTMODE]\n      ? Promise.reject(new Error('cannot concat in objectMode'))\n      : this.collect().then(buf =>\n          this[OBJECTMODE]\n            ? Promise.reject(new Error('cannot concat in objectMode'))\n            : this[ENCODING] ? buf.join('') : Buffer.concat(buf, buf.dataLength))\n  }\n\n  // stream.promise().then(() => done, er => emitted error)\n  promise () {\n    return new Promise((resolve, reject) => {\n      this.on(DESTROYED, () => reject(new Error('stream destroyed')))\n      this.on('error', er => reject(er))\n      this.on('end', () => resolve())\n    })\n  }\n\n  // for await (let chunk of stream)\n  [ASYNCITERATOR] () {\n    const next = () => {\n      const res = this.read()\n      if (res !== null)\n        return Promise.resolve({ done: false, value: res })\n\n      if (this[EOF])\n        return Promise.resolve({ done: true })\n\n      let resolve = null\n      let reject = null\n      const onerr = er => {\n        this.removeListener('data', ondata)\n        this.removeListener('end', onend)\n        reject(er)\n      }\n      const ondata = value => {\n        this.removeListener('error', onerr)\n        this.removeListener('end', onend)\n        this.pause()\n        resolve({ value: value, done: !!this[EOF] })\n      }\n      const onend = () => {\n        this.removeListener('error', onerr)\n        this.removeListener('data', ondata)\n        resolve({ done: true })\n      }\n      const ondestroy = () => onerr(new Error('stream destroyed'))\n      return new Promise((res, rej) => {\n        reject = rej\n        resolve = res\n        this.once(DESTROYED, ondestroy)\n        this.once('error', onerr)\n        this.once('end', onend)\n        this.once('data', ondata)\n      })\n    }\n\n    return { next }\n  }\n\n  // for (let chunk of stream)\n  [ITERATOR] () {\n    const next = () => {\n      const value = this.read()\n      const done = value === null\n      return { value, done }\n    }\n    return { next }\n  }\n\n  destroy (er) {\n    if (this[DESTROYED]) {\n      if (er)\n        this.emit('error', er)\n      else\n        this.emit(DESTROYED)\n      return this\n    }\n\n    this[DESTROYED] = true\n\n    // throw away all buffered data, it's never coming out\n    this.buffer.length = 0\n    this[BUFFERLENGTH] = 0\n\n    if (typeof this.close === 'function' && !this[CLOSED])\n      this.close()\n\n    if (er)\n      this.emit('error', er)\n    else // if no error to emit, still reject pending promises\n      this.emit(DESTROYED)\n\n    return this\n  }\n\n  static isStream (s) {\n    return !!s && (s instanceof Minipass || s instanceof Stream ||\n      s instanceof EE && (\n        typeof s.pipe === 'function' || // readable\n        (typeof s.write === 'function' && typeof s.end === 'function') // writable\n      ))\n  }\n}\n",
  "'use strict'\nconst MiniPass = require('minipass')\nconst EE = require('events').EventEmitter\nconst fs = require('fs')\n\nlet writev = fs.writev\n/* istanbul ignore next */\nif (!writev) {\n  // This entire block can be removed if support for earlier than Node.js\n  // 12.9.0 is not needed.\n  const binding = process.binding('fs')\n  const FSReqWrap = binding.FSReqWrap || binding.FSReqCallback\n\n  writev = (fd, iovec, pos, cb) => {\n    const done = (er, bw) => cb(er, bw, iovec)\n    const req = new FSReqWrap()\n    req.oncomplete = done\n    binding.writeBuffers(fd, iovec, pos, req)\n  }\n}\n\nconst _autoClose = Symbol('_autoClose')\nconst _close = Symbol('_close')\nconst _ended = Symbol('_ended')\nconst _fd = Symbol('_fd')\nconst _finished = Symbol('_finished')\nconst _flags = Symbol('_flags')\nconst _flush = Symbol('_flush')\nconst _handleChunk = Symbol('_handleChunk')\nconst _makeBuf = Symbol('_makeBuf')\nconst _mode = Symbol('_mode')\nconst _needDrain = Symbol('_needDrain')\nconst _onerror = Symbol('_onerror')\nconst _onopen = Symbol('_onopen')\nconst _onread = Symbol('_onread')\nconst _onwrite = Symbol('_onwrite')\nconst _open = Symbol('_open')\nconst _path = Symbol('_path')\nconst _pos = Symbol('_pos')\nconst _queue = Symbol('_queue')\nconst _read = Symbol('_read')\nconst _readSize = Symbol('_readSize')\nconst _reading = Symbol('_reading')\nconst _remain = Symbol('_remain')\nconst _size = Symbol('_size')\nconst _write = Symbol('_write')\nconst _writing = Symbol('_writing')\nconst _defaultFlag = Symbol('_defaultFlag')\nconst _errored = Symbol('_errored')\n\nclass ReadStream extends MiniPass {\n  constructor (path, opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.readable = true\n    this.writable = false\n\n    if (typeof path !== 'string')\n      throw new TypeError('path must be a string')\n\n    this[_errored] = false\n    this[_fd] = typeof opt.fd === 'number' ? opt.fd : null\n    this[_path] = path\n    this[_readSize] = opt.readSize || 16*1024*1024\n    this[_reading] = false\n    this[_size] = typeof opt.size === 'number' ? opt.size : Infinity\n    this[_remain] = this[_size]\n    this[_autoClose] = typeof opt.autoClose === 'boolean' ?\n      opt.autoClose : true\n\n    if (typeof this[_fd] === 'number')\n      this[_read]()\n    else\n      this[_open]()\n  }\n\n  get fd () { return this[_fd] }\n  get path () { return this[_path] }\n\n  write () {\n    throw new TypeError('this is a readable stream')\n  }\n\n  end () {\n    throw new TypeError('this is a readable stream')\n  }\n\n  [_open] () {\n    fs.open(this[_path], 'r', (er, fd) => this[_onopen](er, fd))\n  }\n\n  [_onopen] (er, fd) {\n    if (er)\n      this[_onerror](er)\n    else {\n      this[_fd] = fd\n      this.emit('open', fd)\n      this[_read]()\n    }\n  }\n\n  [_makeBuf] () {\n    return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]))\n  }\n\n  [_read] () {\n    if (!this[_reading]) {\n      this[_reading] = true\n      const buf = this[_makeBuf]()\n      /* istanbul ignore if */\n      if (buf.length === 0)\n        return process.nextTick(() => this[_onread](null, 0, buf))\n      fs.read(this[_fd], buf, 0, buf.length, null, (er, br, buf) =>\n        this[_onread](er, br, buf))\n    }\n  }\n\n  [_onread] (er, br, buf) {\n    this[_reading] = false\n    if (er)\n      this[_onerror](er)\n    else if (this[_handleChunk](br, buf))\n      this[_read]()\n  }\n\n  [_close] () {\n    if (this[_autoClose] && typeof this[_fd] === 'number') {\n      const fd = this[_fd]\n      this[_fd] = null\n      fs.close(fd, er => er ? this.emit('error', er) : this.emit('close'))\n    }\n  }\n\n  [_onerror] (er) {\n    this[_reading] = true\n    this[_close]()\n    this.emit('error', er)\n  }\n\n  [_handleChunk] (br, buf) {\n    let ret = false\n    // no effect if infinite\n    this[_remain] -= br\n    if (br > 0)\n      ret = super.write(br < buf.length ? buf.slice(0, br) : buf)\n\n    if (br === 0 || this[_remain] <= 0) {\n      ret = false\n      this[_close]()\n      super.end()\n    }\n\n    return ret\n  }\n\n  emit (ev, data) {\n    switch (ev) {\n      case 'prefinish':\n      case 'finish':\n        break\n\n      case 'drain':\n        if (typeof this[_fd] === 'number')\n          this[_read]()\n        break\n\n      case 'error':\n        if (this[_errored])\n          return\n        this[_errored] = true\n        return super.emit(ev, data)\n\n      default:\n        return super.emit(ev, data)\n    }\n  }\n}\n\nclass ReadStreamSync extends ReadStream {\n  [_open] () {\n    let threw = true\n    try {\n      this[_onopen](null, fs.openSync(this[_path], 'r'))\n      threw = false\n    } finally {\n      if (threw)\n        this[_close]()\n    }\n  }\n\n  [_read] () {\n    let threw = true\n    try {\n      if (!this[_reading]) {\n        this[_reading] = true\n        do {\n          const buf = this[_makeBuf]()\n          /* istanbul ignore next */\n          const br = buf.length === 0 ? 0\n            : fs.readSync(this[_fd], buf, 0, buf.length, null)\n          if (!this[_handleChunk](br, buf))\n            break\n        } while (true)\n        this[_reading] = false\n      }\n      threw = false\n    } finally {\n      if (threw)\n        this[_close]()\n    }\n  }\n\n  [_close] () {\n    if (this[_autoClose] && typeof this[_fd] === 'number') {\n      const fd = this[_fd]\n      this[_fd] = null\n      fs.closeSync(fd)\n      this.emit('close')\n    }\n  }\n}\n\nclass WriteStream extends EE {\n  constructor (path, opt) {\n    opt = opt || {}\n    super(opt)\n    this.readable = false\n    this.writable = true\n    this[_errored] = false\n    this[_writing] = false\n    this[_ended] = false\n    this[_needDrain] = false\n    this[_queue] = []\n    this[_path] = path\n    this[_fd] = typeof opt.fd === 'number' ? opt.fd : null\n    this[_mode] = opt.mode === undefined ? 0o666 : opt.mode\n    this[_pos] = typeof opt.start === 'number' ? opt.start : null\n    this[_autoClose] = typeof opt.autoClose === 'boolean' ?\n      opt.autoClose : true\n\n    // truncating makes no sense when writing into the middle\n    const defaultFlag = this[_pos] !== null ? 'r+' : 'w'\n    this[_defaultFlag] = opt.flags === undefined\n    this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags\n\n    if (this[_fd] === null)\n      this[_open]()\n  }\n\n  emit (ev, data) {\n    if (ev === 'error') {\n      if (this[_errored])\n        return\n      this[_errored] = true\n    }\n    return super.emit(ev, data)\n  }\n\n\n  get fd () { return this[_fd] }\n  get path () { return this[_path] }\n\n  [_onerror] (er) {\n    this[_close]()\n    this[_writing] = true\n    this.emit('error', er)\n  }\n\n  [_open] () {\n    fs.open(this[_path], this[_flags], this[_mode],\n      (er, fd) => this[_onopen](er, fd))\n  }\n\n  [_onopen] (er, fd) {\n    if (this[_defaultFlag] &&\n        this[_flags] === 'r+' &&\n        er && er.code === 'ENOENT') {\n      this[_flags] = 'w'\n      this[_open]()\n    } else if (er)\n      this[_onerror](er)\n    else {\n      this[_fd] = fd\n      this.emit('open', fd)\n      this[_flush]()\n    }\n  }\n\n  end (buf, enc) {\n    if (buf)\n      this.write(buf, enc)\n\n    this[_ended] = true\n\n    // synthetic after-write logic, where drain/finish live\n    if (!this[_writing] && !this[_queue].length &&\n        typeof this[_fd] === 'number')\n      this[_onwrite](null, 0)\n    return this\n  }\n\n  write (buf, enc) {\n    if (typeof buf === 'string')\n      buf = Buffer.from(buf, enc)\n\n    if (this[_ended]) {\n      this.emit('error', new Error('write() after end()'))\n      return false\n    }\n\n    if (this[_fd] === null || this[_writing] || this[_queue].length) {\n      this[_queue].push(buf)\n      this[_needDrain] = true\n      return false\n    }\n\n    this[_writing] = true\n    this[_write](buf)\n    return true\n  }\n\n  [_write] (buf) {\n    fs.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) =>\n      this[_onwrite](er, bw))\n  }\n\n  [_onwrite] (er, bw) {\n    if (er)\n      this[_onerror](er)\n    else {\n      if (this[_pos] !== null)\n        this[_pos] += bw\n      if (this[_queue].length)\n        this[_flush]()\n      else {\n        this[_writing] = false\n\n        if (this[_ended] && !this[_finished]) {\n          this[_finished] = true\n          this[_close]()\n          this.emit('finish')\n        } else if (this[_needDrain]) {\n          this[_needDrain] = false\n          this.emit('drain')\n        }\n      }\n    }\n  }\n\n  [_flush] () {\n    if (this[_queue].length === 0) {\n      if (this[_ended])\n        this[_onwrite](null, 0)\n    } else if (this[_queue].length === 1)\n      this[_write](this[_queue].pop())\n    else {\n      const iovec = this[_queue]\n      this[_queue] = []\n      writev(this[_fd], iovec, this[_pos],\n        (er, bw) => this[_onwrite](er, bw))\n    }\n  }\n\n  [_close] () {\n    if (this[_autoClose] && typeof this[_fd] === 'number') {\n      const fd = this[_fd]\n      this[_fd] = null\n      fs.close(fd, er => er ? this.emit('error', er) : this.emit('close'))\n    }\n  }\n}\n\nclass WriteStreamSync extends WriteStream {\n  [_open] () {\n    let fd\n    // only wrap in a try{} block if we know we'll retry, to avoid\n    // the rethrow obscuring the error's source frame in most cases.\n    if (this[_defaultFlag] && this[_flags] === 'r+') {\n      try {\n        fd = fs.openSync(this[_path], this[_flags], this[_mode])\n      } catch (er) {\n        if (er.code === 'ENOENT') {\n          this[_flags] = 'w'\n          return this[_open]()\n        } else\n          throw er\n      }\n    } else\n      fd = fs.openSync(this[_path], this[_flags], this[_mode])\n\n    this[_onopen](null, fd)\n  }\n\n  [_close] () {\n    if (this[_autoClose] && typeof this[_fd] === 'number') {\n      const fd = this[_fd]\n      this[_fd] = null\n      fs.closeSync(fd)\n      this.emit('close')\n    }\n  }\n\n  [_write] (buf) {\n    // throw the original, but try to close if it fails\n    let threw = true\n    try {\n      this[_onwrite](null,\n        fs.writeSync(this[_fd], buf, 0, buf.length, this[_pos]))\n      threw = false\n    } finally {\n      if (threw)\n        try { this[_close]() } catch (_) {}\n    }\n  }\n}\n\nexports.ReadStream = ReadStream\nexports.ReadStreamSync = ReadStreamSync\n\nexports.WriteStream = WriteStream\nexports.WriteStreamSync = WriteStreamSync\n",
  "'use strict'\n\n// this[BUFFER] is the remainder of a chunk if we're waiting for\n// the full 512 bytes of a header to come in.  We will Buffer.concat()\n// it to the next write(), which is a mem copy, but a small one.\n//\n// this[QUEUE] is a Yallist of entries that haven't been emitted\n// yet this can only get filled up if the user keeps write()ing after\n// a write() returns false, or does a write() with more than one entry\n//\n// We don't buffer chunks, we always parse them and either create an\n// entry, or push it into the active entry.  The ReadEntry class knows\n// to throw data away if .ignore=true\n//\n// Shift entry off the buffer when it emits 'end', and emit 'entry' for\n// the next one in the list.\n//\n// At any time, we're pushing body chunks into the entry at WRITEENTRY,\n// and waiting for 'end' on the entry at READENTRY\n//\n// ignored entries get .resume() called on them straight away\n\nconst warner = require('./warn-mixin.js')\nconst Header = require('./header.js')\nconst EE = require('events')\nconst Yallist = require('yallist')\nconst maxMetaEntrySize = 1024 * 1024\nconst Entry = require('./read-entry.js')\nconst Pax = require('./pax.js')\nconst zlib = require('minizlib')\nconst { nextTick } = require('process')\n\nconst gzipHeader = Buffer.from([0x1f, 0x8b])\nconst STATE = Symbol('state')\nconst WRITEENTRY = Symbol('writeEntry')\nconst READENTRY = Symbol('readEntry')\nconst NEXTENTRY = Symbol('nextEntry')\nconst PROCESSENTRY = Symbol('processEntry')\nconst EX = Symbol('extendedHeader')\nconst GEX = Symbol('globalExtendedHeader')\nconst META = Symbol('meta')\nconst EMITMETA = Symbol('emitMeta')\nconst BUFFER = Symbol('buffer')\nconst QUEUE = Symbol('queue')\nconst ENDED = Symbol('ended')\nconst EMITTEDEND = Symbol('emittedEnd')\nconst EMIT = Symbol('emit')\nconst UNZIP = Symbol('unzip')\nconst CONSUMECHUNK = Symbol('consumeChunk')\nconst CONSUMECHUNKSUB = Symbol('consumeChunkSub')\nconst CONSUMEBODY = Symbol('consumeBody')\nconst CONSUMEMETA = Symbol('consumeMeta')\nconst CONSUMEHEADER = Symbol('consumeHeader')\nconst CONSUMING = Symbol('consuming')\nconst BUFFERCONCAT = Symbol('bufferConcat')\nconst MAYBEEND = Symbol('maybeEnd')\nconst WRITING = Symbol('writing')\nconst ABORTED = Symbol('aborted')\nconst DONE = Symbol('onDone')\nconst SAW_VALID_ENTRY = Symbol('sawValidEntry')\nconst SAW_NULL_BLOCK = Symbol('sawNullBlock')\nconst SAW_EOF = Symbol('sawEOF')\nconst CLOSESTREAM = Symbol('closeStream')\n\nconst noop = _ => true\n\nmodule.exports = warner(class Parser extends EE {\n  constructor (opt) {\n    opt = opt || {}\n    super(opt)\n\n    this.file = opt.file || ''\n\n    // set to boolean false when an entry starts.  1024 bytes of \\0\n    // is technically a valid tarball, albeit a boring one.\n    this[SAW_VALID_ENTRY] = null\n\n    // these BADARCHIVE errors can't be detected early. listen on DONE.\n    this.on(DONE, _ => {\n      if (this[STATE] === 'begin' || this[SAW_VALID_ENTRY] === false) {\n        // either less than 1 block of data, or all entries were invalid.\n        // Either way, probably not even a tarball.\n        this.warn('TAR_BAD_ARCHIVE', 'Unrecognized archive format')\n      }\n    })\n\n    if (opt.ondone) {\n      this.on(DONE, opt.ondone)\n    } else {\n      this.on(DONE, _ => {\n        this.emit('prefinish')\n        this.emit('finish')\n        this.emit('end')\n      })\n    }\n\n    this.strict = !!opt.strict\n    this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize\n    this.filter = typeof opt.filter === 'function' ? opt.filter : noop\n    // Unlike gzip, brotli doesn't have any magic bytes to identify it\n    // Users need to explicitly tell us they're extracting a brotli file\n    // Or we infer from the file extension\n    const isTBR = (opt.file && (\n        opt.file.endsWith('.tar.br') || opt.file.endsWith('.tbr')))\n    // if it's a tbr file it MIGHT be brotli, but we don't know until\n    // we look at it and verify it's not a valid tar file.\n    this.brotli = !opt.gzip && opt.brotli !== undefined ? opt.brotli\n      : isTBR ? undefined\n      : false\n\n    // have to set this so that streams are ok piping into it\n    this.writable = true\n    this.readable = false\n\n    this[QUEUE] = new Yallist()\n    this[BUFFER] = null\n    this[READENTRY] = null\n    this[WRITEENTRY] = null\n    this[STATE] = 'begin'\n    this[META] = ''\n    this[EX] = null\n    this[GEX] = null\n    this[ENDED] = false\n    this[UNZIP] = null\n    this[ABORTED] = false\n    this[SAW_NULL_BLOCK] = false\n    this[SAW_EOF] = false\n\n    this.on('end', () => this[CLOSESTREAM]())\n\n    if (typeof opt.onwarn === 'function') {\n      this.on('warn', opt.onwarn)\n    }\n    if (typeof opt.onentry === 'function') {\n      this.on('entry', opt.onentry)\n    }\n  }\n\n  [CONSUMEHEADER] (chunk, position) {\n    if (this[SAW_VALID_ENTRY] === null) {\n      this[SAW_VALID_ENTRY] = false\n    }\n    let header\n    try {\n      header = new Header(chunk, position, this[EX], this[GEX])\n    } catch (er) {\n      return this.warn('TAR_ENTRY_INVALID', er)\n    }\n\n    if (header.nullBlock) {\n      if (this[SAW_NULL_BLOCK]) {\n        this[SAW_EOF] = true\n        // ending an archive with no entries.  pointless, but legal.\n        if (this[STATE] === 'begin') {\n          this[STATE] = 'header'\n        }\n        this[EMIT]('eof')\n      } else {\n        this[SAW_NULL_BLOCK] = true\n        this[EMIT]('nullBlock')\n      }\n    } else {\n      this[SAW_NULL_BLOCK] = false\n      if (!header.cksumValid) {\n        this.warn('TAR_ENTRY_INVALID', 'checksum failure', { header })\n      } else if (!header.path) {\n        this.warn('TAR_ENTRY_INVALID', 'path is required', { header })\n      } else {\n        const type = header.type\n        if (/^(Symbolic)?Link$/.test(type) && !header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath required', { header })\n        } else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath) {\n          this.warn('TAR_ENTRY_INVALID', 'linkpath forbidden', { header })\n        } else {\n          const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX])\n\n          // we do this for meta & ignored entries as well, because they\n          // are still valid tar, or else we wouldn't know to ignore them\n          if (!this[SAW_VALID_ENTRY]) {\n            if (entry.remain) {\n              // this might be the one!\n              const onend = () => {\n                if (!entry.invalid) {\n                  this[SAW_VALID_ENTRY] = true\n                }\n              }\n              entry.on('end', onend)\n            } else {\n              this[SAW_VALID_ENTRY] = true\n            }\n          }\n\n          if (entry.meta) {\n            if (entry.size > this.maxMetaEntrySize) {\n              entry.ignore = true\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = 'ignore'\n              entry.resume()\n            } else if (entry.size > 0) {\n              this[META] = ''\n              entry.on('data', c => this[META] += c)\n              this[STATE] = 'meta'\n            }\n          } else {\n            this[EX] = null\n            entry.ignore = entry.ignore || !this.filter(entry.path, entry)\n\n            if (entry.ignore) {\n              // probably valid, just not something we care about\n              this[EMIT]('ignoredEntry', entry)\n              this[STATE] = entry.remain ? 'ignore' : 'header'\n              entry.resume()\n            } else {\n              if (entry.remain) {\n                this[STATE] = 'body'\n              } else {\n                this[STATE] = 'header'\n                entry.end()\n              }\n\n              if (!this[READENTRY]) {\n                this[QUEUE].push(entry)\n                this[NEXTENTRY]()\n              } else {\n                this[QUEUE].push(entry)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  [CLOSESTREAM] () {\n    nextTick(() => this.emit('close'))\n  }\n\n  [PROCESSENTRY] (entry) {\n    let go = true\n\n    if (!entry) {\n      this[READENTRY] = null\n      go = false\n    } else if (Array.isArray(entry)) {\n      this.emit.apply(this, entry)\n    } else {\n      this[READENTRY] = entry\n      this.emit('entry', entry)\n      if (!entry.emittedEnd) {\n        entry.on('end', _ => this[NEXTENTRY]())\n        go = false\n      }\n    }\n\n    return go\n  }\n\n  [NEXTENTRY] () {\n    do {} while (this[PROCESSENTRY](this[QUEUE].shift()))\n\n    if (!this[QUEUE].length) {\n      // At this point, there's nothing in the queue, but we may have an\n      // entry which is being consumed (readEntry).\n      // If we don't, then we definitely can handle more data.\n      // If we do, and either it's flowing, or it has never had any data\n      // written to it, then it needs more.\n      // The only other possibility is that it has returned false from a\n      // write() call, so we wait for the next drain to continue.\n      const re = this[READENTRY]\n      const drainNow = !re || re.flowing || re.size === re.remain\n      if (drainNow) {\n        if (!this[WRITING]) {\n          this.emit('drain')\n        }\n      } else {\n        re.once('drain', _ => this.emit('drain'))\n      }\n    }\n  }\n\n  [CONSUMEBODY] (chunk, position) {\n    // write up to but no  more than writeEntry.blockRemain\n    const entry = this[WRITEENTRY]\n    const br = entry.blockRemain\n    const c = (br >= chunk.length && position === 0) ? chunk\n      : chunk.slice(position, position + br)\n\n    entry.write(c)\n\n    if (!entry.blockRemain) {\n      this[STATE] = 'header'\n      this[WRITEENTRY] = null\n      entry.end()\n    }\n\n    return c.length\n  }\n\n  [CONSUMEMETA] (chunk, position) {\n    const entry = this[WRITEENTRY]\n    const ret = this[CONSUMEBODY](chunk, position)\n\n    // if we finished, then the entry is reset\n    if (!this[WRITEENTRY]) {\n      this[EMITMETA](entry)\n    }\n\n    return ret\n  }\n\n  [EMIT] (ev, data, extra) {\n    if (!this[QUEUE].length && !this[READENTRY]) {\n      this.emit(ev, data, extra)\n    } else {\n      this[QUEUE].push([ev, data, extra])\n    }\n  }\n\n  [EMITMETA] (entry) {\n    this[EMIT]('meta', this[META])\n    switch (entry.type) {\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this[EX] = Pax.parse(this[META], this[EX], false)\n        break\n\n      case 'GlobalExtendedHeader':\n        this[GEX] = Pax.parse(this[META], this[GEX], true)\n        break\n\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].path = this[META].replace(/\\0.*/, '')\n        break\n\n      case 'NextFileHasLongLinkpath':\n        this[EX] = this[EX] || Object.create(null)\n        this[EX].linkpath = this[META].replace(/\\0.*/, '')\n        break\n\n      /* istanbul ignore next */\n      default: throw new Error('unknown meta: ' + entry.type)\n    }\n  }\n\n  abort (error) {\n    this[ABORTED] = true\n    this.emit('abort', error)\n    // always throws, even in non-strict mode\n    this.warn('TAR_ABORT', error, { recoverable: false })\n  }\n\n  write (chunk) {\n    if (this[ABORTED]) {\n      return\n    }\n\n    // first write, might be gzipped\n    const needSniff = this[UNZIP] === null ||\n      this.brotli === undefined && this[UNZIP] === false\n    if (needSniff && chunk) {\n      if (this[BUFFER]) {\n        chunk = Buffer.concat([this[BUFFER], chunk])\n        this[BUFFER] = null\n      }\n      if (chunk.length < gzipHeader.length) {\n        this[BUFFER] = chunk\n        return true\n      }\n\n      // look for gzip header\n      for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {\n        if (chunk[i] !== gzipHeader[i]) {\n          this[UNZIP] = false\n        }\n      }\n\n      const maybeBrotli = this.brotli === undefined\n      if (this[UNZIP] === false && maybeBrotli) {\n        // read the first header to see if it's a valid tar file. If so,\n        // we can safely assume that it's not actually brotli, despite the\n        // .tbr or .tar.br file extension.\n        // if we ended before getting a full chunk, yes, def brotli\n        if (chunk.length < 512) {\n          if (this[ENDED]) {\n            this.brotli = true\n          } else {\n            this[BUFFER] = chunk\n            return true\n          }\n        } else {\n          // if it's tar, it's pretty reliably not brotli, chances of\n          // that happening are astronomical.\n          try {\n            new Header(chunk.slice(0, 512))\n            this.brotli = false\n          } catch (_) {\n            this.brotli = true\n          }\n        }\n      }\n\n      if (this[UNZIP] === null || (this[UNZIP] === false && this.brotli)) {\n        const ended = this[ENDED]\n        this[ENDED] = false\n        this[UNZIP] = this[UNZIP] === null\n          ? new zlib.Unzip()\n          : new zlib.BrotliDecompress()\n        this[UNZIP].on('data', chunk => this[CONSUMECHUNK](chunk))\n        this[UNZIP].on('error', er => this.abort(er))\n        this[UNZIP].on('end', _ => {\n          this[ENDED] = true\n          this[CONSUMECHUNK]()\n        })\n        this[WRITING] = true\n        const ret = this[UNZIP][ended ? 'end' : 'write'](chunk)\n        this[WRITING] = false\n        return ret\n      }\n    }\n\n    this[WRITING] = true\n    if (this[UNZIP]) {\n      this[UNZIP].write(chunk)\n    } else {\n      this[CONSUMECHUNK](chunk)\n    }\n    this[WRITING] = false\n\n    // return false if there's a queue, or if the current entry isn't flowing\n    const ret =\n      this[QUEUE].length ? false :\n      this[READENTRY] ? this[READENTRY].flowing :\n      true\n\n    // if we have no queue, then that means a clogged READENTRY\n    if (!ret && !this[QUEUE].length) {\n      this[READENTRY].once('drain', _ => this.emit('drain'))\n    }\n\n    return ret\n  }\n\n  [BUFFERCONCAT] (c) {\n    if (c && !this[ABORTED]) {\n      this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c\n    }\n  }\n\n  [MAYBEEND] () {\n    if (this[ENDED] &&\n        !this[EMITTEDEND] &&\n        !this[ABORTED] &&\n        !this[CONSUMING]) {\n      this[EMITTEDEND] = true\n      const entry = this[WRITEENTRY]\n      if (entry && entry.blockRemain) {\n        // truncated, likely a damaged file\n        const have = this[BUFFER] ? this[BUFFER].length : 0\n        this.warn('TAR_BAD_ARCHIVE', `Truncated input (needed ${\n          entry.blockRemain} more bytes, only ${have} available)`, { entry })\n        if (this[BUFFER]) {\n          entry.write(this[BUFFER])\n        }\n        entry.end()\n      }\n      this[EMIT](DONE)\n    }\n  }\n\n  [CONSUMECHUNK] (chunk) {\n    if (this[CONSUMING]) {\n      this[BUFFERCONCAT](chunk)\n    } else if (!chunk && !this[BUFFER]) {\n      this[MAYBEEND]()\n    } else {\n      this[CONSUMING] = true\n      if (this[BUFFER]) {\n        this[BUFFERCONCAT](chunk)\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      } else {\n        this[CONSUMECHUNKSUB](chunk)\n      }\n\n      while (this[BUFFER] &&\n          this[BUFFER].length >= 512 &&\n          !this[ABORTED] &&\n          !this[SAW_EOF]) {\n        const c = this[BUFFER]\n        this[BUFFER] = null\n        this[CONSUMECHUNKSUB](c)\n      }\n      this[CONSUMING] = false\n    }\n\n    if (!this[BUFFER] || this[ENDED]) {\n      this[MAYBEEND]()\n    }\n  }\n\n  [CONSUMECHUNKSUB] (chunk) {\n    // we know that we are in CONSUMING mode, so anything written goes into\n    // the buffer.  Advance the position and put any remainder in the buffer.\n    let position = 0\n    const length = chunk.length\n    while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {\n      switch (this[STATE]) {\n        case 'begin':\n        case 'header':\n          this[CONSUMEHEADER](chunk, position)\n          position += 512\n          break\n\n        case 'ignore':\n        case 'body':\n          position += this[CONSUMEBODY](chunk, position)\n          break\n\n        case 'meta':\n          position += this[CONSUMEMETA](chunk, position)\n          break\n\n        /* istanbul ignore next */\n        default:\n          throw new Error('invalid state: ' + this[STATE])\n      }\n    }\n\n    if (position < length) {\n      if (this[BUFFER]) {\n        this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]])\n      } else {\n        this[BUFFER] = chunk.slice(position)\n      }\n    }\n  }\n\n  end (chunk) {\n    if (!this[ABORTED]) {\n      if (this[UNZIP]) {\n        this[UNZIP].end(chunk)\n      } else {\n        this[ENDED] = true\n        if (this.brotli === undefined) chunk = chunk || Buffer.alloc(0)\n        this.write(chunk)\n      }\n    }\n  }\n})\n",
  "'use strict'\n\n// XXX: This shares a lot in common with extract.js\n// maybe some DRY opportunity here?\n\n// tar -t\nconst hlo = require('./high-level-opt.js')\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nmodule.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') {\n    cb = opt_, files = null, opt_ = {}\n  } else if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {}\n  }\n\n  if (typeof files === 'function') {\n    cb = files, files = null\n  }\n\n  if (!files) {\n    files = []\n  } else {\n    files = Array.from(files)\n  }\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions')\n  }\n\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option')\n  }\n\n  if (files.length) {\n    filesFilter(opt, files)\n  }\n\n  if (!opt.noResume) {\n    onentryFunction(opt)\n  }\n\n  return opt.file && opt.sync ? listFileSync(opt)\n    : opt.file ? listFile(opt, cb)\n    : list(opt)\n}\n\nconst onentryFunction = opt => {\n  const onentry = opt.onentry\n  opt.onentry = onentry ? e => {\n    onentry(e)\n    e.resume()\n  } : e => e.resume()\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))\n    : file => mapHas(stripSlash(file))\n}\n\nconst listFileSync = opt => {\n  const p = list(opt)\n  const file = opt.file\n  let threw = true\n  let fd\n  try {\n    const stat = fs.statSync(file)\n    const readSize = opt.maxReadSize || 16 * 1024 * 1024\n    if (stat.size < readSize) {\n      p.end(fs.readFileSync(file))\n    } else {\n      let pos = 0\n      const buf = Buffer.allocUnsafe(readSize)\n      fd = fs.openSync(file, 'r')\n      while (pos < stat.size) {\n        const bytesRead = fs.readSync(fd, buf, 0, readSize, pos)\n        pos += bytesRead\n        p.write(buf.slice(0, bytesRead))\n      }\n      p.end()\n    }\n    threw = false\n  } finally {\n    if (threw && fd) {\n      try {\n        fs.closeSync(fd)\n      } catch (er) {}\n    }\n  }\n}\n\nconst listFile = (opt, cb) => {\n  const parse = new Parser(opt)\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    parse.on('error', reject)\n    parse.on('end', resolve)\n\n    fs.stat(file, (er, stat) => {\n      if (er) {\n        reject(er)\n      } else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size,\n        })\n        stream.on('error', reject)\n        stream.pipe(parse)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst list = opt => new Parser(opt)\n",
  "'use strict'\n\n// tar -c\nconst hlo = require('./high-level-opt.js')\n\nconst Pack = require('./pack.js')\nconst fsm = require('fs-minipass')\nconst t = require('./list.js')\nconst path = require('path')\n\nmodule.exports = (opt_, files, cb) => {\n  if (typeof files === 'function') {\n    cb = files\n  }\n\n  if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {}\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions')\n  }\n\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option')\n  }\n\n  return opt.file && opt.sync ? createFileSync(opt, files)\n    : opt.file ? createFile(opt, files, cb)\n    : opt.sync ? createSync(opt, files)\n    : create(opt, files)\n}\n\nconst createFileSync = (opt, files) => {\n  const p = new Pack.Sync(opt)\n  const stream = new fsm.WriteStreamSync(opt.file, {\n    mode: opt.mode || 0o666,\n  })\n  p.pipe(stream)\n  addFilesSync(p, files)\n}\n\nconst createFile = (opt, files, cb) => {\n  const p = new Pack(opt)\n  const stream = new fsm.WriteStream(opt.file, {\n    mode: opt.mode || 0o666,\n  })\n  p.pipe(stream)\n\n  const promise = new Promise((res, rej) => {\n    stream.on('error', rej)\n    stream.on('close', res)\n    p.on('error', rej)\n  })\n\n  addFilesAsync(p, files)\n\n  return cb ? promise.then(cb, cb) : promise\n}\n\nconst addFilesSync = (p, files) => {\n  files.forEach(file => {\n    if (file.charAt(0) === '@') {\n      t({\n        file: path.resolve(p.cwd, file.slice(1)),\n        sync: true,\n        noResume: true,\n        onentry: entry => p.add(entry),\n      })\n    } else {\n      p.add(file)\n    }\n  })\n  p.end()\n}\n\nconst addFilesAsync = (p, files) => {\n  while (files.length) {\n    const file = files.shift()\n    if (file.charAt(0) === '@') {\n      return t({\n        file: path.resolve(p.cwd, file.slice(1)),\n        noResume: true,\n        onentry: entry => p.add(entry),\n      }).then(_ => addFilesAsync(p, files))\n    } else {\n      p.add(file)\n    }\n  }\n  p.end()\n}\n\nconst createSync = (opt, files) => {\n  const p = new Pack.Sync(opt)\n  addFilesSync(p, files)\n  return p\n}\n\nconst create = (opt, files) => {\n  const p = new Pack(opt)\n  addFilesAsync(p, files)\n  return p\n}\n",
  "'use strict'\n\n// tar -r\nconst hlo = require('./high-level-opt.js')\nconst Pack = require('./pack.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst t = require('./list.js')\nconst path = require('path')\n\n// starting at the head of the file, read a Header\n// If the checksum is invalid, that's our position to start writing\n// If it is, jump forward by the specified size (round up to 512)\n// and try again.\n// Write the new Pack stream starting there.\n\nconst Header = require('./header.js')\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file) {\n    throw new TypeError('file is required')\n  }\n\n  if (opt.gzip || opt.brotli || opt.file.endsWith('.br') || opt.file.endsWith('.tbr')) {\n    throw new TypeError('cannot append to compressed archives')\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  return opt.sync ? replaceSync(opt, files)\n    : replace(opt, files, cb)\n}\n\nconst replaceSync = (opt, files) => {\n  const p = new Pack.Sync(opt)\n\n  let threw = true\n  let fd\n  let position\n\n  try {\n    try {\n      fd = fs.openSync(opt.file, 'r+')\n    } catch (er) {\n      if (er.code === 'ENOENT') {\n        fd = fs.openSync(opt.file, 'w+')\n      } else {\n        throw er\n      }\n    }\n\n    const st = fs.fstatSync(fd)\n    const headBuf = Buffer.alloc(512)\n\n    POSITION: for (position = 0; position < st.size; position += 512) {\n      for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {\n        bytes = fs.readSync(\n          fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos\n        )\n\n        if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b) {\n          throw new Error('cannot append to compressed archives')\n        }\n\n        if (!bytes) {\n          break POSITION\n        }\n      }\n\n      const h = new Header(headBuf)\n      if (!h.cksumValid) {\n        break\n      }\n      const entryBlockSize = 512 * Math.ceil(h.size / 512)\n      if (position + entryBlockSize + 512 > st.size) {\n        break\n      }\n      // the 512 for the header we just parsed will be added as well\n      // also jump ahead all the blocks for the body\n      position += entryBlockSize\n      if (opt.mtimeCache) {\n        opt.mtimeCache.set(h.path, h.mtime)\n      }\n    }\n    threw = false\n\n    streamSync(opt, p, position, fd, files)\n  } finally {\n    if (threw) {\n      try {\n        fs.closeSync(fd)\n      } catch (er) {}\n    }\n  }\n}\n\nconst streamSync = (opt, p, position, fd, files) => {\n  const stream = new fsm.WriteStreamSync(opt.file, {\n    fd: fd,\n    start: position,\n  })\n  p.pipe(stream)\n  addFilesSync(p, files)\n}\n\nconst replace = (opt, files, cb) => {\n  files = Array.from(files)\n  const p = new Pack(opt)\n\n  const getPos = (fd, size, cb_) => {\n    const cb = (er, pos) => {\n      if (er) {\n        fs.close(fd, _ => cb_(er))\n      } else {\n        cb_(null, pos)\n      }\n    }\n\n    let position = 0\n    if (size === 0) {\n      return cb(null, 0)\n    }\n\n    let bufPos = 0\n    const headBuf = Buffer.alloc(512)\n    const onread = (er, bytes) => {\n      if (er) {\n        return cb(er)\n      }\n      bufPos += bytes\n      if (bufPos < 512 && bytes) {\n        return fs.read(\n          fd, headBuf, bufPos, headBuf.length - bufPos,\n          position + bufPos, onread\n        )\n      }\n\n      if (position === 0 && headBuf[0] === 0x1f && headBuf[1] === 0x8b) {\n        return cb(new Error('cannot append to compressed archives'))\n      }\n\n      // truncated header\n      if (bufPos < 512) {\n        return cb(null, position)\n      }\n\n      const h = new Header(headBuf)\n      if (!h.cksumValid) {\n        return cb(null, position)\n      }\n\n      const entryBlockSize = 512 * Math.ceil(h.size / 512)\n      if (position + entryBlockSize + 512 > size) {\n        return cb(null, position)\n      }\n\n      position += entryBlockSize + 512\n      if (position >= size) {\n        return cb(null, position)\n      }\n\n      if (opt.mtimeCache) {\n        opt.mtimeCache.set(h.path, h.mtime)\n      }\n      bufPos = 0\n      fs.read(fd, headBuf, 0, 512, position, onread)\n    }\n    fs.read(fd, headBuf, 0, 512, position, onread)\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    p.on('error', reject)\n    let flag = 'r+'\n    const onopen = (er, fd) => {\n      if (er && er.code === 'ENOENT' && flag === 'r+') {\n        flag = 'w+'\n        return fs.open(opt.file, flag, onopen)\n      }\n\n      if (er) {\n        return reject(er)\n      }\n\n      fs.fstat(fd, (er, st) => {\n        if (er) {\n          return fs.close(fd, () => reject(er))\n        }\n\n        getPos(fd, st.size, (er, position) => {\n          if (er) {\n            return reject(er)\n          }\n          const stream = new fsm.WriteStream(opt.file, {\n            fd: fd,\n            start: position,\n          })\n          p.pipe(stream)\n          stream.on('error', reject)\n          stream.on('close', resolve)\n          addFilesAsync(p, files)\n        })\n      })\n    }\n    fs.open(opt.file, flag, onopen)\n  })\n\n  return cb ? promise.then(cb, cb) : promise\n}\n\nconst addFilesSync = (p, files) => {\n  files.forEach(file => {\n    if (file.charAt(0) === '@') {\n      t({\n        file: path.resolve(p.cwd, file.slice(1)),\n        sync: true,\n        noResume: true,\n        onentry: entry => p.add(entry),\n      })\n    } else {\n      p.add(file)\n    }\n  })\n  p.end()\n}\n\nconst addFilesAsync = (p, files) => {\n  while (files.length) {\n    const file = files.shift()\n    if (file.charAt(0) === '@') {\n      return t({\n        file: path.resolve(p.cwd, file.slice(1)),\n        noResume: true,\n        onentry: entry => p.add(entry),\n      }).then(_ => addFilesAsync(p, files))\n    } else {\n      p.add(file)\n    }\n  }\n  p.end()\n}\n",
  "'use strict'\n\n// tar -u\n\nconst hlo = require('./high-level-opt.js')\nconst r = require('./replace.js')\n// just call tar.r with the filter and mtimeCache\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file) {\n    throw new TypeError('file is required')\n  }\n\n  if (opt.gzip || opt.brotli || opt.file.endsWith('.br') || opt.file.endsWith('.tbr')) {\n    throw new TypeError('cannot append to compressed archives')\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  mtimeFilter(opt)\n  return r(opt, files, cb)\n}\n\nconst mtimeFilter = opt => {\n  const filter = opt.filter\n\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map()\n  }\n\n  opt.filter = filter ? (path, stat) =>\n    filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime)\n    : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime)\n}\n",
  "const { promisify } = require('util')\nconst fs = require('fs')\nconst optsArg = opts => {\n  if (!opts)\n    opts = { mode: 0o777, fs }\n  else if (typeof opts === 'object')\n    opts = { mode: 0o777, fs, ...opts }\n  else if (typeof opts === 'number')\n    opts = { mode: opts, fs }\n  else if (typeof opts === 'string')\n    opts = { mode: parseInt(opts, 8), fs }\n  else\n    throw new TypeError('invalid options argument')\n\n  opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir\n  opts.mkdirAsync = promisify(opts.mkdir)\n  opts.stat = opts.stat || opts.fs.stat || fs.stat\n  opts.statAsync = promisify(opts.stat)\n  opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync\n  opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync\n  return opts\n}\nmodule.exports = optsArg\n",
  "const platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform\nconst { resolve, parse } = require('path')\nconst pathArg = path => {\n  if (/\\0/.test(path)) {\n    // simulate same failure that node raises\n    throw Object.assign(\n      new TypeError('path must be a string without null bytes'),\n      {\n        path,\n        code: 'ERR_INVALID_ARG_VALUE',\n      }\n    )\n  }\n\n  path = resolve(path)\n  if (platform === 'win32') {\n    const badWinChars = /[*|\"<>?:]/\n    const {root} = parse(path)\n    if (badWinChars.test(path.substr(root.length))) {\n      throw Object.assign(new Error('Illegal characters in path.'), {\n        path,\n        code: 'EINVAL',\n      })\n    }\n  }\n\n  return path\n}\nmodule.exports = pathArg\n",
  "const {dirname} = require('path')\n\nconst findMade = (opts, parent, path = undefined) => {\n  // we never want the 'made' return value to be a root directory\n  if (path === parent)\n    return Promise.resolve()\n\n  return opts.statAsync(parent).then(\n    st => st.isDirectory() ? path : undefined, // will fail later\n    er => er.code === 'ENOENT'\n      ? findMade(opts, dirname(parent), parent)\n      : undefined\n  )\n}\n\nconst findMadeSync = (opts, parent, path = undefined) => {\n  if (path === parent)\n    return undefined\n\n  try {\n    return opts.statSync(parent).isDirectory() ? path : undefined\n  } catch (er) {\n    return er.code === 'ENOENT'\n      ? findMadeSync(opts, dirname(parent), parent)\n      : undefined\n  }\n}\n\nmodule.exports = {findMade, findMadeSync}\n",
  "const {dirname} = require('path')\n\nconst mkdirpManual = (path, opts, made) => {\n  opts.recursive = false\n  const parent = dirname(path)\n  if (parent === path) {\n    return opts.mkdirAsync(path, opts).catch(er => {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n    })\n  }\n\n  return opts.mkdirAsync(path, opts).then(() => made || path, er => {\n    if (er.code === 'ENOENT')\n      return mkdirpManual(parent, opts)\n        .then(made => mkdirpManual(path, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    return opts.statAsync(path).then(st => {\n      if (st.isDirectory())\n        return made\n      else\n        throw er\n    }, () => { throw er })\n  })\n}\n\nconst mkdirpManualSync = (path, opts, made) => {\n  const parent = dirname(path)\n  opts.recursive = false\n\n  if (parent === path) {\n    try {\n      return opts.mkdirSync(path, opts)\n    } catch (er) {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n      else\n        return\n    }\n  }\n\n  try {\n    opts.mkdirSync(path, opts)\n    return made || path\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts, mkdirpManualSync(parent, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    try {\n      if (!opts.statSync(path).isDirectory())\n        throw er\n    } catch (_) {\n      throw er\n    }\n  }\n}\n\nmodule.exports = {mkdirpManual, mkdirpManualSync}\n",
  "const {dirname} = require('path')\nconst {findMade, findMadeSync} = require('./find-made.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./mkdirp-manual.js')\n\nconst mkdirpNative = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirAsync(path, opts)\n\n  return findMade(opts, path).then(made =>\n    opts.mkdirAsync(path, opts).then(() => made)\n    .catch(er => {\n      if (er.code === 'ENOENT')\n        return mkdirpManual(path, opts)\n      else\n        throw er\n    }))\n}\n\nconst mkdirpNativeSync = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirSync(path, opts)\n\n  const made = findMadeSync(opts, path)\n  try {\n    opts.mkdirSync(path, opts)\n    return made\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts)\n    else\n      throw er\n  }\n}\n\nmodule.exports = {mkdirpNative, mkdirpNativeSync}\n",
  "const fs = require('fs')\n\nconst version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version\nconst versArr = version.replace(/^v/, '').split('.')\nconst hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12\n\nconst useNative = !hasNative ? () => false : opts => opts.mkdir === fs.mkdir\nconst useNativeSync = !hasNative ? () => false : opts => opts.mkdirSync === fs.mkdirSync\n\nmodule.exports = {useNative, useNativeSync}\n",
  "const optsArg = require('./lib/opts-arg.js')\nconst pathArg = require('./lib/path-arg.js')\n\nconst {mkdirpNative, mkdirpNativeSync} = require('./lib/mkdirp-native.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./lib/mkdirp-manual.js')\nconst {useNative, useNativeSync} = require('./lib/use-native.js')\n\n\nconst mkdirp = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNative(opts)\n    ? mkdirpNative(path, opts)\n    : mkdirpManual(path, opts)\n}\n\nconst mkdirpSync = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNativeSync(opts)\n    ? mkdirpNativeSync(path, opts)\n    : mkdirpManualSync(path, opts)\n}\n\nmkdirp.sync = mkdirpSync\nmkdirp.native = (path, opts) => mkdirpNative(pathArg(path), optsArg(opts))\nmkdirp.manual = (path, opts) => mkdirpManual(pathArg(path), optsArg(opts))\nmkdirp.nativeSync = (path, opts) => mkdirpNativeSync(pathArg(path), optsArg(opts))\nmkdirp.manualSync = (path, opts) => mkdirpManualSync(pathArg(path), optsArg(opts))\n\nmodule.exports = mkdirp\n",
  "'use strict'\nconst fs = require('fs')\nconst path = require('path')\n\n/* istanbul ignore next */\nconst LCHOWN = fs.lchown ? 'lchown' : 'chown'\n/* istanbul ignore next */\nconst LCHOWNSYNC = fs.lchownSync ? 'lchownSync' : 'chownSync'\n\n/* istanbul ignore next */\nconst needEISDIRHandled = fs.lchown &&\n  !process.version.match(/v1[1-9]+\\./) &&\n  !process.version.match(/v10\\.[6-9]/)\n\nconst lchownSync = (path, uid, gid) => {\n  try {\n    return fs[LCHOWNSYNC](path, uid, gid)\n  } catch (er) {\n    if (er.code !== 'ENOENT')\n      throw er\n  }\n}\n\n/* istanbul ignore next */\nconst chownSync = (path, uid, gid) => {\n  try {\n    return fs.chownSync(path, uid, gid)\n  } catch (er) {\n    if (er.code !== 'ENOENT')\n      throw er\n  }\n}\n\n/* istanbul ignore next */\nconst handleEISDIR =\n  needEISDIRHandled ? (path, uid, gid, cb) => er => {\n    // Node prior to v10 had a very questionable implementation of\n    // fs.lchown, which would always try to call fs.open on a directory\n    // Fall back to fs.chown in those cases.\n    if (!er || er.code !== 'EISDIR')\n      cb(er)\n    else\n      fs.chown(path, uid, gid, cb)\n  }\n  : (_, __, ___, cb) => cb\n\n/* istanbul ignore next */\nconst handleEISDirSync =\n  needEISDIRHandled ? (path, uid, gid) => {\n    try {\n      return lchownSync(path, uid, gid)\n    } catch (er) {\n      if (er.code !== 'EISDIR')\n        throw er\n      chownSync(path, uid, gid)\n    }\n  }\n  : (path, uid, gid) => lchownSync(path, uid, gid)\n\n// fs.readdir could only accept an options object as of node v6\nconst nodeVersion = process.version\nlet readdir = (path, options, cb) => fs.readdir(path, options, cb)\nlet readdirSync = (path, options) => fs.readdirSync(path, options)\n/* istanbul ignore next */\nif (/^v4\\./.test(nodeVersion))\n  readdir = (path, options, cb) => fs.readdir(path, cb)\n\nconst chown = (cpath, uid, gid, cb) => {\n  fs[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, er => {\n    // Skip ENOENT error\n    cb(er && er.code !== 'ENOENT' ? er : null)\n  }))\n}\n\nconst chownrKid = (p, child, uid, gid, cb) => {\n  if (typeof child === 'string')\n    return fs.lstat(path.resolve(p, child), (er, stats) => {\n      // Skip ENOENT error\n      if (er)\n        return cb(er.code !== 'ENOENT' ? er : null)\n      stats.name = child\n      chownrKid(p, stats, uid, gid, cb)\n    })\n\n  if (child.isDirectory()) {\n    chownr(path.resolve(p, child.name), uid, gid, er => {\n      if (er)\n        return cb(er)\n      const cpath = path.resolve(p, child.name)\n      chown(cpath, uid, gid, cb)\n    })\n  } else {\n    const cpath = path.resolve(p, child.name)\n    chown(cpath, uid, gid, cb)\n  }\n}\n\n\nconst chownr = (p, uid, gid, cb) => {\n  readdir(p, { withFileTypes: true }, (er, children) => {\n    // any error other than ENOTDIR or ENOTSUP means it's not readable,\n    // or doesn't exist.  give up.\n    if (er) {\n      if (er.code === 'ENOENT')\n        return cb()\n      else if (er.code !== 'ENOTDIR' && er.code !== 'ENOTSUP')\n        return cb(er)\n    }\n    if (er || !children.length)\n      return chown(p, uid, gid, cb)\n\n    let len = children.length\n    let errState = null\n    const then = er => {\n      if (errState)\n        return\n      if (er)\n        return cb(errState = er)\n      if (-- len === 0)\n        return chown(p, uid, gid, cb)\n    }\n\n    children.forEach(child => chownrKid(p, child, uid, gid, then))\n  })\n}\n\nconst chownrKidSync = (p, child, uid, gid) => {\n  if (typeof child === 'string') {\n    try {\n      const stats = fs.lstatSync(path.resolve(p, child))\n      stats.name = child\n      child = stats\n    } catch (er) {\n      if (er.code === 'ENOENT')\n        return\n      else\n        throw er\n    }\n  }\n\n  if (child.isDirectory())\n    chownrSync(path.resolve(p, child.name), uid, gid)\n\n  handleEISDirSync(path.resolve(p, child.name), uid, gid)\n}\n\nconst chownrSync = (p, uid, gid) => {\n  let children\n  try {\n    children = readdirSync(p, { withFileTypes: true })\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return\n    else if (er.code === 'ENOTDIR' || er.code === 'ENOTSUP')\n      return handleEISDirSync(p, uid, gid)\n    else\n      throw er\n  }\n\n  if (children && children.length)\n    children.forEach(child => chownrKidSync(p, child, uid, gid))\n\n  return handleEISDirSync(p, uid, gid)\n}\n\nmodule.exports = chownr\nchownr.sync = chownrSync\n",
  "'use strict'\n// wrapper around mkdirp for tar's needs.\n\n// TODO: This should probably be a class, not functionally\n// passing around state in a gazillion args.\n\nconst mkdirp = require('mkdirp')\nconst fs = require('fs')\nconst path = require('path')\nconst chownr = require('chownr')\nconst normPath = require('./normalize-windows-path.js')\n\nclass SymlinkError extends Error {\n  constructor (symlink, path) {\n    super('Cannot extract through symbolic link')\n    this.path = path\n    this.symlink = symlink\n  }\n\n  get name () {\n    return 'SylinkError'\n  }\n}\n\nclass CwdError extends Error {\n  constructor (path, code) {\n    super(code + ': Cannot cd into \\'' + path + '\\'')\n    this.path = path\n    this.code = code\n  }\n\n  get name () {\n    return 'CwdError'\n  }\n}\n\nconst cGet = (cache, key) => cache.get(normPath(key))\nconst cSet = (cache, key, val) => cache.set(normPath(key), val)\n\nconst checkCwd = (dir, cb) => {\n  fs.stat(dir, (er, st) => {\n    if (er || !st.isDirectory()) {\n      er = new CwdError(dir, er && er.code || 'ENOTDIR')\n    }\n    cb(er)\n  })\n}\n\nmodule.exports = (dir, opt, cb) => {\n  dir = normPath(dir)\n\n  // if there's any overlap between mask and mode,\n  // then we'll need an explicit chmod\n  const umask = opt.umask\n  const mode = opt.mode | 0o0700\n  const needChmod = (mode & umask) !== 0\n\n  const uid = opt.uid\n  const gid = opt.gid\n  const doChown = typeof uid === 'number' &&\n    typeof gid === 'number' &&\n    (uid !== opt.processUid || gid !== opt.processGid)\n\n  const preserve = opt.preserve\n  const unlink = opt.unlink\n  const cache = opt.cache\n  const cwd = normPath(opt.cwd)\n\n  const done = (er, created) => {\n    if (er) {\n      cb(er)\n    } else {\n      cSet(cache, dir, true)\n      if (created && doChown) {\n        chownr(created, uid, gid, er => done(er))\n      } else if (needChmod) {\n        fs.chmod(dir, mode, cb)\n      } else {\n        cb()\n      }\n    }\n  }\n\n  if (cache && cGet(cache, dir) === true) {\n    return done()\n  }\n\n  if (dir === cwd) {\n    return checkCwd(dir, done)\n  }\n\n  if (preserve) {\n    return mkdirp(dir, { mode }).then(made => done(null, made), done)\n  }\n\n  const sub = normPath(path.relative(cwd, dir))\n  const parts = sub.split('/')\n  mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done)\n}\n\nconst mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {\n  if (!parts.length) {\n    return cb(null, created)\n  }\n  const p = parts.shift()\n  const part = normPath(path.resolve(base + '/' + p))\n  if (cGet(cache, part)) {\n    return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)\n  }\n  fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb))\n}\n\nconst onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => er => {\n  if (er) {\n    fs.lstat(part, (statEr, st) => {\n      if (statEr) {\n        statEr.path = statEr.path && normPath(statEr.path)\n        cb(statEr)\n      } else if (st.isDirectory()) {\n        mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)\n      } else if (unlink) {\n        fs.unlink(part, er => {\n          if (er) {\n            return cb(er)\n          }\n          fs.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb))\n        })\n      } else if (st.isSymbolicLink()) {\n        return cb(new SymlinkError(part, part + '/' + parts.join('/')))\n      } else {\n        cb(er)\n      }\n    })\n  } else {\n    created = created || part\n    mkdir_(part, parts, mode, cache, unlink, cwd, created, cb)\n  }\n}\n\nconst checkCwdSync = dir => {\n  let ok = false\n  let code = 'ENOTDIR'\n  try {\n    ok = fs.statSync(dir).isDirectory()\n  } catch (er) {\n    code = er.code\n  } finally {\n    if (!ok) {\n      throw new CwdError(dir, code)\n    }\n  }\n}\n\nmodule.exports.sync = (dir, opt) => {\n  dir = normPath(dir)\n  // if there's any overlap between mask and mode,\n  // then we'll need an explicit chmod\n  const umask = opt.umask\n  const mode = opt.mode | 0o0700\n  const needChmod = (mode & umask) !== 0\n\n  const uid = opt.uid\n  const gid = opt.gid\n  const doChown = typeof uid === 'number' &&\n    typeof gid === 'number' &&\n    (uid !== opt.processUid || gid !== opt.processGid)\n\n  const preserve = opt.preserve\n  const unlink = opt.unlink\n  const cache = opt.cache\n  const cwd = normPath(opt.cwd)\n\n  const done = (created) => {\n    cSet(cache, dir, true)\n    if (created && doChown) {\n      chownr.sync(created, uid, gid)\n    }\n    if (needChmod) {\n      fs.chmodSync(dir, mode)\n    }\n  }\n\n  if (cache && cGet(cache, dir) === true) {\n    return done()\n  }\n\n  if (dir === cwd) {\n    checkCwdSync(cwd)\n    return done()\n  }\n\n  if (preserve) {\n    return done(mkdirp.sync(dir, mode))\n  }\n\n  const sub = normPath(path.relative(cwd, dir))\n  const parts = sub.split('/')\n  let created = null\n  for (let p = parts.shift(), part = cwd;\n    p && (part += '/' + p);\n    p = parts.shift()) {\n    part = normPath(path.resolve(part))\n    if (cGet(cache, part)) {\n      continue\n    }\n\n    try {\n      fs.mkdirSync(part, mode)\n      created = created || part\n      cSet(cache, part, true)\n    } catch (er) {\n      const st = fs.lstatSync(part)\n      if (st.isDirectory()) {\n        cSet(cache, part, true)\n        continue\n      } else if (unlink) {\n        fs.unlinkSync(part)\n        fs.mkdirSync(part, mode)\n        created = created || part\n        cSet(cache, part, true)\n        continue\n      } else if (st.isSymbolicLink()) {\n        return new SymlinkError(part, part + '/' + parts.join('/'))\n      }\n    }\n  }\n\n  return done(created)\n}\n",
  "// warning: extremely hot code path.\n// This has been meticulously optimized for use\n// within npm install on large package trees.\n// Do not edit without careful benchmarking.\nconst normalizeCache = Object.create(null)\nconst { hasOwnProperty } = Object.prototype\nmodule.exports = s => {\n  if (!hasOwnProperty.call(normalizeCache, s)) {\n    normalizeCache[s] = s.normalize('NFD')\n  }\n  return normalizeCache[s]\n}\n",
  "// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\n\nconst assert = require('assert')\nconst normalize = require('./normalize-unicode.js')\nconst stripSlashes = require('./strip-trailing-slashes.js')\nconst { join } = require('path')\n\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\n\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map()\n\n  // fn => {paths:[path,...], dirs:[path, ...]}\n  const reservations = new Map()\n\n  // return a set of parent dirs for a given path\n  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n  const getDirs = path => {\n    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n      if (set.length) {\n        path = join(set[set.length - 1], path)\n      }\n      set.push(path || '/')\n      return set\n    }, [])\n    return dirs\n  }\n\n  // functions currently running\n  const running = new Set()\n\n  // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n  const getQueues = fn => {\n    const res = reservations.get(fn)\n    /* istanbul ignore if - unpossible */\n    if (!res) {\n      throw new Error('function does not have any path reservations')\n    }\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path)),\n    }\n  }\n\n  // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n  const check = fn => {\n    const { paths, dirs } = getQueues(fn)\n    return paths.every(q => q[0] === fn) &&\n      dirs.every(q => q[0] instanceof Set && q[0].has(fn))\n  }\n\n  // run the function if it's first in line and not already running\n  const run = fn => {\n    if (running.has(fn) || !check(fn)) {\n      return false\n    }\n    running.add(fn)\n    fn(() => clear(fn))\n    return true\n  }\n\n  const clear = fn => {\n    if (!running.has(fn)) {\n      return false\n    }\n\n    const { paths, dirs } = reservations.get(fn)\n    const next = new Set()\n\n    paths.forEach(path => {\n      const q = queues.get(path)\n      assert.equal(q[0], fn)\n      if (q.length === 1) {\n        queues.delete(path)\n      } else {\n        q.shift()\n        if (typeof q[0] === 'function') {\n          next.add(q[0])\n        } else {\n          q[0].forEach(fn => next.add(fn))\n        }\n      }\n    })\n\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      assert(q[0] instanceof Set)\n      if (q[0].size === 1 && q.length === 1) {\n        queues.delete(dir)\n      } else if (q[0].size === 1) {\n        q.shift()\n\n        // must be a function or else the Set would've been reused\n        next.add(q[0])\n      } else {\n        q[0].delete(fn)\n      }\n    })\n    running.delete(fn)\n\n    next.forEach(fn => run(fn))\n    return true\n  }\n\n  const reserve = (paths, fn) => {\n    // collide on matches across case and unicode normalization\n    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n    // impossible to determine whether two paths refer to the same thing on\n    // disk, without asking the kernel for a shortname.\n    // So, we just pretend that every path matches every other path here,\n    // effectively removing all parallelization on windows.\n    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n      // don't need normPath, because we skip this entirely for windows\n      return stripSlashes(join(normalize(p))).toLowerCase()\n    })\n\n    const dirs = new Set(\n      paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))\n    )\n    reservations.set(fn, { dirs, paths })\n    paths.forEach(path => {\n      const q = queues.get(path)\n      if (!q) {\n        queues.set(path, [fn])\n      } else {\n        q.push(fn)\n      }\n    })\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      if (!q) {\n        queues.set(dir, [new Set([fn])])\n      } else if (q[q.length - 1] instanceof Set) {\n        q[q.length - 1].add(fn)\n      } else {\n        q.push(new Set([fn]))\n      }\n    })\n\n    return run(fn)\n  }\n\n  return { check, reserve }\n}\n",
  "// Get the appropriate flag to use for creating files\n// We use fmap on Windows platforms for files less than\n// 512kb.  This is a fairly low limit, but avoids making\n// things slower in some cases.  Since most of what this\n// library is used for is extracting tarballs of many\n// relatively small files in npm packages and the like,\n// it can be a big boost on Windows platforms.\n// Only supported in Node v12.9.0 and above.\nconst platform = process.env.__FAKE_PLATFORM__ || process.platform\nconst isWindows = platform === 'win32'\nconst fs = global.__FAKE_TESTING_FS__ || require('fs')\n\n/* istanbul ignore next */\nconst { O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0 } = fs.constants\n\nconst fMapEnabled = isWindows && !!UV_FS_O_FILEMAP\nconst fMapLimit = 512 * 1024\nconst fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY\nmodule.exports = !fMapEnabled ? () => 'w'\n  : size => size < fMapLimit ? fMapFlag : 'w'\n",
  "'use strict'\n\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\n\nconst assert = require('assert')\nconst Parser = require('./parse.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst mkdir = require('./mkdir.js')\nconst wc = require('./winchars.js')\nconst pathReservations = require('./path-reservations.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\nconst normalize = require('./normalize-unicode.js')\n\nconst ONENTRY = Symbol('onEntry')\nconst CHECKFS = Symbol('checkFs')\nconst CHECKFS2 = Symbol('checkFs2')\nconst PRUNECACHE = Symbol('pruneCache')\nconst ISREUSABLE = Symbol('isReusable')\nconst MAKEFS = Symbol('makeFs')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst LINK = Symbol('link')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst UNSUPPORTED = Symbol('unsupported')\nconst CHECKPATH = Symbol('checkPath')\nconst MKDIR = Symbol('mkdir')\nconst ONERROR = Symbol('onError')\nconst PENDING = Symbol('pending')\nconst PEND = Symbol('pend')\nconst UNPEND = Symbol('unpend')\nconst ENDED = Symbol('ended')\nconst MAYBECLOSE = Symbol('maybeClose')\nconst SKIP = Symbol('skip')\nconst DOCHOWN = Symbol('doChown')\nconst UID = Symbol('uid')\nconst GID = Symbol('gid')\nconst CHECKED_CWD = Symbol('checkedCwd')\nconst crypto = require('crypto')\nconst getFlag = require('./get-write-flag.js')\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\nconst DEFAULT_MAX_DEPTH = 1024\n\n// Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n/* istanbul ignore next */\nconst unlinkFile = (path, cb) => {\n  if (!isWindows) {\n    return fs.unlink(path, cb)\n  }\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.rename(path, name, er => {\n    if (er) {\n      return cb(er)\n    }\n    fs.unlink(name, cb)\n  })\n}\n\n/* istanbul ignore next */\nconst unlinkFileSync = path => {\n  if (!isWindows) {\n    return fs.unlinkSync(path)\n  }\n\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\n  fs.renameSync(path, name)\n  fs.unlinkSync(name)\n}\n\n// this.gid, entry.gid, this.processUid\nconst uint32 = (a, b, c) =>\n  a === a >>> 0 ? a\n  : b === b >>> 0 ? b\n  : c\n\n// clear the cache if it's a case-insensitive unicode-squashing match.\n// we can't know if the current file system is case-sensitive or supports\n// unicode fully, so we check for similarity on the maximally compatible\n// representation.  Err on the side of pruning, since all it's doing is\n// preventing lstats, and it's not the end of the world if we get a false\n// positive.\n// Note that on windows, we always drop the entire cache whenever a\n// symbolic link is encountered, because 8.3 filenames are impossible\n// to reason about, and collisions are hazards rather than just failures.\nconst cacheKeyNormalize = path => stripSlash(normPath(normalize(path)))\n  .toLowerCase()\n\nconst pruneCache = (cache, abs) => {\n  abs = cacheKeyNormalize(abs)\n  for (const path of cache.keys()) {\n    const pnorm = cacheKeyNormalize(path)\n    if (pnorm === abs || pnorm.indexOf(abs + '/') === 0) {\n      cache.delete(path)\n    }\n  }\n}\n\nconst dropCache = cache => {\n  for (const key of cache.keys()) {\n    cache.delete(key)\n  }\n}\n\nclass Unpack extends Parser {\n  constructor (opt) {\n    if (!opt) {\n      opt = {}\n    }\n\n    opt.ondone = _ => {\n      this[ENDED] = true\n      this[MAYBECLOSE]()\n    }\n\n    super(opt)\n\n    this[CHECKED_CWD] = false\n\n    this.reservations = pathReservations()\n\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null\n\n    this.writable = true\n    this.readable = false\n\n    this[PENDING] = 0\n    this[ENDED] = false\n\n    this.dirCache = opt.dirCache || new Map()\n\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') {\n        throw new TypeError('cannot set owner without number uid and gid')\n      }\n      if (opt.preserveOwner) {\n        throw new TypeError(\n          'cannot preserve owner in archive and also set owner explicitly')\n      }\n      this.uid = opt.uid\n      this.gid = opt.gid\n      this.setOwner = true\n    } else {\n      this.uid = null\n      this.gid = null\n      this.setOwner = false\n    }\n\n    // default true for root\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') {\n      this.preserveOwner = process.getuid && process.getuid() === 0\n    } else {\n      this.preserveOwner = !!opt.preserveOwner\n    }\n\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?\n      process.getuid() : null\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?\n      process.getgid() : null\n\n    // prevent excessively deep nesting of subfolders\n    // set to `Infinity` to remove this restriction\n    this.maxDepth = typeof opt.maxDepth === 'number'\n      ? opt.maxDepth\n      : DEFAULT_MAX_DEPTH\n\n    // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n    this.forceChown = opt.forceChown === true\n\n    // turn ><?| in filenames into 0xf000-higher encoded forms\n    this.win32 = !!opt.win32 || isWindows\n\n    // do not unpack over files that are newer than what's in the archive\n    this.newer = !!opt.newer\n\n    // do not unpack over ANY files\n    this.keep = !!opt.keep\n\n    // do not set mtime/atime of extracted entries\n    this.noMtime = !!opt.noMtime\n\n    // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n    this.preservePaths = !!opt.preservePaths\n\n    // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n    this.unlink = !!opt.unlink\n\n    this.cwd = normPath(path.resolve(opt.cwd || process.cwd()))\n    this.strip = +opt.strip || 0\n    // if we're not chmodding, then we don't need the process umask\n    this.processUmask = opt.noChmod ? 0 : process.umask()\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask\n\n    // default mode for dirs created as parents\n    this.dmode = opt.dmode || (0o0777 & (~this.umask))\n    this.fmode = opt.fmode || (0o0666 & (~this.umask))\n\n    this.on('entry', entry => this[ONENTRY](entry))\n  }\n\n  // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n  warn (code, msg, data = {}) {\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') {\n      data.recoverable = false\n    }\n    return super.warn(code, msg, data)\n  }\n\n  [MAYBECLOSE] () {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish')\n      this.emit('finish')\n      this.emit('end')\n    }\n  }\n\n  [CHECKPATH] (entry) {\n    const p = normPath(entry.path)\n    const parts = p.split('/')\n\n    if (this.strip) {\n      if (parts.length < this.strip) {\n        return false\n      }\n      if (entry.type === 'Link') {\n        const linkparts = normPath(entry.linkpath).split('/')\n        if (linkparts.length >= this.strip) {\n          entry.linkpath = linkparts.slice(this.strip).join('/')\n        } else {\n          return false\n        }\n      }\n      parts.splice(0, this.strip)\n      entry.path = parts.join('/')\n    }\n\n    if (isFinite(this.maxDepth) && parts.length > this.maxDepth) {\n      this.warn('TAR_ENTRY_ERROR', 'path excessively deep', {\n        entry,\n        path: p,\n        depth: parts.length,\n        maxDepth: this.maxDepth,\n      })\n      return false\n    }\n\n    if (!this.preservePaths) {\n      if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n          entry,\n          path: p,\n        })\n        return false\n      }\n\n      // strip off the root\n      const [root, stripped] = stripAbsolutePath(p)\n      if (root) {\n        entry.path = stripped\n        this.warn('TAR_ENTRY_INFO', `stripping ${root} from absolute path`, {\n          entry,\n          path: p,\n        })\n      }\n    }\n\n    if (path.isAbsolute(entry.path)) {\n      entry.absolute = normPath(path.resolve(entry.path))\n    } else {\n      entry.absolute = normPath(path.resolve(this.cwd, entry.path))\n    }\n\n    // if we somehow ended up with a path that escapes the cwd, and we are\n    // not in preservePaths mode, then something is fishy!  This should have\n    // been prevented above, so ignore this for coverage.\n    /* istanbul ignore if - defense in depth */\n    if (!this.preservePaths &&\n        entry.absolute.indexOf(this.cwd + '/') !== 0 &&\n        entry.absolute !== this.cwd) {\n      this.warn('TAR_ENTRY_ERROR', 'path escaped extraction target', {\n        entry,\n        path: normPath(entry.path),\n        resolvedPath: entry.absolute,\n        cwd: this.cwd,\n      })\n      return false\n    }\n\n    // an archive can set properties on the extraction directory, but it\n    // may not replace the cwd with a different kind of thing entirely.\n    if (entry.absolute === this.cwd &&\n        entry.type !== 'Directory' &&\n        entry.type !== 'GNUDumpDir') {\n      return false\n    }\n\n    // only encode : chars that aren't drive letter indicators\n    if (this.win32) {\n      const { root: aRoot } = path.win32.parse(entry.absolute)\n      entry.absolute = aRoot + wc.encode(entry.absolute.slice(aRoot.length))\n      const { root: pRoot } = path.win32.parse(entry.path)\n      entry.path = pRoot + wc.encode(entry.path.slice(pRoot.length))\n    }\n\n    return true\n  }\n\n  [ONENTRY] (entry) {\n    if (!this[CHECKPATH](entry)) {\n      return entry.resume()\n    }\n\n    assert.equal(typeof entry.absolute, 'string')\n\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode) {\n          entry.mode = entry.mode | 0o700\n        }\n\n      // eslint-disable-next-line no-fallthrough\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry)\n\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n      default:\n        return this[UNSUPPORTED](entry)\n    }\n  }\n\n  [ONERROR] (er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError') {\n      this.emit('error', er)\n    } else {\n      this.warn('TAR_ENTRY_ERROR', er, { entry })\n      this[UNPEND]()\n      entry.resume()\n    }\n  }\n\n  [MKDIR] (dir, mode, cb) {\n    mkdir(normPath(dir), {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode,\n      noChmod: this.noChmod,\n    }, cb)\n  }\n\n  [DOCHOWN] (entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown ||\n      this.preserveOwner &&\n      (typeof entry.uid === 'number' && entry.uid !== this.processUid ||\n        typeof entry.gid === 'number' && entry.gid !== this.processGid)\n      ||\n      (typeof this.uid === 'number' && this.uid !== this.processUid ||\n        typeof this.gid === 'number' && this.gid !== this.processGid)\n  }\n\n  [UID] (entry) {\n    return uint32(this.uid, entry.uid, this.processUid)\n  }\n\n  [GID] (entry) {\n    return uint32(this.gid, entry.gid, this.processGid)\n  }\n\n  [FILE] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode\n    const stream = new fsm.WriteStream(entry.absolute, {\n      flags: getFlag(entry.size),\n      mode: mode,\n      autoClose: false,\n    })\n    stream.on('error', er => {\n      if (stream.fd) {\n        fs.close(stream.fd, () => {})\n      }\n\n      // flush all the data out so that we aren't left hanging\n      // if the error wasn't actually fatal.  otherwise the parse\n      // is blocked, and we never proceed.\n      stream.write = () => true\n      this[ONERROR](er, entry)\n      fullyDone()\n    })\n\n    let actions = 1\n    const done = er => {\n      if (er) {\n        /* istanbul ignore else - we should always have a fd by now */\n        if (stream.fd) {\n          fs.close(stream.fd, () => {})\n        }\n\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          if (er) {\n            this[ONERROR](er, entry)\n          } else {\n            this[UNPEND]()\n          }\n          fullyDone()\n        })\n      }\n    }\n\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute\n      const fd = stream.fd\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        fs.futimes(fd, atime, mtime, er =>\n          er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er))\n          : done())\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n        fs.fchown(fd, uid, gid, er =>\n          er ? fs.chown(abs, uid, gid, er2 => done(er2 && er))\n          : done())\n      }\n\n      done()\n    })\n\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => {\n        this[ONERROR](er, entry)\n        fullyDone()\n      })\n      entry.pipe(tx)\n    }\n    tx.pipe(stream)\n  }\n\n  [DIRECTORY] (entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        this[ONERROR](er, entry)\n        fullyDone()\n        return\n      }\n\n      let actions = 1\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone()\n          this[UNPEND]()\n          entry.resume()\n        }\n      }\n\n      if (entry.mtime && !this.noMtime) {\n        actions++\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done)\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)\n      }\n\n      done()\n    })\n  }\n\n  [UNSUPPORTED] (entry) {\n    entry.unsupported = true\n    this.warn('TAR_ENTRY_UNSUPPORTED',\n      `unsupported entry type: ${entry.type}`, { entry })\n    entry.resume()\n  }\n\n  [SYMLINK] (entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done)\n  }\n\n  [HARDLINK] (entry, done) {\n    const linkpath = normPath(path.resolve(this.cwd, entry.linkpath))\n    this[LINK](entry, linkpath, 'link', done)\n  }\n\n  [PEND] () {\n    this[PENDING]++\n  }\n\n  [UNPEND] () {\n    this[PENDING]--\n    this[MAYBECLOSE]()\n  }\n\n  [SKIP] (entry) {\n    this[UNPEND]()\n    entry.resume()\n  }\n\n  // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n  [ISREUSABLE] (entry, st) {\n    return entry.type === 'File' &&\n      !this.unlink &&\n      st.isFile() &&\n      st.nlink <= 1 &&\n      !isWindows\n  }\n\n  // check if a thing is there, and if so, try to clobber it\n  [CHECKFS] (entry) {\n    this[PEND]()\n    const paths = [entry.path]\n    if (entry.linkpath) {\n      paths.push(entry.linkpath)\n    }\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\n  }\n\n  [PRUNECACHE] (entry) {\n    // if we are not creating a directory, and the path is in the dirCache,\n    // then that means we are about to delete the directory we created\n    // previously, and it is no longer going to be a directory, and neither\n    // is any of its children.\n    // If a symbolic link is encountered, all bets are off.  There is no\n    // reasonable way to sanitize the cache in such a way we will be able to\n    // avoid having filesystem collisions.  If this happens with a non-symlink\n    // entry, it'll just fail to unpack, but a symlink to a directory, using an\n    // 8.3 shortname or certain unicode attacks, can evade detection and lead\n    // to arbitrary writes to anywhere on the system.\n    if (entry.type === 'SymbolicLink') {\n      dropCache(this.dirCache)\n    } else if (entry.type !== 'Directory') {\n      pruneCache(this.dirCache, entry.absolute)\n    }\n  }\n\n  [CHECKFS2] (entry, fullyDone) {\n    this[PRUNECACHE](entry)\n\n    const done = er => {\n      this[PRUNECACHE](entry)\n      fullyDone(er)\n    }\n\n    const checkCwd = () => {\n      this[MKDIR](this.cwd, this.dmode, er => {\n        if (er) {\n          this[ONERROR](er, entry)\n          done()\n          return\n        }\n        this[CHECKED_CWD] = true\n        start()\n      })\n    }\n\n    const start = () => {\n      if (entry.absolute !== this.cwd) {\n        const parent = normPath(path.dirname(entry.absolute))\n        if (parent !== this.cwd) {\n          return this[MKDIR](parent, this.dmode, er => {\n            if (er) {\n              this[ONERROR](er, entry)\n              done()\n              return\n            }\n            afterMakeParent()\n          })\n        }\n      }\n      afterMakeParent()\n    }\n\n    const afterMakeParent = () => {\n      fs.lstat(entry.absolute, (lstatEr, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry)\n          done()\n          return\n        }\n        if (lstatEr || this[ISREUSABLE](entry, st)) {\n          return this[MAKEFS](null, entry, done)\n        }\n\n        if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            const needChmod = !this.noChmod &&\n              entry.mode &&\n              (st.mode & 0o7777) !== entry.mode\n            const afterChmod = er => this[MAKEFS](er, entry, done)\n            if (!needChmod) {\n              return afterChmod()\n            }\n            return fs.chmod(entry.absolute, entry.mode, afterChmod)\n          }\n          // Not a dir entry, have to remove it.\n          // NB: the only way to end up with an entry that is the cwd\n          // itself, in such a way that == does not detect, is a\n          // tricky windows absolute path with UNC or 8.3 parts (and\n          // preservePaths:true, or else it will have been stripped).\n          // In that case, the user has opted out of path protections\n          // explicitly, so if they blow away the cwd, c'est la vie.\n          if (entry.absolute !== this.cwd) {\n            return fs.rmdir(entry.absolute, er =>\n              this[MAKEFS](er, entry, done))\n          }\n        }\n\n        // not a dir, and not reusable\n        // don't remove if the cwd, we want that error\n        if (entry.absolute === this.cwd) {\n          return this[MAKEFS](null, entry, done)\n        }\n\n        unlinkFile(entry.absolute, er =>\n          this[MAKEFS](er, entry, done))\n      })\n    }\n\n    if (this[CHECKED_CWD]) {\n      start()\n    } else {\n      checkCwd()\n    }\n  }\n\n  [MAKEFS] (er, entry, done) {\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done)\n\n      case 'Link':\n        return this[HARDLINK](entry, done)\n\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done)\n\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done)\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    // XXX: get the type ('symlink' or 'junction') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er) {\n        this[ONERROR](er, entry)\n      } else {\n        this[UNPEND]()\n        entry.resume()\n      }\n      done()\n    })\n  }\n}\n\nconst callSync = fn => {\n  try {\n    return [null, fn()]\n  } catch (er) {\n    return [er, null]\n  }\n}\nclass UnpackSync extends Unpack {\n  [MAKEFS] (er, entry) {\n    return super[MAKEFS](er, entry, () => {})\n  }\n\n  [CHECKFS] (entry) {\n    this[PRUNECACHE](entry)\n\n    if (!this[CHECKED_CWD]) {\n      const er = this[MKDIR](this.cwd, this.dmode)\n      if (er) {\n        return this[ONERROR](er, entry)\n      }\n      this[CHECKED_CWD] = true\n    }\n\n    // don't bother to make the parent if the current entry is the cwd,\n    // we've already checked it.\n    if (entry.absolute !== this.cwd) {\n      const parent = normPath(path.dirname(entry.absolute))\n      if (parent !== this.cwd) {\n        const mkParent = this[MKDIR](parent, this.dmode)\n        if (mkParent) {\n          return this[ONERROR](mkParent, entry)\n        }\n      }\n    }\n\n    const [lstatEr, st] = callSync(() => fs.lstatSync(entry.absolute))\n    if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n      return this[SKIP](entry)\n    }\n\n    if (lstatEr || this[ISREUSABLE](entry, st)) {\n      return this[MAKEFS](null, entry)\n    }\n\n    if (st.isDirectory()) {\n      if (entry.type === 'Directory') {\n        const needChmod = !this.noChmod &&\n          entry.mode &&\n          (st.mode & 0o7777) !== entry.mode\n        const [er] = needChmod ? callSync(() => {\n          fs.chmodSync(entry.absolute, entry.mode)\n        }) : []\n        return this[MAKEFS](er, entry)\n      }\n      // not a dir entry, have to remove it\n      const [er] = callSync(() => fs.rmdirSync(entry.absolute))\n      this[MAKEFS](er, entry)\n    }\n\n    // not a dir, and not reusable.\n    // don't remove if it's the cwd, since we want that error.\n    const [er] = entry.absolute === this.cwd ? []\n      : callSync(() => unlinkFileSync(entry.absolute))\n    this[MAKEFS](er, entry)\n  }\n\n  [FILE] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.fmode\n\n    const oner = er => {\n      let closeError\n      try {\n        fs.closeSync(fd)\n      } catch (e) {\n        closeError = e\n      }\n      if (er || closeError) {\n        this[ONERROR](er || closeError, entry)\n      }\n      done()\n    }\n\n    let fd\n    try {\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode)\n    } catch (er) {\n      return oner(er)\n    }\n    const tx = this.transform ? this.transform(entry) || entry : entry\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry))\n      entry.pipe(tx)\n    }\n\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length)\n      } catch (er) {\n        oner(er)\n      }\n    })\n\n    tx.on('end', _ => {\n      let er = null\n      // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date()\n        const mtime = entry.mtime\n        try {\n          fs.futimesSync(fd, atime, mtime)\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime)\n          } catch (utimeser) {\n            er = futimeser\n          }\n        }\n      }\n\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry)\n        const gid = this[GID](entry)\n\n        try {\n          fs.fchownSync(fd, uid, gid)\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid)\n          } catch (chowner) {\n            er = er || fchowner\n          }\n        }\n      }\n\n      oner(er)\n    })\n  }\n\n  [DIRECTORY] (entry, done) {\n    const mode = entry.mode & 0o7777 || this.dmode\n    const er = this[MKDIR](entry.absolute, mode)\n    if (er) {\n      this[ONERROR](er, entry)\n      done()\n      return\n    }\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\n      } catch (er) {}\n    }\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\n      } catch (er) {}\n    }\n    done()\n    entry.resume()\n  }\n\n  [MKDIR] (dir, mode) {\n    try {\n      return mkdir.sync(normPath(dir), {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode,\n      })\n    } catch (er) {\n      return er\n    }\n  }\n\n  [LINK] (entry, linkpath, link, done) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute)\n      done()\n      entry.resume()\n    } catch (er) {\n      return this[ONERROR](er, entry)\n    }\n  }\n}\n\nUnpack.Sync = UnpackSync\nmodule.exports = Unpack\n",
  "'use strict'\n\n// tar -x\nconst hlo = require('./high-level-opt.js')\nconst Unpack = require('./unpack.js')\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst path = require('path')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nmodule.exports = (opt_, files, cb) => {\n  if (typeof opt_ === 'function') {\n    cb = opt_, files = null, opt_ = {}\n  } else if (Array.isArray(opt_)) {\n    files = opt_, opt_ = {}\n  }\n\n  if (typeof files === 'function') {\n    cb = files, files = null\n  }\n\n  if (!files) {\n    files = []\n  } else {\n    files = Array.from(files)\n  }\n\n  const opt = hlo(opt_)\n\n  if (opt.sync && typeof cb === 'function') {\n    throw new TypeError('callback not supported for sync tar functions')\n  }\n\n  if (!opt.file && typeof cb === 'function') {\n    throw new TypeError('callback only supported with file option')\n  }\n\n  if (files.length) {\n    filesFilter(opt, files)\n  }\n\n  return opt.file && opt.sync ? extractFileSync(opt)\n    : opt.file ? extractFile(opt, cb)\n    : opt.sync ? extractSync(opt)\n    : extract(opt)\n}\n\n// construct a filter that limits the file entries listed\n// include child entries if a dir is included\nconst filesFilter = (opt, files) => {\n  const map = new Map(files.map(f => [stripSlash(f), true]))\n  const filter = opt.filter\n\n  const mapHas = (file, r) => {\n    const root = r || path.parse(file).root || '.'\n    const ret = file === root ? false\n      : map.has(file) ? map.get(file)\n      : mapHas(path.dirname(file), root)\n\n    map.set(file, ret)\n    return ret\n  }\n\n  opt.filter = filter\n    ? (file, entry) => filter(file, entry) && mapHas(stripSlash(file))\n    : file => mapHas(stripSlash(file))\n}\n\nconst extractFileSync = opt => {\n  const u = new Unpack.Sync(opt)\n\n  const file = opt.file\n  const stat = fs.statSync(file)\n  // This trades a zero-byte read() syscall for a stat\n  // However, it will usually result in less memory allocation\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024\n  const stream = new fsm.ReadStreamSync(file, {\n    readSize: readSize,\n    size: stat.size,\n  })\n  stream.pipe(u)\n}\n\nconst extractFile = (opt, cb) => {\n  const u = new Unpack(opt)\n  const readSize = opt.maxReadSize || 16 * 1024 * 1024\n\n  const file = opt.file\n  const p = new Promise((resolve, reject) => {\n    u.on('error', reject)\n    u.on('close', resolve)\n\n    // This trades a zero-byte read() syscall for a stat\n    // However, it will usually result in less memory allocation\n    fs.stat(file, (er, stat) => {\n      if (er) {\n        reject(er)\n      } else {\n        const stream = new fsm.ReadStream(file, {\n          readSize: readSize,\n          size: stat.size,\n        })\n        stream.on('error', reject)\n        stream.pipe(u)\n      }\n    })\n  })\n  return cb ? p.then(cb, cb) : p\n}\n\nconst extractSync = opt => new Unpack.Sync(opt)\n\nconst extract = opt => new Unpack(opt)\n",
  "'use strict'\n\n// high-level commands\nexports.c = exports.create = require('./lib/create.js')\nexports.r = exports.replace = require('./lib/replace.js')\nexports.t = exports.list = require('./lib/list.js')\nexports.u = exports.update = require('./lib/update.js')\nexports.x = exports.extract = require('./lib/extract.js')\n\n// classes\nexports.Pack = require('./lib/pack.js')\nexports.Unpack = require('./lib/unpack.js')\nexports.Parse = require('./lib/parse.js')\nexports.ReadEntry = require('./lib/read-entry.js')\nexports.WriteEntry = require('./lib/write-entry.js')\nexports.Header = require('./lib/header.js')\nexports.Pax = require('./lib/pax.js')\nexports.types = require('./lib/types.js')\n",
  "import EventEmitter from \"events\";\nimport windowEvents from \"./windowEvents\";\nimport webviewEvents from \"./webviewEvents\";\nimport trayEvents from \"./trayEvents\";\nimport applicationEvents from \"./applicationEvents\";\nimport ElectrobunEvent from \"./event\";\n\nclass ElectrobunEventEmitter extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  // optionally pass in a specifier to make the event name specific.\n  // eg: will-navigate is listened to globally for all webviews, but\n  // will-navigate-1 is listened to for a specific webview with id 1\n  emitEvent(\n    ElectrobunEvent: ElectrobunEvent<any, any>,\n    specifier?: number | string\n  ) {\n    if (specifier) {\n      this.emit(`${ElectrobunEvent.name}-${specifier}`, ElectrobunEvent);\n    } else {\n      this.emit(ElectrobunEvent.name, ElectrobunEvent);\n    }\n  }\n\n  events = {\n    window: {\n      ...windowEvents,\n    },\n    webview: {\n      ...webviewEvents,\n    },\n    tray: {\n      ...trayEvents,\n    },\n    app: {\n      ...applicationEvents,\n    },\n  };\n}\n\nexport const electrobunEventEmitter = new ElectrobunEventEmitter();\n\nexport default electrobunEventEmitter;\n",
  "export default class ElectrobunEvent<DataType, ResponseType> {\n    // todo (yoav): make most of these readonly except for response\n    name: string;\n    data: DataType;\n    // todo (yoav): define getters and setters for response\n    _response: ResponseType | undefined;\n    responseWasSet: boolean = false;\n\n    constructor(name: string, data: DataType) {\n        this.name = name;\n        this.data = data;\n    }\n\n      // Getter for response\n      get response(): ResponseType | undefined {\n        return this._response;\n    }\n\n    // Setter for response\n    set response(value: ResponseType) {\n        this._response = value;\n        this.responseWasSet = true; // Update flag when response is set\n    }\n\n    clearResponse() {\n        this._response = undefined;\n        this.responseWasSet = false;\n    }\n}",
  "import ElectrobunEvent from \"./event\";\n\nexport default {\n  close: (data) => new ElectrobunEvent<{ id: number }, {}>(\"close\", data),\n  resize: (data) =>\n    new ElectrobunEvent<\n      { id: number; x: number; y: number; width: number; height: number },\n      {}\n    >(\"resize\", data),\n  move: (data) =>\n    new ElectrobunEvent<{ id: number; x: number; y: number }, {}>(\"move\", data),\n};\n",
  "import ElectrobunEvent from \"./event\";\n\nexport default {\n  willNavigate: (data) =>\n    new ElectrobunEvent<{ url: string; windowId: number }, { allow: boolean }>(\n      \"will-navigate\",\n      data\n    ),\n  didNavigate: (data) =>\n    new ElectrobunEvent<{ detail: string }, {}>(\"did-navigate\", data),\n  didNavigateInPage: (data) =>\n    new ElectrobunEvent<{ detail: string }, {}>(\"did-navigate-in-page\", data),\n  didCommitNavigation: (data) =>\n    new ElectrobunEvent<{ detail: string }, {}>(\"did-commit-navigation\", data),\n  domReady: (data) =>\n    new ElectrobunEvent<{ detail: string }, {}>(\"dom-ready\", data),\n  newWindowOpen: (data) =>\n    new ElectrobunEvent<{ detail: string }, {}>(\"new-window-open\", data),\n};\n",
  "import ElectrobunEvent from \"./event\";\n\nexport default {\n  trayClicked: (data) =>\n    new ElectrobunEvent<{ id: number; action: string }, { allow: boolean }>(\n      \"tray-clicked\",\n      data\n    ),\n};\n",
  "import ElectrobunEvent from \"./event\";\n\nexport default {\n  applicationMenuClicked: (data) =>\n    new ElectrobunEvent<{ id: number; action: string }, { allow: boolean }>(\n      \"application-menu-clicked\",\n      data\n    ),\n  contextMenuClicked: (data) =>\n    new ElectrobunEvent<{ id: number; action: string }, { allow: boolean }>(\n      \"context-menu-clicked\",\n      data\n    ),\n};\n",
  "import EventEmitter from \"events\";\nimport windowEvents from \"./windowEvents\";\nimport webviewEvents from \"./webviewEvents\";\nimport trayEvents from \"./trayEvents\";\nimport applicationEvents from \"./applicationEvents\";\nimport ElectrobunEvent from \"./event\";\n\nclass ElectrobunEventEmitter extends EventEmitter {\n  constructor() {\n    super();\n  }\n\n  // optionally pass in a specifier to make the event name specific.\n  // eg: will-navigate is listened to globally for all webviews, but\n  // will-navigate-1 is listened to for a specific webview with id 1\n  emitEvent(\n    ElectrobunEvent: ElectrobunEvent<any, any>,\n    specifier?: number | string\n  ) {\n    if (specifier) {\n      this.emit(`${ElectrobunEvent.name}-${specifier}`, ElectrobunEvent);\n    } else {\n      this.emit(ElectrobunEvent.name, ElectrobunEvent);\n    }\n  }\n\n  events = {\n    window: {\n      ...windowEvents,\n    },\n    webview: {\n      ...webviewEvents,\n    },\n    tray: {\n      ...trayEvents,\n    },\n    app: {\n      ...applicationEvents,\n    },\n  };\n}\n\nexport const electrobunEventEmitter = new ElectrobunEventEmitter();\n\nexport default electrobunEventEmitter;\n",
  "import { join, resolve } from \"path\";\nimport { type RPCSchema, type RPCTransport, createRPC } from \"rpc-anywhere\";\nimport { execSync } from \"child_process\";\nimport * as fs from \"fs\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport { BrowserView } from \"../core/BrowserView\";\nimport { Updater } from \"../core/Updater\";\nimport { Tray } from \"../core/Tray\";\nconst CHUNK_SIZE = 1024 * 4; // 4KB\n// todo (yoav): webviewBinaryPath and ELECTROBUN_VIEWS_FOLDER should be passed in as cli/env args by the launcher binary\n// will likely be different on different platforms. Right now these are hardcoded for relative paths inside the mac app bundle.\nconst webviewBinaryPath = join(\"native\", \"webview\");\n\nconst hash = await Updater.localInfo.hash();\n// Note: we use the build's hash to separate from different apps and different builds\n// but we also want a randomId to separate different instances of the same app\n// todo (yoav): since collisions can crash the app add a function that checks if the\n// file exists first\nconst randomId = Math.random().toString(36).substring(7);\nconst mainPipe = `/private/tmp/electrobun_ipc_pipe_${hash}_${randomId}_main_in`;\n\ntry {\n  execSync(\"mkfifo \" + mainPipe);\n} catch (e) {\n  console.log(\"pipe out already exists\");\n}\n\nconst zigProc = Bun.spawn([webviewBinaryPath], {\n  stdin: \"pipe\",\n  stdout: \"pipe\",\n  env: {\n    ...process.env,\n    ELECTROBUN_VIEWS_FOLDER: resolve(\"../Resources/app/views\"),\n    MAIN_PIPE_IN: mainPipe,\n  },\n  onExit: (_zigProc) => {\n    // right now just exit the whole app if the webview process dies.\n    // in the future we probably want to try spin it back up aagain\n    process.exit(0);\n  },\n});\n\nprocess.on(\"SIGINT\", (code) => {\n  // todo (yoav): maybe send a friendly signal to the webviews to let them know\n  // we're shutting down\n  // clean up the webview process when the bun process dies.\n  zigProc.kill();\n  // fs.unlinkSync(mainPipe);\n  process.exit();\n});\n\nprocess.on(\"exit\", (code) => {\n  // Note: this can happen when the bun process crashes\n  // make sure that zigProc is killed so it doesn't linger around\n  zigProc.kill();\n});\n\nconst inStream = fs.createWriteStream(mainPipe, {\n  flags: \"r+\",\n});\n\nfunction createStdioTransport(proc): RPCTransport {\n  return {\n    send(message) {\n      try {\n        // TODO: this is the same chunking code as browserview pipes,\n        // should dedupe\n        const messageString = JSON.stringify(message) + \"\\n\";\n\n        let offset = 0;\n        while (offset < messageString.length) {\n          const chunk = messageString.slice(offset, offset + CHUNK_SIZE);\n          inStream.write(chunk);\n          offset += CHUNK_SIZE;\n        }\n\n        // Ensure the newline is written after all chunks\n        inStream.write(\"\\n\");\n      } catch (error) {\n        console.error(\"bun: failed to serialize message to zig\", error);\n      }\n    },\n    registerHandler(handler) {\n      async function readStream(stream) {\n        const reader = stream.getReader();\n        let buffer = \"\";\n\n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            buffer += new TextDecoder().decode(value);\n            let eolIndex;\n            // Process each line contained in the buffer\n            while ((eolIndex = buffer.indexOf(\"\\n\")) >= 0) {\n              const line = buffer.slice(0, eolIndex).trim();\n              buffer = buffer.slice(eolIndex + 1);\n              if (line) {\n                try {\n                  const event = JSON.parse(line);\n                  handler(event);\n                } catch (error) {\n                  // Non-json things are just bubbled up to the console.\n                  console.error(\"zig: \", line);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error reading from stream:\", error);\n        } finally {\n          reader.releaseLock();\n        }\n      }\n\n      readStream(proc.stdout);\n    },\n  };\n}\n\n// todo: consider renaming to TrayMenuItemConfig\nexport type MenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<MenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\nexport type ApplicationMenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type?: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    }\n  | {\n      type?: \"normal\";\n      label?: string;\n      tooltip?: string;\n      role?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\n// todo (yoav): move this stuff to bun/rpc/zig.ts\ntype ZigHandlers = RPCSchema<{\n  requests: {\n    createWindow: {\n      params: {\n        id: number;\n        url: string | null;\n        html: string | null;\n        title: string;\n        frame: {\n          width: number;\n          height: number;\n          x: number;\n          y: number;\n        };\n        styleMask: {\n          Borderless: boolean;\n          Titled: boolean;\n          Closable: boolean;\n          Miniaturizable: boolean;\n          Resizable: boolean;\n          UnifiedTitleAndToolbar: boolean;\n          FullScreen: boolean;\n          FullSizeContentView: boolean;\n          UtilityWindow: boolean;\n          DocModalWindow: boolean;\n          NonactivatingPanel: boolean;\n          HUDWindow: boolean;\n        };\n        titleBarStyle: string;\n      };\n      response: void;\n    };\n    createWebview: {\n      params: {\n        id: number;\n        hostWebviewId: number | null;\n        pipePrefix: string;\n        url: string | null;\n        html: string | null;\n        partition: string | null;\n        preload: string | null;\n        frame: {\n          x: number;\n          y: number;\n          width: number;\n          height: number;\n        };\n        autoResize: boolean;\n      };\n      response: void;\n    };\n\n    addWebviewToWindow: {\n      params: {\n        windowId: number;\n        webviewId: number;\n      };\n      response: void;\n    };\n\n    loadURL: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: void;\n    };\n    loadHTML: {\n      params: {\n        webviewId: number;\n        html: string;\n      };\n      response: void;\n    };\n\n    setTitle: {\n      params: {\n        winId: number;\n        title: string;\n      };\n      response: void;\n    };\n\n    closeWindow: {\n      params: {\n        winId: number;\n      };\n      response: void;\n    };\n\n    // fs\n    moveToTrash: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    showItemInFolder: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    openFileDialog: {\n      params: {\n        startingFolder: string | null;\n        allowedFileTypes: string | null;\n        canChooseFiles: boolean;\n        canChooseDirectory: boolean;\n        allowsMultipleSelection: boolean;\n      };\n      response: { openFileDialogResponse: string };\n    };\n\n    // tray and menu\n    createTray: {\n      params: {\n        id: number;\n        title: string;\n        image: string;\n        template: boolean;\n        width: number;\n        height: number;\n      };\n      response: void;\n    };\n    setTrayTitle: {\n      params: {\n        id: number;\n        title: string;\n      };\n      response: void;\n    };\n    setTrayImage: {\n      params: {\n        id: number;\n        image: string;\n      };\n      response: void;\n    };\n    setTrayMenu: {\n      params: {\n        id: number;\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    setApplicationMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    showContextMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n  };\n}>;\n\ntype BunHandlers = RPCSchema<{\n  requests: {\n    decideNavigation: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: {\n        allow: boolean;\n      };\n    };\n    syncRequest: {\n      params: {\n        webviewId: number;\n        request: string;\n      };\n      response: {\n        payload: string;\n      };\n    };\n    // todo: make these messages instead of requests\n    log: {\n      params: {\n        msg: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    trayEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    applicationMenuEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    contextMenuEvent: {\n      params: {\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    webviewEvent: {\n      params: {\n        id: number;\n        eventName: string;\n        detail: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowClose: {\n      params: {\n        id: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowMove: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowResize: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n  };\n}>;\n\nconst zigRPC = createRPC<BunHandlers, ZigHandlers>({\n  transport: createStdioTransport(zigProc),\n  requestHandler: {\n    decideNavigation: ({ webviewId, url }) => {\n      const willNavigate = electrobunEventEmitter.events.webview.willNavigate({\n        url,\n        webviewId,\n      });\n\n      let result;\n      // global will-navigate event\n      result = electrobunEventEmitter.emitEvent(willNavigate);\n\n      result = electrobunEventEmitter.emitEvent(willNavigate, webviewId);\n\n      if (willNavigate.responseWasSet) {\n        return willNavigate.response || { allow: true };\n      } else {\n        return { allow: true };\n      }\n    },\n    syncRequest: ({ webviewId, request: requestStr }) => {\n      const webview = BrowserView.getById(webviewId);\n      const { method, params } = JSON.parse(requestStr);\n\n      if (!webview) {\n        const err = `error: could not find webview with id ${webviewId}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!method) {\n        const err = `error: request missing a method`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!webview.syncRpc || !webview.syncRpc[method]) {\n        const err = `error: webview does not have a handler for method ${method}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      const handler = webview.syncRpc[method];\n      var response;\n      try {\n        response = handler(params);\n        // Note: Stringify(undefined) returns undefined,\n        // if we send undefined as the payload it'll crash\n        // so send an empty string which is a better analog for\n        // undefined json string\n        if (response === undefined) {\n          response = \"\";\n        }\n      } catch (err) {\n        console.log(err);\n        console.log(\"syncRPC failed with\", { method, params });\n        return { payload: String(err) };\n      }\n\n      const payload = JSON.stringify(response);\n      return { payload };\n    },\n    log: ({ msg }) => {\n      console.log(\"zig: \", msg);\n      return { success: true };\n    },\n    trayEvent: ({ id, action }) => {\n      const tray = Tray.getById(id);\n      if (!tray) {\n        return { success: true };\n      }\n\n      const event = electrobunEventEmitter.events.tray.trayClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    applicationMenuEvent: ({ id, action }) => {\n      const event = electrobunEventEmitter.events.app.applicationMenuClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    contextMenuEvent: ({ action }) => {\n      const event = electrobunEventEmitter.events.app.contextMenuClicked({\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    webviewEvent: ({ id, eventName, detail }) => {\n      const eventMap = {\n        \"did-navigate\": \"didNavigate\",\n        \"did-navigate-in-page\": \"didNavigateInPage\",\n        \"did-commit-navigation\": \"didCommitNavigation\",\n        \"dom-ready\": \"domReady\",\n        \"new-window-open\": \"newWindowOpen\",\n      };\n\n      // todo: the events map should use the same hyphenated names instead of camelCase\n      const handler =\n        electrobunEventEmitter.events.webview[eventMap[eventName]];\n\n      if (!handler) {\n        console.log(`!!!no handler for webview event ${eventName}`);\n        return { success: false };\n      }\n\n      const event = handler({\n        id,\n        detail,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    windowClose: ({ id }) => {\n      const handler = electrobunEventEmitter.events.window.close;\n\n      const event = handler({\n        id,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowMove: ({ id, x, y }) => {\n      const handler = electrobunEventEmitter.events.window.move;\n\n      const event = handler({\n        id,\n        x,\n        y,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowResize: ({ id, x, y, width, height }) => {\n      const handler = electrobunEventEmitter.events.window.resize;\n\n      const event = handler({\n        id,\n        x,\n        y,\n        width,\n        height,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n  },\n  maxRequestTime: 25000,\n});\n\nexport { zigRPC, zigProc };\n",
  "const MAX_ID = 1e10;\nconst DEFAULT_MAX_REQUEST_TIME = 1000;\nfunction missingTransportMethodError(methods, action) {\n    const methodsString = methods.map((method) => `\"${method}\"`).join(\", \");\n    return new Error(`This RPC instance cannot ${action} because the transport did not provide one or more of these methods: ${methodsString}`);\n}\nexport function _createRPC(\n/**\n * The options that will be used to configure the RPC instance.\n */\noptions = {}) {\n    // setters\n    // -------\n    let debugHooks = {};\n    /**\n     * Sets the debug hooks that will be used to debug the RPC instance.\n     */\n    function _setDebugHooks(newDebugHooks) {\n        debugHooks = newDebugHooks;\n    }\n    let transport = {};\n    /**\n     * Sets the transport that will be used to send and receive requests,\n     * responses and messages.\n     */\n    function setTransport(newTransport) {\n        if (transport.unregisterHandler)\n            transport.unregisterHandler();\n        transport = newTransport;\n        transport.registerHandler?.(handler);\n    }\n    let requestHandler = undefined;\n    /**\n     * Sets the function that will be used to handle requests from the\n     * remote RPC instance.\n     */\n    function setRequestHandler(\n    /**\n     * The function that will be set as the \"request handler\" function.\n     */\n    handler) {\n        if (typeof handler === \"function\") {\n            requestHandler = handler;\n            return;\n        }\n        requestHandler = (method, params) => {\n            const handlerFn = handler[method];\n            if (handlerFn)\n                return handlerFn(params);\n            const fallbackHandler = handler._;\n            if (!fallbackHandler)\n                throw new Error(`The requested method has no handler: ${method}`);\n            return fallbackHandler(method, params);\n        };\n    }\n    // options\n    // -------\n    const { maxRequestTime = DEFAULT_MAX_REQUEST_TIME } = options;\n    if (options.transport)\n        setTransport(options.transport);\n    if (options.requestHandler)\n        setRequestHandler(options.requestHandler);\n    if (options._debugHooks)\n        _setDebugHooks(options._debugHooks);\n    // requests\n    // --------\n    let lastRequestId = 0;\n    function getRequestId() {\n        if (lastRequestId <= MAX_ID)\n            return ++lastRequestId;\n        return (lastRequestId = 0);\n    }\n    const requestListeners = new Map();\n    const requestTimeouts = new Map();\n    /**\n     * Sends a request to the remote RPC endpoint and returns a promise\n     * with the response.\n     */\n    function requestFn(method, ...args) {\n        const params = args[0];\n        return new Promise((resolve, reject) => {\n            if (!transport.send)\n                throw missingTransportMethodError([\"send\"], \"make requests\");\n            const requestId = getRequestId();\n            const request = {\n                type: \"request\",\n                id: requestId,\n                method,\n                params,\n            };\n            requestListeners.set(requestId, { resolve, reject });\n            if (maxRequestTime !== Infinity)\n                requestTimeouts.set(requestId, setTimeout(() => {\n                    requestTimeouts.delete(requestId);\n                    reject(new Error(\"RPC request timed out.\"));\n                }, maxRequestTime));\n            debugHooks.onSend?.(request);\n            transport.send(request);\n        });\n    }\n    /**\n     * Sends a request to the remote RPC endpoint and returns a promise\n     * with the response.\n     *\n     * It can also be used as a proxy to send requests by using the request\n     * name as a property name.\n     *\n     * @example\n     *\n     * ```js\n     * await rpc.request(\"methodName\", { param: \"value\" });\n     * // or\n     * await rpc.request.methodName({ param: \"value\" });\n     * ```\n     */\n    const request = new Proxy(requestFn, {\n        get: (target, prop, receiver) => {\n            if (prop in target)\n                return Reflect.get(target, prop, receiver);\n            // @ts-expect-error Not very important.\n            return (params) => requestFn(prop, params);\n        },\n    });\n    const requestProxy = request;\n    // messages\n    // --------\n    function sendFn(\n    /**\n     * The name of the message to send.\n     */\n    message, ...args) {\n        const payload = args[0];\n        if (!transport.send)\n            throw missingTransportMethodError([\"send\"], \"send messages\");\n        const rpcMessage = {\n            type: \"message\",\n            id: message,\n            payload,\n        };\n        debugHooks.onSend?.(rpcMessage);\n        transport.send(rpcMessage);\n    }\n    /**\n     * Sends a message to the remote RPC endpoint.\n     *\n     * It can also be used as a proxy to send messages by using the message\n     * name as a property name.\n     *\n     * @example\n     *\n     * ```js\n     * rpc.send(\"messageName\", { content: \"value\" });\n     * // or\n     * rpc.send.messageName({ content: \"value\" });\n     * ```\n     */\n    const send = new Proxy(sendFn, {\n        get: (target, prop, receiver) => {\n            if (prop in target)\n                return Reflect.get(target, prop, receiver);\n            // @ts-expect-error Not very important.\n            return (payload) => sendFn(prop, payload);\n        },\n    });\n    const sendProxy = send;\n    const messageListeners = new Map();\n    const wildcardMessageListeners = new Set();\n    /**\n     * Adds a listener for a message (or all if \"*\" is used) from the\n     * remote RPC endpoint.\n     */\n    function addMessageListener(\n    /**\n     * The name of the message to listen to. Use \"*\" to listen to all\n     * messages.\n     */\n    message, \n    /**\n     * The function that will be called when a message is received.\n     */\n    listener) {\n        if (!transport.registerHandler)\n            throw missingTransportMethodError([\"registerHandler\"], \"register message listeners\");\n        if (message === \"*\") {\n            wildcardMessageListeners.add(listener);\n            return;\n        }\n        if (!messageListeners.has(message))\n            messageListeners.set(message, new Set());\n        messageListeners.get(message)?.add(listener);\n    }\n    /**\n     * Removes a listener for a message (or all if \"*\" is used) from the\n     * remote RPC endpoint.\n     */\n    function removeMessageListener(\n    /**\n     * The name of the message to remove the listener for. Use \"*\" to\n     * remove a listener for all messages.\n     */\n    message, \n    /**\n     * The listener function that will be removed.\n     */\n    listener) {\n        if (message === \"*\") {\n            wildcardMessageListeners.delete(listener);\n            return;\n        }\n        messageListeners.get(message)?.delete(listener);\n        if (messageListeners.get(message)?.size === 0)\n            messageListeners.delete(message);\n    }\n    // message handling\n    // ----------------\n    async function handler(message) {\n        debugHooks.onReceive?.(message);\n        if (!(\"type\" in message))\n            throw new Error(\"Message does not contain a type.\");\n        if (message.type === \"request\") {\n            if (!transport.send || !requestHandler)\n                throw missingTransportMethodError([\"send\", \"requestHandler\"], \"handle requests\");\n            const { id, method, params } = message;\n            let response;\n            try {\n                response = {\n                    type: \"response\",\n                    id,\n                    success: true,\n                    payload: await requestHandler(method, params),\n                };\n            }\n            catch (error) {\n                if (!(error instanceof Error))\n                    throw error;\n                response = {\n                    type: \"response\",\n                    id,\n                    success: false,\n                    error: error.message,\n                };\n            }\n            debugHooks.onSend?.(response);\n            transport.send(response);\n            return;\n        }\n        if (message.type === \"response\") {\n            const timeout = requestTimeouts.get(message.id);\n            if (timeout != null)\n                clearTimeout(timeout);\n            const { resolve, reject } = requestListeners.get(message.id) ?? {};\n            if (!message.success)\n                reject?.(new Error(message.error));\n            else\n                resolve?.(message.payload);\n            return;\n        }\n        if (message.type === \"message\") {\n            for (const listener of wildcardMessageListeners)\n                listener(message.id, message.payload);\n            const listeners = messageListeners.get(message.id);\n            if (!listeners)\n                return;\n            for (const listener of listeners)\n                listener(message.payload);\n            return;\n        }\n        throw new Error(`Unexpected RPC message type: ${message.type}`);\n    }\n    // proxy\n    // -----\n    /**\n     * A proxy object that can be used to send requests and messages.\n     */\n    const proxy = { send: sendProxy, request: requestProxy };\n    return {\n        setTransport,\n        setRequestHandler,\n        request,\n        requestProxy,\n        send,\n        sendProxy,\n        addMessageListener,\n        removeMessageListener,\n        proxy,\n        _setDebugHooks,\n    };\n}\n",
  "import { _createRPC } from \"./rpc.js\";\n/**\n * Creates an RPC instance that can send and receive requests, responses\n * and messages.\n */\nexport function createRPC(\n/**\n * The options that will be used to configure the RPC instance.\n */\noptions) {\n    return _createRPC(options);\n}\n/**\n * Creates an RPC instance as a client. The passed schema represents\n * the remote RPC's (server) schema.\n */\nexport function createClientRPC(\n/**\n * The options that will be used to configure the RPC instance.\n */\noptions) {\n    return _createRPC(options);\n}\n/**\n * Creates an RPC instance as a server. The passed schema represents\n * this RPC's (server) schema.\n */\nexport function createServerRPC(\n/**\n * The options that will be used to configure the RPC instance.\n */\noptions) {\n    return _createRPC(options);\n}\n",
  "import { join, resolve } from \"path\";\nimport { type RPCSchema, type RPCTransport, createRPC } from \"rpc-anywhere\";\nimport { execSync } from \"child_process\";\nimport * as fs from \"fs\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport { BrowserView } from \"../core/BrowserView\";\nimport { Updater } from \"../core/Updater\";\nimport { Tray } from \"../core/Tray\";\nconst CHUNK_SIZE = 1024 * 4; // 4KB\n// todo (yoav): webviewBinaryPath and ELECTROBUN_VIEWS_FOLDER should be passed in as cli/env args by the launcher binary\n// will likely be different on different platforms. Right now these are hardcoded for relative paths inside the mac app bundle.\nconst webviewBinaryPath = join(\"native\", \"webview\");\n\nconst hash = await Updater.localInfo.hash();\n// Note: we use the build's hash to separate from different apps and different builds\n// but we also want a randomId to separate different instances of the same app\n// todo (yoav): since collisions can crash the app add a function that checks if the\n// file exists first\nconst randomId = Math.random().toString(36).substring(7);\nconst mainPipe = `/private/tmp/electrobun_ipc_pipe_${hash}_${randomId}_main_in`;\n\ntry {\n  execSync(\"mkfifo \" + mainPipe);\n} catch (e) {\n  console.log(\"pipe out already exists\");\n}\n\nconst zigProc = Bun.spawn([webviewBinaryPath], {\n  stdin: \"pipe\",\n  stdout: \"pipe\",\n  env: {\n    ...process.env,\n    ELECTROBUN_VIEWS_FOLDER: resolve(\"../Resources/app/views\"),\n    MAIN_PIPE_IN: mainPipe,\n  },\n  onExit: (_zigProc) => {\n    // right now just exit the whole app if the webview process dies.\n    // in the future we probably want to try spin it back up aagain\n    process.exit(0);\n  },\n});\n\nprocess.on(\"SIGINT\", (code) => {\n  // todo (yoav): maybe send a friendly signal to the webviews to let them know\n  // we're shutting down\n  // clean up the webview process when the bun process dies.\n  zigProc.kill();\n  // fs.unlinkSync(mainPipe);\n  process.exit();\n});\n\nprocess.on(\"exit\", (code) => {\n  // Note: this can happen when the bun process crashes\n  // make sure that zigProc is killed so it doesn't linger around\n  zigProc.kill();\n});\n\nconst inStream = fs.createWriteStream(mainPipe, {\n  flags: \"r+\",\n});\n\nfunction createStdioTransport(proc): RPCTransport {\n  return {\n    send(message) {\n      try {\n        // TODO: this is the same chunking code as browserview pipes,\n        // should dedupe\n        const messageString = JSON.stringify(message) + \"\\n\";\n\n        let offset = 0;\n        while (offset < messageString.length) {\n          const chunk = messageString.slice(offset, offset + CHUNK_SIZE);\n          inStream.write(chunk);\n          offset += CHUNK_SIZE;\n        }\n\n        // Ensure the newline is written after all chunks\n        inStream.write(\"\\n\");\n      } catch (error) {\n        console.error(\"bun: failed to serialize message to zig\", error);\n      }\n    },\n    registerHandler(handler) {\n      async function readStream(stream) {\n        const reader = stream.getReader();\n        let buffer = \"\";\n\n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            buffer += new TextDecoder().decode(value);\n            let eolIndex;\n            // Process each line contained in the buffer\n            while ((eolIndex = buffer.indexOf(\"\\n\")) >= 0) {\n              const line = buffer.slice(0, eolIndex).trim();\n              buffer = buffer.slice(eolIndex + 1);\n              if (line) {\n                try {\n                  const event = JSON.parse(line);\n                  handler(event);\n                } catch (error) {\n                  // Non-json things are just bubbled up to the console.\n                  console.error(\"zig: \", line);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error reading from stream:\", error);\n        } finally {\n          reader.releaseLock();\n        }\n      }\n\n      readStream(proc.stdout);\n    },\n  };\n}\n\n// todo: consider renaming to TrayMenuItemConfig\nexport type MenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<MenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\nexport type ApplicationMenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type?: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    }\n  | {\n      type?: \"normal\";\n      label?: string;\n      tooltip?: string;\n      role?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\n// todo (yoav): move this stuff to bun/rpc/zig.ts\ntype ZigHandlers = RPCSchema<{\n  requests: {\n    createWindow: {\n      params: {\n        id: number;\n        url: string | null;\n        html: string | null;\n        title: string;\n        frame: {\n          width: number;\n          height: number;\n          x: number;\n          y: number;\n        };\n        styleMask: {\n          Borderless: boolean;\n          Titled: boolean;\n          Closable: boolean;\n          Miniaturizable: boolean;\n          Resizable: boolean;\n          UnifiedTitleAndToolbar: boolean;\n          FullScreen: boolean;\n          FullSizeContentView: boolean;\n          UtilityWindow: boolean;\n          DocModalWindow: boolean;\n          NonactivatingPanel: boolean;\n          HUDWindow: boolean;\n        };\n        titleBarStyle: string;\n      };\n      response: void;\n    };\n    createWebview: {\n      params: {\n        id: number;\n        hostWebviewId: number | null;\n        pipePrefix: string;\n        url: string | null;\n        html: string | null;\n        partition: string | null;\n        preload: string | null;\n        frame: {\n          x: number;\n          y: number;\n          width: number;\n          height: number;\n        };\n        autoResize: boolean;\n      };\n      response: void;\n    };\n\n    addWebviewToWindow: {\n      params: {\n        windowId: number;\n        webviewId: number;\n      };\n      response: void;\n    };\n\n    loadURL: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: void;\n    };\n    loadHTML: {\n      params: {\n        webviewId: number;\n        html: string;\n      };\n      response: void;\n    };\n\n    setTitle: {\n      params: {\n        winId: number;\n        title: string;\n      };\n      response: void;\n    };\n\n    closeWindow: {\n      params: {\n        winId: number;\n      };\n      response: void;\n    };\n\n    // fs\n    moveToTrash: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    showItemInFolder: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    openFileDialog: {\n      params: {\n        startingFolder: string | null;\n        allowedFileTypes: string | null;\n        canChooseFiles: boolean;\n        canChooseDirectory: boolean;\n        allowsMultipleSelection: boolean;\n      };\n      response: { openFileDialogResponse: string };\n    };\n\n    // tray and menu\n    createTray: {\n      params: {\n        id: number;\n        title: string;\n        image: string;\n        template: boolean;\n        width: number;\n        height: number;\n      };\n      response: void;\n    };\n    setTrayTitle: {\n      params: {\n        id: number;\n        title: string;\n      };\n      response: void;\n    };\n    setTrayImage: {\n      params: {\n        id: number;\n        image: string;\n      };\n      response: void;\n    };\n    setTrayMenu: {\n      params: {\n        id: number;\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    setApplicationMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    showContextMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n  };\n}>;\n\ntype BunHandlers = RPCSchema<{\n  requests: {\n    decideNavigation: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: {\n        allow: boolean;\n      };\n    };\n    syncRequest: {\n      params: {\n        webviewId: number;\n        request: string;\n      };\n      response: {\n        payload: string;\n      };\n    };\n    // todo: make these messages instead of requests\n    log: {\n      params: {\n        msg: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    trayEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    applicationMenuEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    contextMenuEvent: {\n      params: {\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    webviewEvent: {\n      params: {\n        id: number;\n        eventName: string;\n        detail: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowClose: {\n      params: {\n        id: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowMove: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowResize: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n  };\n}>;\n\nconst zigRPC = createRPC<BunHandlers, ZigHandlers>({\n  transport: createStdioTransport(zigProc),\n  requestHandler: {\n    decideNavigation: ({ webviewId, url }) => {\n      const willNavigate = electrobunEventEmitter.events.webview.willNavigate({\n        url,\n        webviewId,\n      });\n\n      let result;\n      // global will-navigate event\n      result = electrobunEventEmitter.emitEvent(willNavigate);\n\n      result = electrobunEventEmitter.emitEvent(willNavigate, webviewId);\n\n      if (willNavigate.responseWasSet) {\n        return willNavigate.response || { allow: true };\n      } else {\n        return { allow: true };\n      }\n    },\n    syncRequest: ({ webviewId, request: requestStr }) => {\n      const webview = BrowserView.getById(webviewId);\n      const { method, params } = JSON.parse(requestStr);\n\n      if (!webview) {\n        const err = `error: could not find webview with id ${webviewId}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!method) {\n        const err = `error: request missing a method`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!webview.syncRpc || !webview.syncRpc[method]) {\n        const err = `error: webview does not have a handler for method ${method}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      const handler = webview.syncRpc[method];\n      var response;\n      try {\n        response = handler(params);\n        // Note: Stringify(undefined) returns undefined,\n        // if we send undefined as the payload it'll crash\n        // so send an empty string which is a better analog for\n        // undefined json string\n        if (response === undefined) {\n          response = \"\";\n        }\n      } catch (err) {\n        console.log(err);\n        console.log(\"syncRPC failed with\", { method, params });\n        return { payload: String(err) };\n      }\n\n      const payload = JSON.stringify(response);\n      return { payload };\n    },\n    log: ({ msg }) => {\n      console.log(\"zig: \", msg);\n      return { success: true };\n    },\n    trayEvent: ({ id, action }) => {\n      const tray = Tray.getById(id);\n      if (!tray) {\n        return { success: true };\n      }\n\n      const event = electrobunEventEmitter.events.tray.trayClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    applicationMenuEvent: ({ id, action }) => {\n      const event = electrobunEventEmitter.events.app.applicationMenuClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    contextMenuEvent: ({ action }) => {\n      const event = electrobunEventEmitter.events.app.contextMenuClicked({\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    webviewEvent: ({ id, eventName, detail }) => {\n      const eventMap = {\n        \"did-navigate\": \"didNavigate\",\n        \"did-navigate-in-page\": \"didNavigateInPage\",\n        \"did-commit-navigation\": \"didCommitNavigation\",\n        \"dom-ready\": \"domReady\",\n        \"new-window-open\": \"newWindowOpen\",\n      };\n\n      // todo: the events map should use the same hyphenated names instead of camelCase\n      const handler =\n        electrobunEventEmitter.events.webview[eventMap[eventName]];\n\n      if (!handler) {\n        console.log(`!!!no handler for webview event ${eventName}`);\n        return { success: false };\n      }\n\n      const event = handler({\n        id,\n        detail,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    windowClose: ({ id }) => {\n      const handler = electrobunEventEmitter.events.window.close;\n\n      const event = handler({\n        id,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowMove: ({ id, x, y }) => {\n      const handler = electrobunEventEmitter.events.window.move;\n\n      const event = handler({\n        id,\n        x,\n        y,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowResize: ({ id, x, y, width, height }) => {\n      const handler = electrobunEventEmitter.events.window.resize;\n\n      const event = handler({\n        id,\n        x,\n        y,\n        width,\n        height,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n  },\n  maxRequestTime: 25000,\n});\n\nexport { zigRPC, zigProc };\n",
  "import { zigRPC } from \"../proc/zig\";\nimport * as fs from \"fs\";\nimport { execSync } from \"child_process\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport {\n  type RPCSchema,\n  type RPCRequestHandler,\n  type RPCMessageHandlerFn,\n  type WildcardRPCMessageHandlerFn,\n  type RPCOptions,\n  createRPC,\n} from \"rpc-anywhere\";\nimport { Updater } from \"./Updater\";\nimport type { BuiltinBunToWebviewSchema } from \"../../browser/builtinrpcSchema\";\n\nconst BrowserViewMap = {};\nlet nextWebviewId = 1;\n\nconst CHUNK_SIZE = 1024 * 4; // 4KB\n\ntype BrowserViewOptions<T = undefined> = {\n  url: string | null;\n  html: string | null;\n  preload: string | null;\n  partition: string | null;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  rpc: T;\n  syncRpc: { [method: string]: (params: any) => any };\n  hostWebviewId: number;\n  autoResize: boolean;\n};\n\ninterface ElectrobunWebviewRPCSChema {\n  bun: RPCSchema;\n  webview: RPCSchema;\n}\n\nconst defaultOptions: BrowserViewOptions = {\n  url: \"https://electrobun.dev\",\n  html: null,\n  preload: null,\n  frame: {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  },\n};\n\nconst internalSyncRpcHandlers = {\n  webviewTagInit: ({\n    hostWebviewId,\n    windowId,\n    url,\n    html,\n    preload,\n    partition,\n    frame,\n  }) => {\n    const webviewForTag = new BrowserView({\n      url,\n      html,\n      preload,\n      partition,\n      frame,\n      hostWebviewId,\n      autoResize: false,\n    });\n\n    // Note: we have to give it a couple of ticks to fully create the browserview\n    // which has a settimout init() which calls rpc that has a settimeout and all the serialization/deserialization\n\n    // TODO: we really need a better way to handle the whole view creation flow and\n    // maybe an onready event or something.\n    setTimeout(() => {\n      zigRPC.request.addWebviewToWindow({\n        windowId: windowId,\n        webviewId: webviewForTag.id,\n      });\n\n      if (url) {\n        webviewForTag.loadURL(url);\n      } else if (html) {\n        webviewForTag.loadHTML(html);\n      }\n    }, 100);\n\n    return webviewForTag.id;\n  },\n};\n\nconst hash = await Updater.localInfo.hash();\n// Note: we use the build's hash to separate from different apps and different builds\n// but we also want a randomId to separate different instances of the same app\nconst randomId = Math.random().toString(36).substring(7);\n\nexport class BrowserView<T> {\n  id: number = nextWebviewId++;\n  hostWebviewId?: number;\n  url: string | null = null;\n  html: string | null = null;\n  preload: string | null = null;\n  partition: string | null = null;\n  autoResize: boolean = true;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } = {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  };\n  pipePrefix: string;\n  inStream: fs.WriteStream;\n  outStream: fs.ReadStream;\n  rpc?: T;\n  syncRpc?: { [method: string]: (params: any) => any };\n\n  constructor(options: Partial<BrowserViewOptions<T>> = defaultOptions) {\n    this.url = options.url || defaultOptions.url;\n    this.html = options.html || defaultOptions.html;\n    this.preload = options.preload || defaultOptions.preload;\n    this.frame = options.frame\n      ? { ...defaultOptions.frame, ...options.frame }\n      : { ...defaultOptions.frame };\n    this.rpc = options.rpc;\n    this.syncRpc = { ...(options.syncRpc || {}), ...internalSyncRpcHandlers };\n    this.partition = options.partition || null;\n    // todo (yoav): since collisions can crash the app add a function that checks if the\n    // file exists first\n    this.pipePrefix = `/private/tmp/electrobun_ipc_pipe_${hash}_${randomId}_${this.id}`;\n    this.hostWebviewId = options.hostWebviewId;\n    this.autoResize = options.autoResize === false ? false : true;\n\n    this.init();\n  }\n\n  init() {\n    // TODO: add a then to this that fires an onReady event\n    zigRPC.request.createWebview({\n      id: this.id,\n      hostWebviewId: this.hostWebviewId || null,\n      pipePrefix: this.pipePrefix,\n      partition: this.partition,\n      // TODO: decide whether we want to keep sending url/html\n      // here, if we're manually calling loadURL/loadHTML below\n      // then we can remove it from the api here\n      url: this.url,\n      html: this.html,\n      preload: this.preload,\n      frame: {\n        width: this.frame.width,\n        height: this.frame.height,\n        x: this.frame.x,\n        y: this.frame.y,\n      },\n      autoResize: this.autoResize,\n    });\n\n    this.createStreams();\n\n    BrowserViewMap[this.id] = this;\n  }\n\n  createStreams() {\n    const webviewPipeIn = this.pipePrefix + \"_in\";\n    const webviewPipeOut = this.pipePrefix + \"_out\";\n\n    try {\n      execSync(\"mkfifo \" + webviewPipeOut);\n    } catch (e) {\n      console.log(\"pipe out already exists\");\n    }\n\n    try {\n      execSync(\"mkfifo \" + webviewPipeIn);\n    } catch (e) {\n      console.log(\"pipe in already exists\");\n    }\n\n    const inStream = fs.createWriteStream(webviewPipeIn, {\n      flags: \"r+\",\n    });\n\n    // todo: something has to be written to it to open it\n    // look into this\n    inStream.write(\"\\n\");\n\n    this.inStream = inStream;\n\n    // Open the named pipe for reading\n\n    const outStream = fs.createReadStream(webviewPipeOut, {\n      flags: \"r+\",\n    });\n\n    this.outStream = outStream;\n\n    if (this.rpc) {\n      this.rpc.setTransport(this.createTransport());\n    }\n  }\n\n  sendMessageToWebview(jsonMessage) {\n    const stringifiedMessage =\n      typeof jsonMessage === \"string\"\n        ? jsonMessage\n        : JSON.stringify(jsonMessage);\n    // todo (yoav): make this a shared const with the browser api\n    const wrappedMessage = `window.__electrobun.receiveMessageFromBun(${stringifiedMessage})`;\n    this.executeJavascript(wrappedMessage);\n  }\n\n  // Note: the OS has a buffer limit on named pipes. If we overflow it\n  // it won't trigger the kevent for zig to read the pipe and we'll be stuck.\n  // so we have to chunk it\n  executeJavascript(js: string) {\n    let offset = 0;\n    while (offset < js.length) {\n      const chunk = js.slice(offset, offset + CHUNK_SIZE);\n      this.inStream.write(chunk);\n      offset += CHUNK_SIZE;\n    }\n\n    // Ensure the newline is written after all chunks\n    this.inStream.write(\"\\n\");\n  }\n\n  loadURL(url: string) {\n    this.url = url;\n    zigRPC.request.loadURL({ webviewId: this.id, url: this.url });\n  }\n\n  loadHTML(html: string) {\n    this.html = html;\n    zigRPC.request.loadHTML({ webviewId: this.id, html: this.html });\n  }\n\n  // todo (yoav): move this to a class that also has off, append, prepend, etc.\n  // name should only allow browserView events\n  // Note: normalize event names to willNavigate instead of ['will-navigate'] to save\n  // 5 characters per usage and allow minification to be more effective.\n  on(\n    name:\n      | \"will-navigate\"\n      | \"did-navigate\"\n      | \"did-navigate-in-page\"\n      | \"did-commit-navigation\"\n      | \"dom-ready\",\n    handler\n  ) {\n    const specificName = `${name}-${this.id}`;\n    electrobunEventEmitter.on(specificName, handler);\n  }\n\n  createTransport = () => {\n    const that = this;\n\n    return {\n      send(message) {\n        // todo (yoav): note: this is the same as the zig transport\n        try {\n          const messageString = JSON.stringify(message);\n          that.sendMessageToWebview(messageString);\n        } catch (error) {\n          console.error(\"bun: failed to serialize message to webview\", error);\n        }\n      },\n      registerHandler(handler) {\n        let buffer = \"\";\n        // todo (yoav): readStream function is identical to the one in zig.ts\n        // todo: There seems to be a bug in bun where if you open multiple windows at the same time\n        // that.outStream.on(\"data\") doesn't register the handler for some of them so add a timeout to\n        // help ensure it does.\n        // could be a delay in the pipe creation and the way bun lazy loads things where it just doesn't\n        // subscribe to data events properly.\n        // hopefully this is fixed in a bun version bump.\n        // readable streams have an on('ready') event but it fires too soon to be useful here.\n        setTimeout(() => {\n          that.outStream.on(\"data\", (chunk) => {\n            buffer += chunk.toString();\n            let eolIndex;\n\n            while ((eolIndex = buffer.indexOf(\"\\n\")) >= 0) {\n              const line = buffer.slice(0, eolIndex).trim();\n              buffer = buffer.slice(eolIndex + 1);\n              if (line) {\n                try {\n                  const event = JSON.parse(line);\n                  handler(event);\n                } catch (error) {\n                  // Non-json things are just bubbled up to the console.\n                  console.error(\"webview: \", line);\n                }\n              }\n            }\n          });\n        }, 500);\n      },\n    };\n  };\n\n  static getById(id: number) {\n    return BrowserViewMap[id];\n  }\n\n  static getAll() {\n    return Object.values(BrowserViewMap);\n  }\n\n  static defineRPC<\n    Schema extends ElectrobunWebviewRPCSChema,\n    BunSchema extends RPCSchema = Schema[\"bun\"],\n    WebviewSchema extends RPCSchema = Schema[\"webview\"]\n  >(config: {\n    maxRequestTime?: number;\n    handlers: {\n      requests?: RPCRequestHandler<BunSchema[\"requests\"]>;\n      messages?: {\n        [key in keyof BunSchema[\"messages\"]]: RPCMessageHandlerFn<\n          BunSchema[\"messages\"],\n          key\n        >;\n      } & {\n        \"*\"?: WildcardRPCMessageHandlerFn<BunSchema[\"messages\"]>;\n      };\n    };\n  }) {\n    // Note: RPC Anywhere requires defining the requests that a schema handles and the messages that a schema sends.\n    // eg: BunSchema {\n    //   requests: // ... requests bun handles, sent by webview\n    //   messages: // ... messages bun sends, handled by webview\n    // }\n    // In some generlized contexts that makes sense,\n    // In the Electrobun context it can feel a bit counter-intuitive so we swap this around a bit. In Electrobun, the\n    // webview and bun are known endpoints so we simplify schema definitions by combining them.\n    // Schema {\n    //   bun: BunSchema {\n    //      requests: // ... requests bun handles, sent by webview,\n    //      messages: // ... messages bun handles, sent by webview\n    //    },\n    //   webview: WebviewSchema {\n    //      requests: // ... requests webview handles, sent by bun,\n    //      messages: // ... messages webview handles, sent by bun\n    //    },\n    // }\n    // This way from bun, webview.rpc.request.getTitle() and webview.rpc.send.someMessage maps to the schema\n    // MySchema.webview.requests.getTitle and MySchema.webview.messages.someMessage\n    // and in the webview, Electroview.rpc.request.getFileContents maps to\n    // MySchema.bun.requests.getFileContents.\n    // electrobun also treats messages as \"requests that we don't wait for to complete\", and normalizes specifying the\n    // handlers for them alongside request handlers.\n\n    type mixedWebviewSchema = {\n      requests: BunSchema[\"requests\"];\n      messages: WebviewSchema[\"messages\"];\n    };\n\n    type mixedBunSchema = {\n      requests: WebviewSchema[\"requests\"] &\n        BuiltinBunToWebviewSchema[\"requests\"];\n      messages: BunSchema[\"messages\"];\n    };\n\n    const rpcOptions = {\n      maxRequestTime: config.maxRequestTime,\n      requestHandler: config.handlers.requests,\n      transport: {\n        // Note: RPC Anywhere will throw if you try add a message listener if transport.registerHandler is falsey\n        registerHandler: () => {},\n      },\n    } as RPCOptions<mixedWebviewSchema, mixedBunSchema>;\n\n    const rpc = createRPC<mixedWebviewSchema, mixedBunSchema>(rpcOptions);\n\n    const messageHandlers = config.handlers.messages;\n    if (messageHandlers) {\n      // note: this can only be done once there is a transport\n      // @ts-ignore - this is due to all the schema mixing we're doing, fine to ignore\n      // while types in here are borked, they resolve correctly/bubble up to the defineRPC call site.\n      rpc.addMessageListener(\n        \"*\",\n        (messageName: keyof BunSchema[\"messages\"], payload) => {\n          const globalHandler = messageHandlers[\"*\"];\n          if (globalHandler) {\n            globalHandler(messageName, payload);\n          }\n\n          const messageHandler = messageHandlers[messageName];\n          if (messageHandler) {\n            messageHandler(payload);\n          }\n        }\n      );\n    }\n\n    return rpc;\n  }\n}\n",
  "import { join, dirname, resolve } from \"path\";\nimport { homedir } from \"os\";\nimport { renameSync, unlinkSync, mkdirSync, rmdirSync, statSync } from \"fs\";\nimport tar from \"tar\";\nimport { ZstdInit } from \"@oneidentity/zstd-js/wasm\";\n\nconst appSupportDir = join(homedir(), \"Library\", \"Application Support\");\n\n// todo (yoav): share type with cli\nlet localInfo: {\n  version: string;\n  hash: string;\n  bucketUrl: string;\n  channel: string;\n  name: string;\n  identifier: string;\n};\n\nlet updateInfo: {\n  version: string;\n  hash: string;\n  updateAvailable: boolean;\n  updateReady: boolean;\n  error: string;\n};\n\nconst Updater = {\n  // workaround for some weird state stuff in this old version of bun\n  // todo: revisit after updating to the latest bun\n  updateInfo: () => {\n    return updateInfo;\n  },\n  // todo: allow switching channels, by default will check the current channel\n  checkForUpdate: async () => {\n    const localInfo = await Updater.getLocallocalInfo();\n\n    if (localInfo.channel === \"dev\") {\n      return {\n        version: localInfo.version,\n        hash: localInfo.hash,\n        updateAvailable: false,\n        updateReady: false,\n        error: \"\",\n      };\n    }\n\n    const channelBucketUrl = await Updater.channelBucketUrl();\n\n    const cacheBuster = Math.random().toString(36).substring(7);\n    const updateInfoResponse = await fetch(\n      join(channelBucketUrl, `update.json?${cacheBuster}`)\n    );\n\n    if (updateInfoResponse.ok) {\n      updateInfo = await updateInfoResponse.json();\n\n      if (updateInfo.hash !== localInfo.hash) {\n        updateInfo.updateAvailable = true;\n      }\n    } else {\n      console.error(\"Failed to fetch update info\", updateInfoResponse);\n    }\n\n    return updateInfo;\n  },\n\n  downloadUpdate: async () => {\n    const appDataFolder = await Updater.appDataFolder();\n    const channelBucketUrl = await Updater.channelBucketUrl();\n    const appFileName = localInfo.name;\n\n    let currentHash = (await Updater.getLocallocalInfo()).hash;\n    let latestHash = (await Updater.checkForUpdate()).hash;\n\n    let currentTarPath = join(\n      appDataFolder,\n      \"self-extraction\",\n      `${currentHash}.tar`\n    );\n    const latestTarPath = join(\n      appDataFolder,\n      \"self-extraction\",\n      `${latestHash}.tar`\n    );\n\n    const seenHashes = [];\n\n    // todo (yoav): add a check to the while loop that checks for a hash we've seen before\n    // so that update loops that are cyclical can be broken\n    if (!(await Bun.file(latestTarPath).exists())) {\n      while (currentHash !== latestHash) {\n        seenHashes.push(currentHash);\n        const currentTar = Bun.file(currentTarPath);\n\n        if (!(await currentTar.exists())) {\n          // tar file of the current version not found\n          // so we can't patch it. We need the byte-for-byte tar file\n          // so break out and download the full version\n          break;\n        }\n\n        // check if there's a patch file for it\n        const patchResponse = await fetch(\n          join(channelBucketUrl, `${currentHash}.patch`)\n        );\n\n        if (!patchResponse.ok) {\n          // patch not found\n          break;\n        }\n\n        // The patch file's name is the hash of the \"from\" version\n        const patchFilePath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${currentHash}.patch`\n        );\n        await Bun.write(patchFilePath, await patchResponse.arrayBuffer());\n        // patch it to a tmp name\n        const tmpPatchedTarFilePath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `from-${currentHash}.tar`\n        );\n\n        // Note: cwd should be Contents/MacOS/ where the binaries are in the amc app bundle\n        try {\n          Bun.spawnSync([\n            \"bspatch\",\n            currentTarPath,\n            tmpPatchedTarFilePath,\n            patchFilePath,\n          ]);\n        } catch (error) {\n          break;\n        }\n\n        let versionSubpath = \"\";\n        const untarDir = join(appDataFolder, \"self-extraction\", \"tmpuntar\");\n        mkdirSync(untarDir, { recursive: true });\n\n        // extract just the version.json from the patched tar file so we can see what hash it is now\n        await tar.x({\n          // gzip: false,\n          file: tmpPatchedTarFilePath,\n          cwd: untarDir,\n          filter: (path, stat) => {\n            if (path.endsWith(\"Resources/version.json\")) {\n              versionSubpath = path;\n              return true;\n            } else {\n              return false;\n            }\n          },\n        });\n\n        const currentVersionJson = await Bun.file(\n          join(untarDir, versionSubpath)\n        ).json();\n        const nextHash = currentVersionJson.hash;\n\n        if (seenHashes.includes(nextHash)) {\n          console.log(\"Warning: cyclical update detected\");\n          break;\n        }\n\n        seenHashes.push(nextHash);\n\n        if (!nextHash) {\n          break;\n        }\n        // Sync the patched tar file to the new hash\n        const updatedTarPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${nextHash}.tar`\n        );\n        renameSync(tmpPatchedTarFilePath, updatedTarPath);\n\n        // delete the old tar file\n        unlinkSync(currentTarPath);\n        unlinkSync(patchFilePath);\n        rmdirSync(untarDir, { recursive: true });\n\n        currentHash = nextHash;\n        currentTarPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${currentHash}.tar`\n        );\n        // loop through applying patches until we reach the latest version\n        // if we get stuck then exit and just download the full latest version\n      }\n\n      // If we weren't able to apply patches to the current version,\n      // then just download it and unpack it\n      if (currentHash !== latestHash) {\n        const cacheBuster = Math.random().toString(36).substring(7);\n        const urlToLatestTarball = join(\n          channelBucketUrl,\n          `${appFileName}.app.tar.zst`\n        );\n        const prevVersionCompressedTarballPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          \"latest.tar.zst\"\n        );\n        const response = await fetch(urlToLatestTarball + `?${cacheBuster}`);\n\n        if (response.ok && response.body) {\n          const reader = response.body.getReader();\n\n          const writer = Bun.file(prevVersionCompressedTarballPath).writer();\n\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            await writer.write(value);\n          }\n          await writer.flush();\n          writer.end();\n        } else {\n          console.log(\"latest version not found at: \", urlToLatestTarball);\n        }\n\n        await ZstdInit().then(async ({ ZstdSimple }) => {\n          const data = new Uint8Array(\n            await Bun.file(prevVersionCompressedTarballPath).arrayBuffer()\n          );\n          const uncompressedData = ZstdSimple.decompress(data);\n\n          await Bun.write(latestTarPath, uncompressedData);\n        });\n\n        unlinkSync(prevVersionCompressedTarballPath);\n        try {\n          unlinkSync(currentTarPath);\n        } catch (error) {\n          // Note: ignore the error. it may have already been deleted by the patching process\n          // if the patching process only got halfway\n        }\n      }\n    }\n\n    // Note: Bun.file().exists() caches the result, so we nee d an new instance of Bun.file() here\n    // to check again\n    if (await Bun.file(latestTarPath).exists()) {\n      // download patch for this version, apply it.\n      // check for patch from that tar and apply it, until it matches the latest version\n      // as a fallback it should just download and unpack the latest version\n      updateInfo.updateReady = true;\n    } else {\n      updateInfo.error = \"Failed to download latest version\";\n    }\n  },\n\n  // todo (yoav): this should emit an event so app can cleanup or block the restart\n  // todo (yoav): rename this to quitAndApplyUpdate or something\n  applyUpdate: async () => {\n    if (updateInfo?.updateReady) {\n      const appDataFolder = await Updater.appDataFolder();\n      const extractionFolder = join(appDataFolder, \"self-extraction\");\n      let latestHash = (await Updater.checkForUpdate()).hash;\n      const latestTarPath = join(extractionFolder, `${latestHash}.tar`);\n\n      let appBundleSubpath: string = \"\";\n\n      if (await Bun.file(latestTarPath).exists()) {\n        await tar.x({\n          // gzip: false,\n          file: latestTarPath,\n          cwd: extractionFolder,\n          onentry: (entry) => {\n            // find the first .app bundle in the tarball\n            // Some apps may have nested .app bundles\n            if (!appBundleSubpath && entry.path.endsWith(\".app/\")) {\n              appBundleSubpath = entry.path;\n            }\n          },\n        });\n\n        if (!appBundleSubpath) {\n          console.error(\"Failed to find app bundle in tarball\");\n          return;\n        }\n\n        // Note: resolve here removes the extra trailing / that the tar file adds\n        const newAppBundlePath = resolve(\n          join(extractionFolder, appBundleSubpath)\n        );\n        // Note: dirname(process.execPath) is the path to the running app bundle's\n        // Contents/MacOS directory\n        const runningAppBundlePath = resolve(\n          dirname(process.execPath),\n          \"..\",\n          \"..\"\n        );\n        const backupAppBundlePath = join(extractionFolder, \"backup.app\");\n\n        try {\n          // const backupState = statSync(backupAppBundlePath);\n          if (statSync(backupAppBundlePath, { throwIfNoEntry: false })) {\n            rmdirSync(backupAppBundlePath, { recursive: true });\n          } else {\n            console.log(\"backupAppBundlePath does not exist\");\n          }\n          renameSync(runningAppBundlePath, backupAppBundlePath);\n          renameSync(newAppBundlePath, runningAppBundlePath);\n        } catch (error) {\n          console.error(\"Failed to replace app with new version\", error);\n          return;\n        }\n\n        await Bun.spawn([\"open\", runningAppBundlePath]);\n        process.exit(0);\n      }\n    }\n  },\n\n  channelBucketUrl: async () => {\n    await Updater.getLocallocalInfo();\n    // todo: tmp hardcode canary\n    return join(localInfo.bucketUrl, localInfo.channel);\n  },\n\n  appDataFolder: async () => {\n    await Updater.getLocallocalInfo();\n    const appDataFolder = join(\n      appSupportDir,\n      localInfo.identifier,\n      localInfo.name\n    );\n\n    return appDataFolder;\n  },\n\n  // TODO: consider moving this from \"Updater.localInfo\" to \"BuildVars\"\n  localInfo: {\n    version: async () => {\n      return (await Updater.getLocallocalInfo()).version;\n    },\n    hash: async () => {\n      return (await Updater.getLocallocalInfo()).hash;\n    },\n    channel: async () => {\n      return (await Updater.getLocallocalInfo()).channel;\n    },\n    bucketUrl: async () => {\n      return (await Updater.getLocallocalInfo()).bucketUrl;\n    },\n  },\n\n  getLocallocalInfo: async () => {\n    if (localInfo) {\n      return localInfo;\n    }\n\n    try {\n      localInfo = await Bun.file(\"../Resources/version.json\").json();\n      return localInfo;\n    } catch (error) {\n      // Handle the error\n      console.error(\"Failed to read version.json\", error);\n\n      // Then rethrow so the app crashes\n      throw error;\n    }\n  },\n};\n\nexport { Updater };\n",
  "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar A=function(I,g){return(A=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(A,I){A.__proto__=I}||function(A,I){for(var g in I)Object.prototype.hasOwnProperty.call(I,g)&&(A[g]=I[g])})(I,g)};function I(I,g){if(\"function\"!=typeof g&&null!==g)throw new TypeError(\"Class extends value \"+String(g)+\" is not a constructor or null\");function B(){this.constructor=I}A(I,g),I.prototype=null===g?Object.create(g):(B.prototype=g.prototype,new B)}function g(A,I,g,B){return new(g||(g=Promise))((function(C,Q){function E(A){try{o(B.next(A))}catch(A){Q(A)}}function i(A){try{o(B.throw(A))}catch(A){Q(A)}}function o(A){var I;A.done?C(A.value):(I=A.value,I instanceof g?I:new g((function(A){A(I)}))).then(E,i)}o((B=B.apply(A,I||[])).next())}))}function B(A,I){var g,B,C,Q,E={label:0,sent:function(){if(1&C[0])throw C[1];return C[1]},trys:[],ops:[]};return Q={next:i(0),throw:i(1),return:i(2)},\"function\"==typeof Symbol&&(Q[Symbol.iterator]=function(){return this}),Q;function i(Q){return function(i){return function(Q){if(g)throw new TypeError(\"Generator is already executing.\");for(;E;)try{if(g=1,B&&(C=2&Q[0]?B.return:Q[0]?B.throw||((C=B.return)&&C.call(B),0):B.next)&&!(C=C.call(B,Q[1])).done)return C;switch(B=0,C&&(Q=[2&Q[0],C.value]),Q[0]){case 0:case 1:C=Q;break;case 4:return E.label++,{value:Q[1],done:!1};case 5:E.label++,B=Q[1],Q=[0];continue;case 7:Q=E.ops.pop(),E.trys.pop();continue;default:if(!(C=E.trys,(C=C.length>0&&C[C.length-1])||6!==Q[0]&&2!==Q[0])){E=0;continue}if(3===Q[0]&&(!C||Q[1]>C[0]&&Q[1]<C[3])){E.label=Q[1];break}if(6===Q[0]&&E.label<C[1]){E.label=C[1],C=Q;break}if(C&&E.label<C[2]){E.label=C[2],E.ops.push(Q);break}C[2]&&E.ops.pop(),E.trys.pop();continue}Q=I.call(A,E)}catch(A){Q=[6,A],B=0}finally{g=C=0}if(5&Q[0])throw Q[1];return{value:Q[0]?Q[1]:void 0,done:!0}}([Q,i])}}}var C,Q=(function(A,I){var g,B=(g=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(g=g||__filename),function(A){var I,B,C;A=A||{},I||(I=void 0!==A?A:{}),I.ready=new Promise((function(A,I){B=A,C=I})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_getErrorName\")||(Object.defineProperty(I.ready,\"_ZSTD_getErrorName\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_getErrorName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_getErrorName\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_getErrorName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_isError\")||(Object.defineProperty(I.ready,\"_ZSTD_isError\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_isError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_isError\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_isError on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_createCStream\")||(Object.defineProperty(I.ready,\"_ZSTD_createCStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_createCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_createCStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_createCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_freeCStream\")||(Object.defineProperty(I.ready,\"_ZSTD_freeCStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_freeCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_freeCStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_freeCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_CStreamInSize\")||(Object.defineProperty(I.ready,\"_ZSTD_CStreamInSize\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_CStreamInSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_CStreamInSize\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_CStreamInSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_CStreamOutSize\")||(Object.defineProperty(I.ready,\"_ZSTD_CStreamOutSize\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_CStreamOutSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_CStreamOutSize\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_CStreamOutSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_CCtx_setParameter\")||(Object.defineProperty(I.ready,\"_ZSTD_CCtx_setParameter\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_CCtx_setParameter on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_CCtx_setParameter\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_CCtx_setParameter on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_compressStream2_simpleArgs\")||(Object.defineProperty(I.ready,\"_ZSTD_compressStream2_simpleArgs\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_compressStream2_simpleArgs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_compressStream2_simpleArgs\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_compressStream2_simpleArgs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_initCStream\")||(Object.defineProperty(I.ready,\"_ZSTD_initCStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_initCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_initCStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_initCStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_DStreamInSize\")||(Object.defineProperty(I.ready,\"_ZSTD_DStreamInSize\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_DStreamInSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_DStreamInSize\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_DStreamInSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_DStreamOutSize\")||(Object.defineProperty(I.ready,\"_ZSTD_DStreamOutSize\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_DStreamOutSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_DStreamOutSize\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_DStreamOutSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_createDStream\")||(Object.defineProperty(I.ready,\"_ZSTD_createDStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_createDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_createDStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_createDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_initDStream\")||(Object.defineProperty(I.ready,\"_ZSTD_initDStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_initDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_initDStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_initDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_decompressStream_simpleArgs\")||(Object.defineProperty(I.ready,\"_ZSTD_decompressStream_simpleArgs\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_decompressStream_simpleArgs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_decompressStream_simpleArgs\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_decompressStream_simpleArgs on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_freeDStream\")||(Object.defineProperty(I.ready,\"_ZSTD_freeDStream\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_freeDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_freeDStream\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_freeDStream on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_compress\")||(Object.defineProperty(I.ready,\"_ZSTD_compress\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_compress on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_compress\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_compress on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_compressBound\")||(Object.defineProperty(I.ready,\"_ZSTD_compressBound\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_compressBound on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_compressBound\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_compressBound on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_decompress\")||(Object.defineProperty(I.ready,\"_ZSTD_decompress\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_decompress on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_decompress\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_decompress on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_ZSTD_getFrameContentSize\")||(Object.defineProperty(I.ready,\"_ZSTD_getFrameContentSize\",{configurable:!0,get:function(){z(\"You are getting _ZSTD_getFrameContentSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_ZSTD_getFrameContentSize\",{configurable:!0,set:function(){z(\"You are setting _ZSTD_getFrameContentSize on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_emscripten_stack_get_end\")||(Object.defineProperty(I.ready,\"_emscripten_stack_get_end\",{configurable:!0,get:function(){z(\"You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_emscripten_stack_get_end\",{configurable:!0,set:function(){z(\"You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_emscripten_stack_get_free\")||(Object.defineProperty(I.ready,\"_emscripten_stack_get_free\",{configurable:!0,get:function(){z(\"You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_emscripten_stack_get_free\",{configurable:!0,set:function(){z(\"You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_emscripten_stack_init\")||(Object.defineProperty(I.ready,\"_emscripten_stack_init\",{configurable:!0,get:function(){z(\"You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_emscripten_stack_init\",{configurable:!0,set:function(){z(\"You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"___cxa_demangle\")||(Object.defineProperty(I.ready,\"___cxa_demangle\",{configurable:!0,get:function(){z(\"You are getting ___cxa_demangle on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"___cxa_demangle\",{configurable:!0,set:function(){z(\"You are setting ___cxa_demangle on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_stackSave\")||(Object.defineProperty(I.ready,\"_stackSave\",{configurable:!0,get:function(){z(\"You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_stackSave\",{configurable:!0,set:function(){z(\"You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_stackRestore\")||(Object.defineProperty(I.ready,\"_stackRestore\",{configurable:!0,get:function(){z(\"You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_stackRestore\",{configurable:!0,set:function(){z(\"You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_stackAlloc\")||(Object.defineProperty(I.ready,\"_stackAlloc\",{configurable:!0,get:function(){z(\"You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_stackAlloc\",{configurable:!0,set:function(){z(\"You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"___wasm_call_ctors\")||(Object.defineProperty(I.ready,\"___wasm_call_ctors\",{configurable:!0,get:function(){z(\"You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"___wasm_call_ctors\",{configurable:!0,set:function(){z(\"You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_fflush\")||(Object.defineProperty(I.ready,\"_fflush\",{configurable:!0,get:function(){z(\"You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_fflush\",{configurable:!0,set:function(){z(\"You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"___errno_location\")||(Object.defineProperty(I.ready,\"___errno_location\",{configurable:!0,get:function(){z(\"You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"___errno_location\",{configurable:!0,set:function(){z(\"You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_malloc\")||(Object.defineProperty(I.ready,\"_malloc\",{configurable:!0,get:function(){z(\"You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_malloc\",{configurable:!0,set:function(){z(\"You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"_free\")||(Object.defineProperty(I.ready,\"_free\",{configurable:!0,get:function(){z(\"You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"_free\",{configurable:!0,set:function(){z(\"You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}})),Object.getOwnPropertyDescriptor(I.ready,\"onRuntimeInitialized\")||(Object.defineProperty(I.ready,\"onRuntimeInitialized\",{configurable:!0,get:function(){z(\"You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}),Object.defineProperty(I.ready,\"onRuntimeInitialized\",{configurable:!0,set:function(){z(\"You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")}}));var Q,E,i,o,D,a={};for(Q in I)I.hasOwnProperty(Q)&&(a[Q]=I[Q]);if(E=\"object\"==typeof window,i=\"function\"==typeof importScripts,o=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,D=!E&&!o&&!i,I.ENVIRONMENT)throw new Error(\"Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)\");var G,F,y,s,w,R=\"\";if(o)R=i?require(\"path\").dirname(R)+\"/\":__dirname+\"/\",G=function(A,I){var g=yA(A);return g?I?g:g.toString():(s||(s=require(\"fs\")),w||(w=require(\"path\")),A=w.normalize(A),s.readFileSync(A,I?null:\"utf8\"))},y=function(A){var I=G(A,!0);return I.buffer||(I=new Uint8Array(I)),k(I.buffer),I},process.argv.length>1&&process.argv[1].replace(/\\\\/g,\"/\"),process.argv.slice(2),process.on(\"uncaughtException\",(function(A){if(!(A instanceof tA))throw A})),process.on(\"unhandledRejection\",z),I.inspect=function(){return\"[Emscripten Module object]\"};else if(D)\"undefined\"!=typeof read&&(G=function(A){var I=yA(A);return I?GA(I):read(A)}),y=function(A){var I;return(I=yA(A))?I:\"function\"==typeof readbuffer?new Uint8Array(readbuffer(A)):(k(\"object\"==typeof(I=read(A,\"binary\"))),I)},\"undefined\"!=typeof scriptArgs&&scriptArgs,\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print);else{if(!E&&!i)throw new Error(\"environment detection error\");i?R=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(R=document.currentScript.src),g&&(R=g),R=0!==R.indexOf(\"blob:\")?R.substr(0,R.lastIndexOf(\"/\")+1):\"\",G=function(A){try{var I=new XMLHttpRequest;return I.open(\"GET\",A,!1),I.send(null),I.responseText}catch(I){var g=yA(A);if(g)return GA(g);throw I}},i&&(y=function(A){try{var I=new XMLHttpRequest;return I.open(\"GET\",A,!1),I.responseType=\"arraybuffer\",I.send(null),new Uint8Array(I.response)}catch(I){var g=yA(A);if(g)return g;throw I}}),F=function(A,I,g){var B=new XMLHttpRequest;B.open(\"GET\",A,!0),B.responseType=\"arraybuffer\",B.onload=function(){if(200==B.status||0==B.status&&B.response)I(B.response);else{var C=yA(A);C?I(C.buffer):g()}},B.onerror=g,B.send(null)}}I.print||console.log.bind(console);var S,N,h=I.printErr||console.warn.bind(console);for(Q in a)a.hasOwnProperty(Q)&&(I[Q]=a[Q]);function U(A){U.shown||(U.shown={}),U.shown[A]||(U.shown[A]=1,h(A))}a=null,I.arguments&&I.arguments,Object.getOwnPropertyDescriptor(I,\"arguments\")||Object.defineProperty(I,\"arguments\",{configurable:!0,get:function(){z(\"Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),I.thisProgram&&I.thisProgram,Object.getOwnPropertyDescriptor(I,\"thisProgram\")||Object.defineProperty(I,\"thisProgram\",{configurable:!0,get:function(){z(\"Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),I.quit&&I.quit,Object.getOwnPropertyDescriptor(I,\"quit\")||Object.defineProperty(I,\"quit\",{configurable:!0,get:function(){z(\"Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),k(void 0===I.memoryInitializerPrefixURL,\"Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead\"),k(void 0===I.pthreadMainPrefixURL,\"Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead\"),k(void 0===I.cdInitializerPrefixURL,\"Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead\"),k(void 0===I.filePackagePrefixURL,\"Module.filePackagePrefixURL option was removed, use Module.locateFile instead\"),k(void 0===I.read,\"Module.read option was removed (modify read_ in JS)\"),k(void 0===I.readAsync,\"Module.readAsync option was removed (modify readAsync in JS)\"),k(void 0===I.readBinary,\"Module.readBinary option was removed (modify readBinary in JS)\"),k(void 0===I.setWindowTitle,\"Module.setWindowTitle option was removed (modify setWindowTitle in JS)\"),k(void 0===I.TOTAL_MEMORY,\"Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY\"),Object.getOwnPropertyDescriptor(I,\"read\")||Object.defineProperty(I,\"read\",{configurable:!0,get:function(){z(\"Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),Object.getOwnPropertyDescriptor(I,\"readAsync\")||Object.defineProperty(I,\"readAsync\",{configurable:!0,get:function(){z(\"Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),Object.getOwnPropertyDescriptor(I,\"readBinary\")||Object.defineProperty(I,\"readBinary\",{configurable:!0,get:function(){z(\"Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),Object.getOwnPropertyDescriptor(I,\"setWindowTitle\")||Object.defineProperty(I,\"setWindowTitle\",{configurable:!0,get:function(){z(\"Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),I.wasmBinary&&(S=I.wasmBinary),Object.getOwnPropertyDescriptor(I,\"wasmBinary\")||Object.defineProperty(I,\"wasmBinary\",{configurable:!0,get:function(){z(\"Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),I.noExitRuntime,Object.getOwnPropertyDescriptor(I,\"noExitRuntime\")||Object.defineProperty(I,\"noExitRuntime\",{configurable:!0,get:function(){z(\"Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),\"object\"!=typeof WebAssembly&&z(\"no native wasm support detected\");var L=!1;function k(A,I){A||z(\"Assertion failed: \"+I)}function t(A,g,B,C,Q){var E={string:function(A){var I=0;if(null!=A&&0!==A){var g=1+(A.length<<2);n(A,I=hA(g),g)}return I},array:function(A){var I=hA(A.length);return function(A,I){k(A.length>=0,\"writeArrayToMemory array must have a length (should be an array or typed array)\"),c.set(A,I)}(A,I),I}},i=function(A){var g=I[\"_\"+A];return k(g,\"Cannot call unknown function \"+A+\", make sure it is exported\"),g}(A),o=[],D=0;if(k(\"array\"!==g,'Return type should not be \"array\".'),C)for(var a=0;a<C.length;a++){var G=E[B[a]];G?(0===D&&(D=SA()),o[a]=G(C[a])):o[a]=C[a]}var F=i.apply(null,o);return F=function(A){return\"string\"===g?d(A):\"boolean\"===g?Boolean(A):A}(F),0!==D&&NA(D),F}var J,c,Y,M,K,H,q,r,e=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function d(A,I){return A?function(A,I,g){for(var B=I+g,C=I;A[C]&&!(C>=B);)++C;if(C-I>16&&A.subarray&&e)return e.decode(A.subarray(I,C));for(var Q=\"\";I<C;){var E=A[I++];if(128&E){var i=63&A[I++];if(192!=(224&E)){var o=63&A[I++];if(224==(240&E)?E=(15&E)<<12|i<<6|o:(240!=(248&E)&&U(\"Invalid UTF-8 leading byte 0x\"+E.toString(16)+\" encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!\"),E=(7&E)<<18|i<<12|o<<6|63&A[I++]),E<65536)Q+=String.fromCharCode(E);else{var D=E-65536;Q+=String.fromCharCode(55296|D>>10,56320|1023&D)}}else Q+=String.fromCharCode((31&E)<<6|i)}else Q+=String.fromCharCode(E)}return Q}(Y,A,I):\"\"}function n(A,I,g){return k(\"number\"==typeof g,\"stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!\"),function(A,I,g,B){if(!(B>0))return 0;for(var C=g,Q=g+B-1,E=0;E<A.length;++E){var i=A.charCodeAt(E);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&A.charCodeAt(++E)),i<=127){if(g>=Q)break;I[g++]=i}else if(i<=2047){if(g+1>=Q)break;I[g++]=192|i>>6,I[g++]=128|63&i}else if(i<=65535){if(g+2>=Q)break;I[g++]=224|i>>12,I[g++]=128|i>>6&63,I[g++]=128|63&i}else{if(g+3>=Q)break;i>=2097152&&U(\"Invalid Unicode code point 0x\"+i.toString(16)+\" encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).\"),I[g++]=240|i>>18,I[g++]=128|i>>12&63,I[g++]=128|i>>6&63,I[g++]=128|63&i}}return I[g]=0,g-C}(A,Y,I,g)}function T(A){J=A,I.HEAP8=c=new Int8Array(A),I.HEAP16=M=new Int16Array(A),I.HEAP32=K=new Int32Array(A),I.HEAPU8=Y=new Uint8Array(A),I.HEAPU16=new Uint16Array(A),I.HEAPU32=H=new Uint32Array(A),I.HEAPF32=q=new Float32Array(A),I.HEAPF64=r=new Float64Array(A)}\"undefined\"!=typeof TextDecoder&&new TextDecoder(\"utf-16le\");var W=5242880;I.TOTAL_STACK&&k(W===I.TOTAL_STACK,\"the stack size can no longer be determined at runtime\");var p,m=I.INITIAL_MEMORY||16777216;function f(){var A=kA();k(0==(3&A)),H[1+(A>>2)]=34821223,H[2+(A>>2)]=2310721022,K[0]=1668509029}function Z(){if(!L){var A=kA(),I=H[1+(A>>2)],g=H[2+(A>>2)];34821223==I&&2310721022==g||z(\"Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x\"+g.toString(16)+\" \"+I.toString(16)),1668509029!==K[0]&&z(\"Runtime error: The application has corrupted its heap memory area (address zero)!\")}}Object.getOwnPropertyDescriptor(I,\"INITIAL_MEMORY\")||Object.defineProperty(I,\"INITIAL_MEMORY\",{configurable:!0,get:function(){z(\"Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\")}}),k(m>=W,\"INITIAL_MEMORY should be larger than TOTAL_STACK, was \"+m+\"! (TOTAL_STACK=5242880)\"),k(\"undefined\"!=typeof Int32Array&&\"undefined\"!=typeof Float64Array&&void 0!==Int32Array.prototype.subarray&&void 0!==Int32Array.prototype.set,\"JS engine does not provide full typed array support\"),k(!I.wasmMemory,\"Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally\"),k(16777216==m,\"Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically\"),function(){var A=new Int16Array(1),I=new Int8Array(A.buffer);if(A[0]=25459,115!==I[0]||99!==I[1])throw\"Runtime error: expected the system to be little-endian!\"}();var P=[],b=[],l=[],O=[],x=!1;b.push({func:function(){wA()}}),k(Math.imul,\"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\"),k(Math.fround,\"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\"),k(Math.clz32,\"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\"),k(Math.trunc,\"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");var V=0,j=null,X=null,u={};function z(A){var g,B;I.onAbort&&I.onAbort(A),h(A+=\"\"),L=!0,A=\"abort(\"+A+\") at \"+(B=function(){var A=new Error;if(!A.stack){try{throw new Error}catch(I){A=I}if(!A.stack)return\"(no stack trace available)\"}return A.stack.toString()}(),I.extraStackTrace&&(B+=\"\\n\"+I.extraStackTrace()),g=/\\b_Z[\\w\\d_]+/g,B.replace(g,(function(A){var I=DA(A);return A===I?A:I+\" [\"+A+\"]\"})));var Q=new WebAssembly.RuntimeError(A);throw C(Q),Q}I.preloadedImages={},I.preloadedAudios={};var v={error:function(){z(\"Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1\")},init:function(){v.error()},createDataFile:function(){v.error()},createPreloadedFile:function(){v.error()},createLazyFile:function(){v.error()},open:function(){v.error()},mkdev:function(){v.error()},registerDevice:function(){v.error()},analyzePath:function(){v.error()},loadFilesFromDB:function(){v.error()},ErrnoError:function(){v.error()}};function _(A,I){return String.prototype.startsWith?A.startsWith(I):0===A.indexOf(I)}I.FS_createDataFile=v.createDataFile,I.FS_createPreloadedFile=v.createPreloadedFile;var $=\"data:application/octet-stream;base64,\";function AA(A){return _(A,$)}function IA(A){return _(A,\"file://\")}function gA(A,g){return function(){var B=A,C=g;return g||(C=I.asm),k(x,\"native function `\"+B+\"` called before runtime initialization\"),k(!0,\"native function `\"+B+\"` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)\"),C[A]||k(C[A],\"exported native function `\"+B+\"` not found\"),C[A].apply(null,arguments)}}var BA,CA,QA,EA=\"data:application/octet-stream;base64,\";function iA(A){try{if(A==EA&&S)return new Uint8Array(S);var I=yA(A);if(I)return I;if(y)return y(A);throw\"both async and sync fetching of the wasm failed\"}catch(A){z(A)}}function oA(A){for(;A.length>0;){var g=A.shift();if(\"function\"!=typeof g){var B=g.func;\"number\"==typeof B?void 0===g.arg?p.get(B)():p.get(B)(g.arg):B(void 0===g.arg?null:g.arg)}else g(I)}}function DA(A){if(DA.recursionGuard=1+(0|DA.recursionGuard),DA.recursionGuard>1)return A;var g=I.___cxa_demangle||I.__cxa_demangle;k(g);var B=SA();try{var C=A;C.startsWith(\"__Z\")&&(C=C.substr(1));var Q=function(A){for(var I=0,g=0;g<A.length;++g){var B=A.charCodeAt(g);B>=55296&&B<=57343&&(B=65536+((1023&B)<<10)|1023&A.charCodeAt(++g)),B<=127?++I:I+=B<=2047?2:B<=65535?3:4}return I}(C)+1,E=hA(Q);n(C,E,Q);var i=hA(4),o=g(E,0,0,i);if(0===K[i>>2]&&o)return d(o)}catch(A){}finally{RA(o),NA(B),DA.recursionGuard<2&&--DA.recursionGuard}return A}function aA(A){try{return N.grow(A-J.byteLength+65535>>>16),T(N.buffer),1}catch(I){console.error(\"emscripten_realloc_buffer: Attempted to grow heap from \"+J.byteLength+\" bytes to \"+A+\" bytes, but got error: \"+I)}}function GA(A){for(var I=[],g=0;g<A.length;g++){var B=A[g];B>255&&(k(!1,\"Character code \"+B+\" (\"+String.fromCharCode(B)+\")  at offset \"+g+\" not in 0x00-0xFF.\"),B&=255),I.push(String.fromCharCode(B))}return I.join(\"\")}AA(EA)||(BA=EA,EA=I.locateFile?I.locateFile(BA,R):R+BA);var FA=\"function\"==typeof atob?atob:function(A){var I,g,B,C,Q,E,i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",o=\"\",D=0;A=A.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{I=i.indexOf(A.charAt(D++))<<2|(C=i.indexOf(A.charAt(D++)))>>4,g=(15&C)<<4|(Q=i.indexOf(A.charAt(D++)))>>2,B=(3&Q)<<6|(E=i.indexOf(A.charAt(D++))),o+=String.fromCharCode(I),64!==Q&&(o+=String.fromCharCode(g)),64!==E&&(o+=String.fromCharCode(B))}while(D<A.length);return o};function yA(A){if(AA(A))return function(A){if(\"boolean\"==typeof o&&o){var I;try{I=Buffer.from(A,\"base64\")}catch(g){I=new Buffer(A,\"base64\")}return new Uint8Array(I.buffer,I.byteOffset,I.byteLength)}try{for(var g=FA(A),B=new Uint8Array(g.length),C=0;C<g.length;++C)B[C]=g.charCodeAt(C);return B}catch(A){throw new Error(\"Converting base64 string to bytes failed.\")}}(A.slice($.length))}var sA={emscripten_memcpy_big:function(A,I,g){Y.copyWithin(A,I,I+g)},emscripten_resize_heap:function(A){var I=Y.length;k(A>I);var g,B,C=2147483648;if(A>C)return h(\"Cannot enlarge memory, asked to go up to \"+A+\" bytes, but the limit is 2147483648 bytes!\"),!1;for(var Q=1;Q<=4;Q*=2){var E=I*(1+.2/Q);E=Math.min(E,A+100663296);var i=Math.min(C,((g=Math.max(A,E))%(B=65536)>0&&(g+=B-g%B),g));if(aA(i))return!0}return h(\"Failed to grow the heap from \"+I+\" bytes to \"+i+\" bytes, not enough memory!\"),!1},setTempRet0:function(A){}};!function(){var A,g={env:sA,wasi_snapshot_preview1:sA};function B(A,g){var B=A.exports;I.asm=B,k(N=I.asm.memory,\"memory not found in wasm exports\"),T(N.buffer),k(p=I.asm.__indirect_function_table,\"table not found in wasm exports\"),function(A){if(V--,I.monitorRunDependencies&&I.monitorRunDependencies(V),A?(k(u[A]),delete u[A]):h(\"warning: run dependency removed without ID\"),0==V&&(null!==j&&(clearInterval(j),j=null),X)){var g=X;X=null,g()}}(\"wasm-instantiate\")}A=\"wasm-instantiate\",V++,I.monitorRunDependencies&&I.monitorRunDependencies(V),A?(k(!u[A]),u[A]=1,null===j&&\"undefined\"!=typeof setInterval&&(j=setInterval((function(){if(L)return clearInterval(j),void(j=null);var A=!1;for(var I in u)A||(A=!0,h(\"still waiting on run dependencies:\")),h(\"dependency: \"+I);A&&h(\"(end of list)\")}),1e4))):h(\"warning: run dependency added without ID\");var Q=I;function o(A){k(I===Q,\"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?\"),Q=null,B(A.instance)}function D(A){return function(){if(!S&&(E||i)){if(\"function\"==typeof fetch&&!IA(EA))return fetch(EA,{credentials:\"same-origin\"}).then((function(A){if(!A.ok)throw\"failed to load wasm binary file at '\"+EA+\"'\";return A.arrayBuffer()})).catch((function(){return iA(EA)}));if(F)return new Promise((function(A,I){F(EA,(function(I){A(new Uint8Array(I))}),I)}))}return Promise.resolve().then((function(){return iA(EA)}))}().then((function(A){return WebAssembly.instantiate(A,g)})).then(A,(function(A){h(\"failed to asynchronously prepare wasm: \"+A),IA(EA)&&h(\"warning: Loading from a file URI (\"+EA+\") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing\"),z(A)}))}if(I.instantiateWasm)try{return I.instantiateWasm(g,B)}catch(A){return h(\"Module.instantiateWasm callback failed with error: \"+A),!1}(S||\"function\"!=typeof WebAssembly.instantiateStreaming||AA(EA)||IA(EA)||\"function\"!=typeof fetch?D(o):fetch(EA,{credentials:\"same-origin\"}).then((function(A){return WebAssembly.instantiateStreaming(A,g).then(o,(function(A){return h(\"wasm streaming compile failed: \"+A),h(\"falling back to ArrayBuffer instantiation\"),D(o)}))}))).catch(C)}();var wA=I.___wasm_call_ctors=gA(\"__wasm_call_ctors\");I._malloc=gA(\"malloc\");var RA=I._free=gA(\"free\");I._ZSTD_isError=gA(\"ZSTD_isError\"),I._ZSTD_getErrorName=gA(\"ZSTD_getErrorName\"),I._ZSTD_compressBound=gA(\"ZSTD_compressBound\"),I._ZSTD_CCtx_setParameter=gA(\"ZSTD_CCtx_setParameter\"),I._ZSTD_compress=gA(\"ZSTD_compress\"),I._ZSTD_createCStream=gA(\"ZSTD_createCStream\"),I._ZSTD_freeCStream=gA(\"ZSTD_freeCStream\"),I._ZSTD_CStreamInSize=gA(\"ZSTD_CStreamInSize\"),I._ZSTD_CStreamOutSize=gA(\"ZSTD_CStreamOutSize\"),I._ZSTD_initCStream=gA(\"ZSTD_initCStream\"),I._ZSTD_compressStream2_simpleArgs=gA(\"ZSTD_compressStream2_simpleArgs\"),I._ZSTD_getFrameContentSize=gA(\"ZSTD_getFrameContentSize\"),I._ZSTD_decompress=gA(\"ZSTD_decompress\"),I._ZSTD_createDStream=gA(\"ZSTD_createDStream\"),I._ZSTD_freeDStream=gA(\"ZSTD_freeDStream\"),I._ZSTD_DStreamInSize=gA(\"ZSTD_DStreamInSize\"),I._ZSTD_DStreamOutSize=gA(\"ZSTD_DStreamOutSize\"),I._ZSTD_initDStream=gA(\"ZSTD_initDStream\"),I._ZSTD_decompressStream_simpleArgs=gA(\"ZSTD_decompressStream_simpleArgs\"),I._fflush=gA(\"fflush\"),I.___errno_location=gA(\"__errno_location\");var SA=I.stackSave=gA(\"stackSave\"),NA=I.stackRestore=gA(\"stackRestore\"),hA=I.stackAlloc=gA(\"stackAlloc\"),UA=I._emscripten_stack_init=function(){return(UA=I._emscripten_stack_init=I.asm.emscripten_stack_init).apply(null,arguments)};I._emscripten_stack_get_free=function(){return(I._emscripten_stack_get_free=I.asm.emscripten_stack_get_free).apply(null,arguments)};var LA,kA=I._emscripten_stack_get_end=function(){return(kA=I._emscripten_stack_get_end=I.asm.emscripten_stack_get_end).apply(null,arguments)};function tA(A){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+A+\")\",this.status=A}function JA(A){function g(){LA||(LA=!0,I.calledRun=!0,L||(Z(),k(!x),x=!0,oA(b),Z(),oA(l),B(I),I.onRuntimeInitialized&&I.onRuntimeInitialized(),k(!I._main,'compiled without a main, but one is present. if you added it from JS, use Module[\"onRuntimeInitialized\"]'),function(){if(Z(),I.postRun)for(\"function\"==typeof I.postRun&&(I.postRun=[I.postRun]);I.postRun.length;)A=I.postRun.shift(),O.unshift(A);var A;oA(O)}()))}V>0||(UA(),f(),function(){if(I.preRun)for(\"function\"==typeof I.preRun&&(I.preRun=[I.preRun]);I.preRun.length;)A=I.preRun.shift(),P.unshift(A);var A;oA(P)}(),V>0||(I.setStatus?(I.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){I.setStatus(\"\")}),1),g()}),1)):g(),Z()))}if(I.___cxa_demangle=gA(\"__cxa_demangle\"),Object.getOwnPropertyDescriptor(I,\"intArrayFromString\")||(I.intArrayFromString=function(){z(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"intArrayToString\")||(I.intArrayToString=function(){z(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ccall\")||(I.ccall=function(){z(\"'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),I.cwrap=function(A,I,g,B){return function(){return t(A,I,g,arguments)}},I.setValue=function(A,I,g,B){switch(\"*\"===(g=g||\"i8\").charAt(g.length-1)&&(g=\"i32\"),g){case\"i1\":case\"i8\":c[A>>0]=I;break;case\"i16\":M[A>>1]=I;break;case\"i32\":K[A>>2]=I;break;case\"i64\":QA=[I>>>0,(CA=I,+Math.abs(CA)>=1?CA>0?(0|Math.min(+Math.floor(CA/4294967296),4294967295))>>>0:~~+Math.ceil((CA-+(~~CA>>>0))/4294967296)>>>0:0)],K[A>>2]=QA[0],K[A+4>>2]=QA[1];break;case\"float\":q[A>>2]=I;break;case\"double\":r[A>>3]=I;break;default:z(\"invalid type for setValue: \"+g)}},I.getValue=function(A,I,g){switch(\"*\"===(I=I||\"i8\").charAt(I.length-1)&&(I=\"i32\"),I){case\"i1\":case\"i8\":return c[A>>0];case\"i16\":return M[A>>1];case\"i32\":case\"i64\":return K[A>>2];case\"float\":return q[A>>2];case\"double\":return r[A>>3];default:z(\"invalid type for getValue: \"+I)}return null},Object.getOwnPropertyDescriptor(I,\"allocate\")||(I.allocate=function(){z(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"UTF8ArrayToString\")||(I.UTF8ArrayToString=function(){z(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"UTF8ToString\")||(I.UTF8ToString=function(){z(\"'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToUTF8Array\")||(I.stringToUTF8Array=function(){z(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToUTF8\")||(I.stringToUTF8=function(){z(\"'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"lengthBytesUTF8\")||(I.lengthBytesUTF8=function(){z(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stackTrace\")||(I.stackTrace=function(){z(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"addOnPreRun\")||(I.addOnPreRun=function(){z(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),I.addOnInit=function(A){b.unshift(A)},Object.getOwnPropertyDescriptor(I,\"addOnPreMain\")||(I.addOnPreMain=function(){z(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"addOnExit\")||(I.addOnExit=function(){z(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"addOnPostRun\")||(I.addOnPostRun=function(){z(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeStringToMemory\")||(I.writeStringToMemory=function(){z(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeArrayToMemory\")||(I.writeArrayToMemory=function(){z(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeAsciiToMemory\")||(I.writeAsciiToMemory=function(){z(\"'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"addRunDependency\")||(I.addRunDependency=function(){z(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"removeRunDependency\")||(I.removeRunDependency=function(){z(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_createFolder\")||(I.FS_createFolder=function(){z(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"FS_createPath\")||(I.FS_createPath=function(){z(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_createDataFile\")||(I.FS_createDataFile=function(){z(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_createPreloadedFile\")||(I.FS_createPreloadedFile=function(){z(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_createLazyFile\")||(I.FS_createLazyFile=function(){z(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_createLink\")||(I.FS_createLink=function(){z(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"FS_createDevice\")||(I.FS_createDevice=function(){z(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"FS_unlink\")||(I.FS_unlink=function(){z(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\")}),Object.getOwnPropertyDescriptor(I,\"getLEB\")||(I.getLEB=function(){z(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getFunctionTables\")||(I.getFunctionTables=function(){z(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"alignFunctionTables\")||(I.alignFunctionTables=function(){z(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerFunctions\")||(I.registerFunctions=function(){z(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"addFunction\")||(I.addFunction=function(){z(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"removeFunction\")||(I.removeFunction=function(){z(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getFuncWrapper\")||(I.getFuncWrapper=function(){z(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"prettyPrint\")||(I.prettyPrint=function(){z(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"makeBigInt\")||(I.makeBigInt=function(){z(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"dynCall\")||(I.dynCall=function(){z(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getCompilerSetting\")||(I.getCompilerSetting=function(){z(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"print\")||(I.print=function(){z(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"printErr\")||(I.printErr=function(){z(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getTempRet0\")||(I.getTempRet0=function(){z(\"'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setTempRet0\")||(I.setTempRet0=function(){z(\"'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"callMain\")||(I.callMain=function(){z(\"'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"abort\")||(I.abort=function(){z(\"'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToNewUTF8\")||(I.stringToNewUTF8=function(){z(\"'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setFileTime\")||(I.setFileTime=function(){z(\"'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"emscripten_realloc_buffer\")||(I.emscripten_realloc_buffer=function(){z(\"'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ENV\")||(I.ENV=function(){z(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ERRNO_CODES\")||(I.ERRNO_CODES=function(){z(\"'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ERRNO_MESSAGES\")||(I.ERRNO_MESSAGES=function(){z(\"'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setErrNo\")||(I.setErrNo=function(){z(\"'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"readSockaddr\")||(I.readSockaddr=function(){z(\"'readSockaddr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeSockaddr\")||(I.writeSockaddr=function(){z(\"'writeSockaddr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"DNS\")||(I.DNS=function(){z(\"'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getHostByName\")||(I.getHostByName=function(){z(\"'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GAI_ERRNO_MESSAGES\")||(I.GAI_ERRNO_MESSAGES=function(){z(\"'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"Protocols\")||(I.Protocols=function(){z(\"'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"Sockets\")||(I.Sockets=function(){z(\"'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getRandomDevice\")||(I.getRandomDevice=function(){z(\"'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"traverseStack\")||(I.traverseStack=function(){z(\"'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"UNWIND_CACHE\")||(I.UNWIND_CACHE=function(){z(\"'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"withBuiltinMalloc\")||(I.withBuiltinMalloc=function(){z(\"'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"readAsmConstArgsArray\")||(I.readAsmConstArgsArray=function(){z(\"'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"readAsmConstArgs\")||(I.readAsmConstArgs=function(){z(\"'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"mainThreadEM_ASM\")||(I.mainThreadEM_ASM=function(){z(\"'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"jstoi_q\")||(I.jstoi_q=function(){z(\"'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"jstoi_s\")||(I.jstoi_s=function(){z(\"'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getExecutableName\")||(I.getExecutableName=function(){z(\"'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"listenOnce\")||(I.listenOnce=function(){z(\"'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"autoResumeAudioContext\")||(I.autoResumeAudioContext=function(){z(\"'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"dynCallLegacy\")||(I.dynCallLegacy=function(){z(\"'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getDynCaller\")||(I.getDynCaller=function(){z(\"'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"dynCall\")||(I.dynCall=function(){z(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"callRuntimeCallbacks\")||(I.callRuntimeCallbacks=function(){z(\"'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"abortStackOverflow\")||(I.abortStackOverflow=function(){z(\"'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"reallyNegative\")||(I.reallyNegative=function(){z(\"'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"unSign\")||(I.unSign=function(){z(\"'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"reSign\")||(I.reSign=function(){z(\"'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"formatString\")||(I.formatString=function(){z(\"'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"PATH\")||(I.PATH=function(){z(\"'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"PATH_FS\")||(I.PATH_FS=function(){z(\"'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SYSCALLS\")||(I.SYSCALLS=function(){z(\"'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"syscallMmap2\")||(I.syscallMmap2=function(){z(\"'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"syscallMunmap\")||(I.syscallMunmap=function(){z(\"'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getSocketFromFD\")||(I.getSocketFromFD=function(){z(\"'getSocketFromFD' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getSocketAddress\")||(I.getSocketAddress=function(){z(\"'getSocketAddress' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"JSEvents\")||(I.JSEvents=function(){z(\"'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerKeyEventCallback\")||(I.registerKeyEventCallback=function(){z(\"'registerKeyEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"specialHTMLTargets\")||(I.specialHTMLTargets=function(){z(\"'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"maybeCStringToJsString\")||(I.maybeCStringToJsString=function(){z(\"'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"findEventTarget\")||(I.findEventTarget=function(){z(\"'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"findCanvasEventTarget\")||(I.findCanvasEventTarget=function(){z(\"'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getBoundingClientRect\")||(I.getBoundingClientRect=function(){z(\"'getBoundingClientRect' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillMouseEventData\")||(I.fillMouseEventData=function(){z(\"'fillMouseEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerMouseEventCallback\")||(I.registerMouseEventCallback=function(){z(\"'registerMouseEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerWheelEventCallback\")||(I.registerWheelEventCallback=function(){z(\"'registerWheelEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerUiEventCallback\")||(I.registerUiEventCallback=function(){z(\"'registerUiEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerFocusEventCallback\")||(I.registerFocusEventCallback=function(){z(\"'registerFocusEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillDeviceOrientationEventData\")||(I.fillDeviceOrientationEventData=function(){z(\"'fillDeviceOrientationEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerDeviceOrientationEventCallback\")||(I.registerDeviceOrientationEventCallback=function(){z(\"'registerDeviceOrientationEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillDeviceMotionEventData\")||(I.fillDeviceMotionEventData=function(){z(\"'fillDeviceMotionEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerDeviceMotionEventCallback\")||(I.registerDeviceMotionEventCallback=function(){z(\"'registerDeviceMotionEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"screenOrientation\")||(I.screenOrientation=function(){z(\"'screenOrientation' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillOrientationChangeEventData\")||(I.fillOrientationChangeEventData=function(){z(\"'fillOrientationChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerOrientationChangeEventCallback\")||(I.registerOrientationChangeEventCallback=function(){z(\"'registerOrientationChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillFullscreenChangeEventData\")||(I.fillFullscreenChangeEventData=function(){z(\"'fillFullscreenChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerFullscreenChangeEventCallback\")||(I.registerFullscreenChangeEventCallback=function(){z(\"'registerFullscreenChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerRestoreOldStyle\")||(I.registerRestoreOldStyle=function(){z(\"'registerRestoreOldStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"hideEverythingExceptGivenElement\")||(I.hideEverythingExceptGivenElement=function(){z(\"'hideEverythingExceptGivenElement' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"restoreHiddenElements\")||(I.restoreHiddenElements=function(){z(\"'restoreHiddenElements' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setLetterbox\")||(I.setLetterbox=function(){z(\"'setLetterbox' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"currentFullscreenStrategy\")||(I.currentFullscreenStrategy=function(){z(\"'currentFullscreenStrategy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"restoreOldWindowedStyle\")||(I.restoreOldWindowedStyle=function(){z(\"'restoreOldWindowedStyle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"softFullscreenResizeWebGLRenderTarget\")||(I.softFullscreenResizeWebGLRenderTarget=function(){z(\"'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"doRequestFullscreen\")||(I.doRequestFullscreen=function(){z(\"'doRequestFullscreen' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillPointerlockChangeEventData\")||(I.fillPointerlockChangeEventData=function(){z(\"'fillPointerlockChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerPointerlockChangeEventCallback\")||(I.registerPointerlockChangeEventCallback=function(){z(\"'registerPointerlockChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerPointerlockErrorEventCallback\")||(I.registerPointerlockErrorEventCallback=function(){z(\"'registerPointerlockErrorEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"requestPointerLock\")||(I.requestPointerLock=function(){z(\"'requestPointerLock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillVisibilityChangeEventData\")||(I.fillVisibilityChangeEventData=function(){z(\"'fillVisibilityChangeEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerVisibilityChangeEventCallback\")||(I.registerVisibilityChangeEventCallback=function(){z(\"'registerVisibilityChangeEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerTouchEventCallback\")||(I.registerTouchEventCallback=function(){z(\"'registerTouchEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillGamepadEventData\")||(I.fillGamepadEventData=function(){z(\"'fillGamepadEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerGamepadEventCallback\")||(I.registerGamepadEventCallback=function(){z(\"'registerGamepadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerBeforeUnloadEventCallback\")||(I.registerBeforeUnloadEventCallback=function(){z(\"'registerBeforeUnloadEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"fillBatteryEventData\")||(I.fillBatteryEventData=function(){z(\"'fillBatteryEventData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"battery\")||(I.battery=function(){z(\"'battery' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"registerBatteryEventCallback\")||(I.registerBatteryEventCallback=function(){z(\"'registerBatteryEventCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setCanvasElementSize\")||(I.setCanvasElementSize=function(){z(\"'setCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getCanvasElementSize\")||(I.getCanvasElementSize=function(){z(\"'getCanvasElementSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"polyfillSetImmediate\")||(I.polyfillSetImmediate=function(){z(\"'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"demangle\")||(I.demangle=function(){z(\"'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"demangleAll\")||(I.demangleAll=function(){z(\"'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"jsStackTrace\")||(I.jsStackTrace=function(){z(\"'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stackTrace\")||(I.stackTrace=function(){z(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getEnvStrings\")||(I.getEnvStrings=function(){z(\"'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"checkWasiClock\")||(I.checkWasiClock=function(){z(\"'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"flush_NO_FILESYSTEM\")||(I.flush_NO_FILESYSTEM=function(){z(\"'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeI53ToI64\")||(I.writeI53ToI64=function(){z(\"'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeI53ToI64Clamped\")||(I.writeI53ToI64Clamped=function(){z(\"'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeI53ToI64Signaling\")||(I.writeI53ToI64Signaling=function(){z(\"'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeI53ToU64Clamped\")||(I.writeI53ToU64Clamped=function(){z(\"'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeI53ToU64Signaling\")||(I.writeI53ToU64Signaling=function(){z(\"'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"readI53FromI64\")||(I.readI53FromI64=function(){z(\"'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"readI53FromU64\")||(I.readI53FromU64=function(){z(\"'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"convertI32PairToI53\")||(I.convertI32PairToI53=function(){z(\"'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"convertU32PairToI53\")||(I.convertU32PairToI53=function(){z(\"'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"uncaughtExceptionCount\")||(I.uncaughtExceptionCount=function(){z(\"'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"exceptionLast\")||(I.exceptionLast=function(){z(\"'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"exceptionCaught\")||(I.exceptionCaught=function(){z(\"'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ExceptionInfoAttrs\")||(I.ExceptionInfoAttrs=function(){z(\"'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"ExceptionInfo\")||(I.ExceptionInfo=function(){z(\"'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"CatchInfo\")||(I.CatchInfo=function(){z(\"'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"exception_addRef\")||(I.exception_addRef=function(){z(\"'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"exception_decRef\")||(I.exception_decRef=function(){z(\"'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"Browser\")||(I.Browser=function(){z(\"'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"funcWrappers\")||(I.funcWrappers=function(){z(\"'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"getFuncWrapper\")||(I.getFuncWrapper=function(){z(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"setMainLoop\")||(I.setMainLoop=function(){z(\"'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"FS\")||(I.FS=function(){z(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"mmapAlloc\")||(I.mmapAlloc=function(){z(\"'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"MEMFS\")||(I.MEMFS=function(){z(\"'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"TTY\")||(I.TTY=function(){z(\"'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"PIPEFS\")||(I.PIPEFS=function(){z(\"'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SOCKFS\")||(I.SOCKFS=function(){z(\"'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"_setNetworkCallback\")||(I._setNetworkCallback=function(){z(\"'_setNetworkCallback' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"tempFixedLengthArray\")||(I.tempFixedLengthArray=function(){z(\"'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"miniTempWebGLFloatBuffers\")||(I.miniTempWebGLFloatBuffers=function(){z(\"'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"heapObjectForWebGLType\")||(I.heapObjectForWebGLType=function(){z(\"'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"heapAccessShiftForWebGLHeap\")||(I.heapAccessShiftForWebGLHeap=function(){z(\"'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GL\")||(I.GL=function(){z(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"emscriptenWebGLGet\")||(I.emscriptenWebGLGet=function(){z(\"'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"computeUnpackAlignedImageSize\")||(I.computeUnpackAlignedImageSize=function(){z(\"'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"emscriptenWebGLGetTexPixelData\")||(I.emscriptenWebGLGetTexPixelData=function(){z(\"'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"emscriptenWebGLGetUniform\")||(I.emscriptenWebGLGetUniform=function(){z(\"'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"emscriptenWebGLGetVertexAttrib\")||(I.emscriptenWebGLGetVertexAttrib=function(){z(\"'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"writeGLArray\")||(I.writeGLArray=function(){z(\"'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"AL\")||(I.AL=function(){z(\"'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SDL_unicode\")||(I.SDL_unicode=function(){z(\"'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SDL_ttfContext\")||(I.SDL_ttfContext=function(){z(\"'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SDL_audio\")||(I.SDL_audio=function(){z(\"'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SDL\")||(I.SDL=function(){z(\"'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"SDL_gfx\")||(I.SDL_gfx=function(){z(\"'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GLUT\")||(I.GLUT=function(){z(\"'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"EGL\")||(I.EGL=function(){z(\"'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GLFW_Window\")||(I.GLFW_Window=function(){z(\"'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GLFW\")||(I.GLFW=function(){z(\"'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"GLEW\")||(I.GLEW=function(){z(\"'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"IDBStore\")||(I.IDBStore=function(){z(\"'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"runAndAbortIfError\")||(I.runAndAbortIfError=function(){z(\"'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"warnOnce\")||(I.warnOnce=function(){z(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stackSave\")||(I.stackSave=function(){z(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stackRestore\")||(I.stackRestore=function(){z(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stackAlloc\")||(I.stackAlloc=function(){z(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"AsciiToString\")||(I.AsciiToString=function(){z(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToAscii\")||(I.stringToAscii=function(){z(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"UTF16ToString\")||(I.UTF16ToString=function(){z(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToUTF16\")||(I.stringToUTF16=function(){z(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"lengthBytesUTF16\")||(I.lengthBytesUTF16=function(){z(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"UTF32ToString\")||(I.UTF32ToString=function(){z(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"stringToUTF32\")||(I.stringToUTF32=function(){z(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"lengthBytesUTF32\")||(I.lengthBytesUTF32=function(){z(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"allocateUTF8\")||(I.allocateUTF8=function(){z(\"'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"allocateUTF8OnStack\")||(I.allocateUTF8OnStack=function(){z(\"'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),I.writeStackCookie=f,I.checkStackCookie=Z,Object.getOwnPropertyDescriptor(I,\"intArrayFromBase64\")||(I.intArrayFromBase64=function(){z(\"'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),Object.getOwnPropertyDescriptor(I,\"tryParseAsDataURI\")||(I.tryParseAsDataURI=function(){z(\"'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\")}),I.ALLOC_NORMAL=0,I.ALLOC_STACK=1,X=function A(){LA||JA(),LA||(X=A)},I.run=JA,I.preInit)for(\"function\"==typeof I.preInit&&(I.preInit=[I.preInit]);I.preInit.length>0;)I.preInit.pop()();return JA(),A.ready});A.exports=B}(C={exports:{}},C.exports),C.exports),E=Object.freeze(Object.assign(Object.create(null),Q,{default:Q})),i=function(A,I,g){this.positionPtr=A,this.size=I,this.dataPtr=g},o=function(){function A(A){this.zstdGetErrorName=A.cwrap(\"ZSTD_getErrorName\",\"string\",[\"number\"]),this.zstdIsError=A.cwrap(\"ZSTD_isError\",\"number\",[\"number\"])}return A.prototype.checkError=function(A){if(A<0)throw new Error(\"ZSTD_ERROR: \"+this.zstdGetErrorName(A)+\",  error code: \"+A)},A}(),D=null,a=null;var G=function(){return!!D&&!!a},F=function(A){function g(){return null!==A&&A.apply(this,arguments)||this}return I(g,A),g.compress=function(A,I,B){if(void 0===I&&(I=3),void 0===B&&(B=!1),!G())throw new Error(\"Error: Zstd library not initialized. Please call the ZstdInit before usages\");g.isCompressInit||(g.initCompressFunctions(),g.isCompressInit=!0);var C,Q=D._malloc(g.inputSizeCo),E=D._malloc(g.outputSizeCo);try{C=g.initCompressStream()}catch(A){throw D._free(Q),D._free(E),new Error(A)}g.setCompressionLevel(C,I,B);var o=D._malloc(g.positionSize),F=D._malloc(g.positionSize),y=new Uint8Array([]),s=g.inputSizeCo,w=0;try{for(;w<A.length;){var R=g.calculateReadBytes(w,s,A);D.HEAPU8.set(A.subarray(w,w+R),Q),w+=R;var S=R<s,N=S?g.zstdEEnd:g.zstdEContinue,h=new i(o,R,Q),U=void 0;do{var L=new i(F,g.outputSizeCo,E);D.setValue(L.positionPtr,0,\"i32\"),D.setValue(h.positionPtr,0,\"i32\");var k=g.zstdCompressStream2SimpleArgs(C,L.dataPtr,L.size,L.positionPtr,h.dataPtr,h.size,h.positionPtr,N);a.checkError(k),y=g.getDataFromTransformation(L,y),U=S?0===k:D.getValue(h.positionPtr,\"i32\")===h.size}while(!U);if(D.setValue(h.positionPtr,0,\"i32\"),S)break}}finally{g.zstdFreeCStream(C),D._free(Q),D._free(E),D._free(o),D._free(F)}return y},g.setCompressionLevel=function(A,I,B){a.checkError(g.zstdCCtxSetParameter(A,g.zstdCCompressionLevel,I)),a.checkError(g.zstdCCtxSetParameter(A,g.zstdCChecksumFlag,B)),g.zstdCCtxSetParameter(A,g.zstdCNbWorkers,4)},g.initCompressStream=function(){var A=g.zstdCreateCStream();if(g.zstdInitCStream(A),!A)throw new Error(\"ZSTD Stream compress initialization failed.\");return A},g.initCompressFunctions=function(){g.zstdCStreamInSize=D.cwrap(\"ZSTD_CStreamInSize\",\"number\",[]),g.zstdCStreamOutSize=D.cwrap(\"ZSTD_CStreamOutSize\",\"number\",[]),g.zstdCreateCStream=D.cwrap(\"ZSTD_createCStream\",\"number\",[]),g.zstdInitCStream=D.cwrap(\"ZSTD_initCStream\",\"number\",[\"number\"]),g.zstdCCtxSetParameter=D.cwrap(\"ZSTD_CCtx_setParameter\",\"number\",[\"number\",\"number\",\"number\"]),g.zstdCompressStream2SimpleArgs=D.cwrap(\"ZSTD_compressStream2_simpleArgs\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\",\"number\",\"number\"]),g.zstdFreeCStream=D.cwrap(\"ZSTD_freeCStream\",\"number\",[\"number\"]),g.inputSizeCo=g.zstdCStreamInSize(),g.outputSizeCo=g.zstdCStreamOutSize()},g.zstdEContinue=1,g.zstdEEnd=2,g.zstdCCompressionLevel=100,g.zstdCChecksumFlag=201,g.zstdCNbWorkers=400,g.isCompressInit=!1,g}(function(){function A(){}return A.decompress=function(I){if(!G())throw new Error(\"Error: Zstd library not initialized. Please call the ZstdInit before usages\");A.isDecompressInit||(A.initDecompressFunctions(),A.isDecompressInit=!0);var g,B=D._malloc(A.inputSize*I.BYTES_PER_ELEMENT),C=D._malloc(A.outputSize*I.BYTES_PER_ELEMENT),Q=A.zstdCreateDStream();if(!Q)throw D._free(B),D._free(C),new Error(\"ZSTD Stream decompress initialization failed.\");g=A.zstdInitDStream(Q);var E=0,o=D._malloc(A.positionSize),F=D._malloc(A.positionSize),y=new Uint8Array([]);try{for(;E<I.length;){var s=A.calculateReadBytes(E,g,I);D.HEAPU8.set(I.subarray(E,E+s),B),E+=s;for(var w=s<g,R=new i(o,s,B);D.getValue(R.positionPtr,\"i32\")<R.size;){var S=new i(F,A.outputSize,C);D.setValue(S.positionPtr,0,\"i32\"),D.setValue(R.positionPtr,0,\"i32\"),g=A.zstdDecompressStreamSimpleArgs(Q,S.dataPtr,S.size,S.positionPtr,R.dataPtr,R.size,R.positionPtr),a.checkError(g),y=A.getDataFromTransformation(S,y)}if(D.setValue(R.positionPtr,0,\"i32\"),w)break}}finally{A.zstdFreeDStream(Q),D._free(B),D._free(C),D._free(o),D._free(F)}return y},A.getDataFromTransformation=function(A,I){var g=D.HEAPU8.subarray(A.dataPtr,A.dataPtr+D.getValue(A.positionPtr,\"i32\")),B=new Uint8Array(I.length+g.length);return B.set(I),B.set(g,I.length),B},A.initDecompressFunctions=function(){A.zstdDStreamInSize=D.cwrap(\"ZSTD_DStreamInSize\",\"number\",[]),A.zstdDStreamOutSize=D.cwrap(\"ZSTD_DStreamOutSize\",\"number\",[]),A.zstdCreateDStream=D.cwrap(\"ZSTD_createDStream\",\"number\",[]),A.zstdInitDStream=D.cwrap(\"ZSTD_initDStream\",\"number\",[\"number\"]),A.zstdDecompressStreamSimpleArgs=D.cwrap(\"ZSTD_decompressStream_simpleArgs\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\",\"number\"]),A.zstdFreeDStream=D.cwrap(\"ZSTD_freeDStream\",\"number\",[\"number\"]),A.inputSize=A.zstdDStreamInSize(),A.outputSize=A.zstdDStreamOutSize()},A.positionSize=4,A.isDecompressInit=!1,A.calculateReadBytes=function(A,I,g){return Math.min(A+I,g.length)-A},A}()),y=function(A){function g(){return null!==A&&A.apply(this,arguments)||this}return I(g,A),g.compress=function(A,I){if(void 0===I&&(I=3),!G())throw new Error(\"Error: Zstd library not initialized. Please call the ZstdInit before usages\");if(g.isCompressInit||(g.initCompressFunctions(),g.isCompressInit=!0),A.length<=100)throw new Error(\"Length of the payload is too small. (Min length: >100)\");var B=A.byteLength+g.zstdFrameHeaderSizeMax,C=g.createArrayPointer(A,B),Q=D._malloc(g.zstdCompressBound(A.length));try{var E=g.zstdCompress(Q,g.zstdCompressBound(A.length),C,B,I);return a.checkError(E),new Uint8Array(D.HEAPU8.subarray(Q,Q+E))}finally{D._free(C),D._free(Q)}},g.initCompressFunctions=function(){g.zstdCompress=D.cwrap(\"ZSTD_compress\",\"number\",[\"number\",\"number\",\"number\",\"number\",\"number\"]),g.zstdCompressBound=D.cwrap(\"ZSTD_compressBound\",\"number\",[\"number\"])},g.isCompressInit=!1,g}(function(){function A(){}return A.decompress=function(I){if(!G())throw new Error(\"Error: Zstd library not initialized. Please call the ZstdInit before usages\");A.isDecompressInit||(A.initDecompressFunctions(),A.isDecompressInit=!0);var g=I.length,B=A.createArrayPointer(I,g),C=A.zstdGetFrameContentSize(B,g),Q=D._malloc(C);a.checkError(C);try{var E=A.zstdDecompress(Q,C,B,g);return a.checkError(E),new Uint8Array(D.HEAPU8.subarray(Q,Q+E-A.zstdFrameHeaderSizeMax))}finally{D._free(B),D._free(Q)}},A.initDecompressFunctions=function(){A.zstdDecompress=D.cwrap(\"ZSTD_decompress\",\"number\",[\"number\",\"number\",\"number\",\"number\"]),A.zstdGetFrameContentSize=D.cwrap(\"ZSTD_getFrameContentSize\",\"number\",[\"number\",\"number\"])},A.createArrayPointer=function(A,I){var g=D._malloc(I);return D.HEAPU8.set(A,g),g},A.zstdFrameHeaderSizeMax=18,A.isDecompressInit=!1,A}());function s(){return g(this,void 0,void 0,(function(){return B(this,(function(A){return[2,(I=E,g={ZstdSimple:y,ZstdStream:F},new Promise((function(A,B){D&&A({ZstdSimple:g.ZstdSimple,ZstdStream:g.ZstdStream}),(\"function\"==typeof I?I:I.default)().then((function(I){a=new o(D=I),A({ZstdSimple:g.ZstdSimple,ZstdStream:g.ZstdStream})})).catch((function(A){B(A)}))})))];var I,g}))}))}export{s as ZstdInit,y as ZstdSimple,F as ZstdStream};\n//# sourceMappingURL=index.js.map\n",
  "import { join, dirname, resolve } from \"path\";\nimport { homedir } from \"os\";\nimport { renameSync, unlinkSync, mkdirSync, rmdirSync, statSync } from \"fs\";\nimport tar from \"tar\";\nimport { ZstdInit } from \"@oneidentity/zstd-js/wasm\";\n\nconst appSupportDir = join(homedir(), \"Library\", \"Application Support\");\n\n// todo (yoav): share type with cli\nlet localInfo: {\n  version: string;\n  hash: string;\n  bucketUrl: string;\n  channel: string;\n  name: string;\n  identifier: string;\n};\n\nlet updateInfo: {\n  version: string;\n  hash: string;\n  updateAvailable: boolean;\n  updateReady: boolean;\n  error: string;\n};\n\nconst Updater = {\n  // workaround for some weird state stuff in this old version of bun\n  // todo: revisit after updating to the latest bun\n  updateInfo: () => {\n    return updateInfo;\n  },\n  // todo: allow switching channels, by default will check the current channel\n  checkForUpdate: async () => {\n    const localInfo = await Updater.getLocallocalInfo();\n\n    if (localInfo.channel === \"dev\") {\n      return {\n        version: localInfo.version,\n        hash: localInfo.hash,\n        updateAvailable: false,\n        updateReady: false,\n        error: \"\",\n      };\n    }\n\n    const channelBucketUrl = await Updater.channelBucketUrl();\n\n    const cacheBuster = Math.random().toString(36).substring(7);\n    const updateInfoResponse = await fetch(\n      join(channelBucketUrl, `update.json?${cacheBuster}`)\n    );\n\n    if (updateInfoResponse.ok) {\n      updateInfo = await updateInfoResponse.json();\n\n      if (updateInfo.hash !== localInfo.hash) {\n        updateInfo.updateAvailable = true;\n      }\n    } else {\n      console.error(\"Failed to fetch update info\", updateInfoResponse);\n    }\n\n    return updateInfo;\n  },\n\n  downloadUpdate: async () => {\n    const appDataFolder = await Updater.appDataFolder();\n    const channelBucketUrl = await Updater.channelBucketUrl();\n    const appFileName = localInfo.name;\n\n    let currentHash = (await Updater.getLocallocalInfo()).hash;\n    let latestHash = (await Updater.checkForUpdate()).hash;\n\n    let currentTarPath = join(\n      appDataFolder,\n      \"self-extraction\",\n      `${currentHash}.tar`\n    );\n    const latestTarPath = join(\n      appDataFolder,\n      \"self-extraction\",\n      `${latestHash}.tar`\n    );\n\n    const seenHashes = [];\n\n    // todo (yoav): add a check to the while loop that checks for a hash we've seen before\n    // so that update loops that are cyclical can be broken\n    if (!(await Bun.file(latestTarPath).exists())) {\n      while (currentHash !== latestHash) {\n        seenHashes.push(currentHash);\n        const currentTar = Bun.file(currentTarPath);\n\n        if (!(await currentTar.exists())) {\n          // tar file of the current version not found\n          // so we can't patch it. We need the byte-for-byte tar file\n          // so break out and download the full version\n          break;\n        }\n\n        // check if there's a patch file for it\n        const patchResponse = await fetch(\n          join(channelBucketUrl, `${currentHash}.patch`)\n        );\n\n        if (!patchResponse.ok) {\n          // patch not found\n          break;\n        }\n\n        // The patch file's name is the hash of the \"from\" version\n        const patchFilePath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${currentHash}.patch`\n        );\n        await Bun.write(patchFilePath, await patchResponse.arrayBuffer());\n        // patch it to a tmp name\n        const tmpPatchedTarFilePath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `from-${currentHash}.tar`\n        );\n\n        // Note: cwd should be Contents/MacOS/ where the binaries are in the amc app bundle\n        try {\n          Bun.spawnSync([\n            \"bspatch\",\n            currentTarPath,\n            tmpPatchedTarFilePath,\n            patchFilePath,\n          ]);\n        } catch (error) {\n          break;\n        }\n\n        let versionSubpath = \"\";\n        const untarDir = join(appDataFolder, \"self-extraction\", \"tmpuntar\");\n        mkdirSync(untarDir, { recursive: true });\n\n        // extract just the version.json from the patched tar file so we can see what hash it is now\n        await tar.x({\n          // gzip: false,\n          file: tmpPatchedTarFilePath,\n          cwd: untarDir,\n          filter: (path, stat) => {\n            if (path.endsWith(\"Resources/version.json\")) {\n              versionSubpath = path;\n              return true;\n            } else {\n              return false;\n            }\n          },\n        });\n\n        const currentVersionJson = await Bun.file(\n          join(untarDir, versionSubpath)\n        ).json();\n        const nextHash = currentVersionJson.hash;\n\n        if (seenHashes.includes(nextHash)) {\n          console.log(\"Warning: cyclical update detected\");\n          break;\n        }\n\n        seenHashes.push(nextHash);\n\n        if (!nextHash) {\n          break;\n        }\n        // Sync the patched tar file to the new hash\n        const updatedTarPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${nextHash}.tar`\n        );\n        renameSync(tmpPatchedTarFilePath, updatedTarPath);\n\n        // delete the old tar file\n        unlinkSync(currentTarPath);\n        unlinkSync(patchFilePath);\n        rmdirSync(untarDir, { recursive: true });\n\n        currentHash = nextHash;\n        currentTarPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          `${currentHash}.tar`\n        );\n        // loop through applying patches until we reach the latest version\n        // if we get stuck then exit and just download the full latest version\n      }\n\n      // If we weren't able to apply patches to the current version,\n      // then just download it and unpack it\n      if (currentHash !== latestHash) {\n        const cacheBuster = Math.random().toString(36).substring(7);\n        const urlToLatestTarball = join(\n          channelBucketUrl,\n          `${appFileName}.app.tar.zst`\n        );\n        const prevVersionCompressedTarballPath = join(\n          appDataFolder,\n          \"self-extraction\",\n          \"latest.tar.zst\"\n        );\n        const response = await fetch(urlToLatestTarball + `?${cacheBuster}`);\n\n        if (response.ok && response.body) {\n          const reader = response.body.getReader();\n\n          const writer = Bun.file(prevVersionCompressedTarballPath).writer();\n\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            await writer.write(value);\n          }\n          await writer.flush();\n          writer.end();\n        } else {\n          console.log(\"latest version not found at: \", urlToLatestTarball);\n        }\n\n        await ZstdInit().then(async ({ ZstdSimple }) => {\n          const data = new Uint8Array(\n            await Bun.file(prevVersionCompressedTarballPath).arrayBuffer()\n          );\n          const uncompressedData = ZstdSimple.decompress(data);\n\n          await Bun.write(latestTarPath, uncompressedData);\n        });\n\n        unlinkSync(prevVersionCompressedTarballPath);\n        try {\n          unlinkSync(currentTarPath);\n        } catch (error) {\n          // Note: ignore the error. it may have already been deleted by the patching process\n          // if the patching process only got halfway\n        }\n      }\n    }\n\n    // Note: Bun.file().exists() caches the result, so we nee d an new instance of Bun.file() here\n    // to check again\n    if (await Bun.file(latestTarPath).exists()) {\n      // download patch for this version, apply it.\n      // check for patch from that tar and apply it, until it matches the latest version\n      // as a fallback it should just download and unpack the latest version\n      updateInfo.updateReady = true;\n    } else {\n      updateInfo.error = \"Failed to download latest version\";\n    }\n  },\n\n  // todo (yoav): this should emit an event so app can cleanup or block the restart\n  // todo (yoav): rename this to quitAndApplyUpdate or something\n  applyUpdate: async () => {\n    if (updateInfo?.updateReady) {\n      const appDataFolder = await Updater.appDataFolder();\n      const extractionFolder = join(appDataFolder, \"self-extraction\");\n      let latestHash = (await Updater.checkForUpdate()).hash;\n      const latestTarPath = join(extractionFolder, `${latestHash}.tar`);\n\n      let appBundleSubpath: string = \"\";\n\n      if (await Bun.file(latestTarPath).exists()) {\n        await tar.x({\n          // gzip: false,\n          file: latestTarPath,\n          cwd: extractionFolder,\n          onentry: (entry) => {\n            // find the first .app bundle in the tarball\n            // Some apps may have nested .app bundles\n            if (!appBundleSubpath && entry.path.endsWith(\".app/\")) {\n              appBundleSubpath = entry.path;\n            }\n          },\n        });\n\n        if (!appBundleSubpath) {\n          console.error(\"Failed to find app bundle in tarball\");\n          return;\n        }\n\n        // Note: resolve here removes the extra trailing / that the tar file adds\n        const newAppBundlePath = resolve(\n          join(extractionFolder, appBundleSubpath)\n        );\n        // Note: dirname(process.execPath) is the path to the running app bundle's\n        // Contents/MacOS directory\n        const runningAppBundlePath = resolve(\n          dirname(process.execPath),\n          \"..\",\n          \"..\"\n        );\n        const backupAppBundlePath = join(extractionFolder, \"backup.app\");\n\n        try {\n          // const backupState = statSync(backupAppBundlePath);\n          if (statSync(backupAppBundlePath, { throwIfNoEntry: false })) {\n            rmdirSync(backupAppBundlePath, { recursive: true });\n          } else {\n            console.log(\"backupAppBundlePath does not exist\");\n          }\n          renameSync(runningAppBundlePath, backupAppBundlePath);\n          renameSync(newAppBundlePath, runningAppBundlePath);\n        } catch (error) {\n          console.error(\"Failed to replace app with new version\", error);\n          return;\n        }\n\n        await Bun.spawn([\"open\", runningAppBundlePath]);\n        process.exit(0);\n      }\n    }\n  },\n\n  channelBucketUrl: async () => {\n    await Updater.getLocallocalInfo();\n    // todo: tmp hardcode canary\n    return join(localInfo.bucketUrl, localInfo.channel);\n  },\n\n  appDataFolder: async () => {\n    await Updater.getLocallocalInfo();\n    const appDataFolder = join(\n      appSupportDir,\n      localInfo.identifier,\n      localInfo.name\n    );\n\n    return appDataFolder;\n  },\n\n  // TODO: consider moving this from \"Updater.localInfo\" to \"BuildVars\"\n  localInfo: {\n    version: async () => {\n      return (await Updater.getLocallocalInfo()).version;\n    },\n    hash: async () => {\n      return (await Updater.getLocallocalInfo()).hash;\n    },\n    channel: async () => {\n      return (await Updater.getLocallocalInfo()).channel;\n    },\n    bucketUrl: async () => {\n      return (await Updater.getLocallocalInfo()).bucketUrl;\n    },\n  },\n\n  getLocallocalInfo: async () => {\n    if (localInfo) {\n      return localInfo;\n    }\n\n    try {\n      localInfo = await Bun.file(\"../Resources/version.json\").json();\n      return localInfo;\n    } catch (error) {\n      // Handle the error\n      console.error(\"Failed to read version.json\", error);\n\n      // Then rethrow so the app crashes\n      throw error;\n    }\n  },\n};\n\nexport { Updater };\n",
  "import { zigRPC } from \"../proc/zig\";\nimport * as fs from \"fs\";\nimport { execSync } from \"child_process\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport {\n  type RPCSchema,\n  type RPCRequestHandler,\n  type RPCMessageHandlerFn,\n  type WildcardRPCMessageHandlerFn,\n  type RPCOptions,\n  createRPC,\n} from \"rpc-anywhere\";\nimport { Updater } from \"./Updater\";\nimport type { BuiltinBunToWebviewSchema } from \"../../browser/builtinrpcSchema\";\n\nconst BrowserViewMap = {};\nlet nextWebviewId = 1;\n\nconst CHUNK_SIZE = 1024 * 4; // 4KB\n\ntype BrowserViewOptions<T = undefined> = {\n  url: string | null;\n  html: string | null;\n  preload: string | null;\n  partition: string | null;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  rpc: T;\n  syncRpc: { [method: string]: (params: any) => any };\n  hostWebviewId: number;\n  autoResize: boolean;\n};\n\ninterface ElectrobunWebviewRPCSChema {\n  bun: RPCSchema;\n  webview: RPCSchema;\n}\n\nconst defaultOptions: BrowserViewOptions = {\n  url: \"https://electrobun.dev\",\n  html: null,\n  preload: null,\n  frame: {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  },\n};\n\nconst internalSyncRpcHandlers = {\n  webviewTagInit: ({\n    hostWebviewId,\n    windowId,\n    url,\n    html,\n    preload,\n    partition,\n    frame,\n  }) => {\n    const webviewForTag = new BrowserView({\n      url,\n      html,\n      preload,\n      partition,\n      frame,\n      hostWebviewId,\n      autoResize: false,\n    });\n\n    // Note: we have to give it a couple of ticks to fully create the browserview\n    // which has a settimout init() which calls rpc that has a settimeout and all the serialization/deserialization\n\n    // TODO: we really need a better way to handle the whole view creation flow and\n    // maybe an onready event or something.\n    setTimeout(() => {\n      zigRPC.request.addWebviewToWindow({\n        windowId: windowId,\n        webviewId: webviewForTag.id,\n      });\n\n      if (url) {\n        webviewForTag.loadURL(url);\n      } else if (html) {\n        webviewForTag.loadHTML(html);\n      }\n    }, 100);\n\n    return webviewForTag.id;\n  },\n};\n\nconst hash = await Updater.localInfo.hash();\n// Note: we use the build's hash to separate from different apps and different builds\n// but we also want a randomId to separate different instances of the same app\nconst randomId = Math.random().toString(36).substring(7);\n\nexport class BrowserView<T> {\n  id: number = nextWebviewId++;\n  hostWebviewId?: number;\n  url: string | null = null;\n  html: string | null = null;\n  preload: string | null = null;\n  partition: string | null = null;\n  autoResize: boolean = true;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } = {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  };\n  pipePrefix: string;\n  inStream: fs.WriteStream;\n  outStream: fs.ReadStream;\n  rpc?: T;\n  syncRpc?: { [method: string]: (params: any) => any };\n\n  constructor(options: Partial<BrowserViewOptions<T>> = defaultOptions) {\n    this.url = options.url || defaultOptions.url;\n    this.html = options.html || defaultOptions.html;\n    this.preload = options.preload || defaultOptions.preload;\n    this.frame = options.frame\n      ? { ...defaultOptions.frame, ...options.frame }\n      : { ...defaultOptions.frame };\n    this.rpc = options.rpc;\n    this.syncRpc = { ...(options.syncRpc || {}), ...internalSyncRpcHandlers };\n    this.partition = options.partition || null;\n    // todo (yoav): since collisions can crash the app add a function that checks if the\n    // file exists first\n    this.pipePrefix = `/private/tmp/electrobun_ipc_pipe_${hash}_${randomId}_${this.id}`;\n    this.hostWebviewId = options.hostWebviewId;\n    this.autoResize = options.autoResize === false ? false : true;\n\n    this.init();\n  }\n\n  init() {\n    // TODO: add a then to this that fires an onReady event\n    zigRPC.request.createWebview({\n      id: this.id,\n      hostWebviewId: this.hostWebviewId || null,\n      pipePrefix: this.pipePrefix,\n      partition: this.partition,\n      // TODO: decide whether we want to keep sending url/html\n      // here, if we're manually calling loadURL/loadHTML below\n      // then we can remove it from the api here\n      url: this.url,\n      html: this.html,\n      preload: this.preload,\n      frame: {\n        width: this.frame.width,\n        height: this.frame.height,\n        x: this.frame.x,\n        y: this.frame.y,\n      },\n      autoResize: this.autoResize,\n    });\n\n    this.createStreams();\n\n    BrowserViewMap[this.id] = this;\n  }\n\n  createStreams() {\n    const webviewPipeIn = this.pipePrefix + \"_in\";\n    const webviewPipeOut = this.pipePrefix + \"_out\";\n\n    try {\n      execSync(\"mkfifo \" + webviewPipeOut);\n    } catch (e) {\n      console.log(\"pipe out already exists\");\n    }\n\n    try {\n      execSync(\"mkfifo \" + webviewPipeIn);\n    } catch (e) {\n      console.log(\"pipe in already exists\");\n    }\n\n    const inStream = fs.createWriteStream(webviewPipeIn, {\n      flags: \"r+\",\n    });\n\n    // todo: something has to be written to it to open it\n    // look into this\n    inStream.write(\"\\n\");\n\n    this.inStream = inStream;\n\n    // Open the named pipe for reading\n\n    const outStream = fs.createReadStream(webviewPipeOut, {\n      flags: \"r+\",\n    });\n\n    this.outStream = outStream;\n\n    if (this.rpc) {\n      this.rpc.setTransport(this.createTransport());\n    }\n  }\n\n  sendMessageToWebview(jsonMessage) {\n    const stringifiedMessage =\n      typeof jsonMessage === \"string\"\n        ? jsonMessage\n        : JSON.stringify(jsonMessage);\n    // todo (yoav): make this a shared const with the browser api\n    const wrappedMessage = `window.__electrobun.receiveMessageFromBun(${stringifiedMessage})`;\n    this.executeJavascript(wrappedMessage);\n  }\n\n  // Note: the OS has a buffer limit on named pipes. If we overflow it\n  // it won't trigger the kevent for zig to read the pipe and we'll be stuck.\n  // so we have to chunk it\n  executeJavascript(js: string) {\n    let offset = 0;\n    while (offset < js.length) {\n      const chunk = js.slice(offset, offset + CHUNK_SIZE);\n      this.inStream.write(chunk);\n      offset += CHUNK_SIZE;\n    }\n\n    // Ensure the newline is written after all chunks\n    this.inStream.write(\"\\n\");\n  }\n\n  loadURL(url: string) {\n    this.url = url;\n    zigRPC.request.loadURL({ webviewId: this.id, url: this.url });\n  }\n\n  loadHTML(html: string) {\n    this.html = html;\n    zigRPC.request.loadHTML({ webviewId: this.id, html: this.html });\n  }\n\n  // todo (yoav): move this to a class that also has off, append, prepend, etc.\n  // name should only allow browserView events\n  // Note: normalize event names to willNavigate instead of ['will-navigate'] to save\n  // 5 characters per usage and allow minification to be more effective.\n  on(\n    name:\n      | \"will-navigate\"\n      | \"did-navigate\"\n      | \"did-navigate-in-page\"\n      | \"did-commit-navigation\"\n      | \"dom-ready\",\n    handler\n  ) {\n    const specificName = `${name}-${this.id}`;\n    electrobunEventEmitter.on(specificName, handler);\n  }\n\n  createTransport = () => {\n    const that = this;\n\n    return {\n      send(message) {\n        // todo (yoav): note: this is the same as the zig transport\n        try {\n          const messageString = JSON.stringify(message);\n          that.sendMessageToWebview(messageString);\n        } catch (error) {\n          console.error(\"bun: failed to serialize message to webview\", error);\n        }\n      },\n      registerHandler(handler) {\n        let buffer = \"\";\n        // todo (yoav): readStream function is identical to the one in zig.ts\n        // todo: There seems to be a bug in bun where if you open multiple windows at the same time\n        // that.outStream.on(\"data\") doesn't register the handler for some of them so add a timeout to\n        // help ensure it does.\n        // could be a delay in the pipe creation and the way bun lazy loads things where it just doesn't\n        // subscribe to data events properly.\n        // hopefully this is fixed in a bun version bump.\n        // readable streams have an on('ready') event but it fires too soon to be useful here.\n        setTimeout(() => {\n          that.outStream.on(\"data\", (chunk) => {\n            buffer += chunk.toString();\n            let eolIndex;\n\n            while ((eolIndex = buffer.indexOf(\"\\n\")) >= 0) {\n              const line = buffer.slice(0, eolIndex).trim();\n              buffer = buffer.slice(eolIndex + 1);\n              if (line) {\n                try {\n                  const event = JSON.parse(line);\n                  handler(event);\n                } catch (error) {\n                  // Non-json things are just bubbled up to the console.\n                  console.error(\"webview: \", line);\n                }\n              }\n            }\n          });\n        }, 500);\n      },\n    };\n  };\n\n  static getById(id: number) {\n    return BrowserViewMap[id];\n  }\n\n  static getAll() {\n    return Object.values(BrowserViewMap);\n  }\n\n  static defineRPC<\n    Schema extends ElectrobunWebviewRPCSChema,\n    BunSchema extends RPCSchema = Schema[\"bun\"],\n    WebviewSchema extends RPCSchema = Schema[\"webview\"]\n  >(config: {\n    maxRequestTime?: number;\n    handlers: {\n      requests?: RPCRequestHandler<BunSchema[\"requests\"]>;\n      messages?: {\n        [key in keyof BunSchema[\"messages\"]]: RPCMessageHandlerFn<\n          BunSchema[\"messages\"],\n          key\n        >;\n      } & {\n        \"*\"?: WildcardRPCMessageHandlerFn<BunSchema[\"messages\"]>;\n      };\n    };\n  }) {\n    // Note: RPC Anywhere requires defining the requests that a schema handles and the messages that a schema sends.\n    // eg: BunSchema {\n    //   requests: // ... requests bun handles, sent by webview\n    //   messages: // ... messages bun sends, handled by webview\n    // }\n    // In some generlized contexts that makes sense,\n    // In the Electrobun context it can feel a bit counter-intuitive so we swap this around a bit. In Electrobun, the\n    // webview and bun are known endpoints so we simplify schema definitions by combining them.\n    // Schema {\n    //   bun: BunSchema {\n    //      requests: // ... requests bun handles, sent by webview,\n    //      messages: // ... messages bun handles, sent by webview\n    //    },\n    //   webview: WebviewSchema {\n    //      requests: // ... requests webview handles, sent by bun,\n    //      messages: // ... messages webview handles, sent by bun\n    //    },\n    // }\n    // This way from bun, webview.rpc.request.getTitle() and webview.rpc.send.someMessage maps to the schema\n    // MySchema.webview.requests.getTitle and MySchema.webview.messages.someMessage\n    // and in the webview, Electroview.rpc.request.getFileContents maps to\n    // MySchema.bun.requests.getFileContents.\n    // electrobun also treats messages as \"requests that we don't wait for to complete\", and normalizes specifying the\n    // handlers for them alongside request handlers.\n\n    type mixedWebviewSchema = {\n      requests: BunSchema[\"requests\"];\n      messages: WebviewSchema[\"messages\"];\n    };\n\n    type mixedBunSchema = {\n      requests: WebviewSchema[\"requests\"] &\n        BuiltinBunToWebviewSchema[\"requests\"];\n      messages: BunSchema[\"messages\"];\n    };\n\n    const rpcOptions = {\n      maxRequestTime: config.maxRequestTime,\n      requestHandler: config.handlers.requests,\n      transport: {\n        // Note: RPC Anywhere will throw if you try add a message listener if transport.registerHandler is falsey\n        registerHandler: () => {},\n      },\n    } as RPCOptions<mixedWebviewSchema, mixedBunSchema>;\n\n    const rpc = createRPC<mixedWebviewSchema, mixedBunSchema>(rpcOptions);\n\n    const messageHandlers = config.handlers.messages;\n    if (messageHandlers) {\n      // note: this can only be done once there is a transport\n      // @ts-ignore - this is due to all the schema mixing we're doing, fine to ignore\n      // while types in here are borked, they resolve correctly/bubble up to the defineRPC call site.\n      rpc.addMessageListener(\n        \"*\",\n        (messageName: keyof BunSchema[\"messages\"], payload) => {\n          const globalHandler = messageHandlers[\"*\"];\n          if (globalHandler) {\n            globalHandler(messageName, payload);\n          }\n\n          const messageHandler = messageHandlers[messageName];\n          if (messageHandler) {\n            messageHandler(payload);\n          }\n        }\n      );\n    }\n\n    return rpc;\n  }\n}\n",
  "import { resolve } from \"path\";\n\nconst RESOURCES_FOLDER = resolve(\"../Resources/\");\n\nexport const VIEWS_FOLDER = resolve(RESOURCES_FOLDER, \"app/views\");\n",
  "import { zigRPC, type MenuItemConfig } from \"../proc/zig\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport { VIEWS_FOLDER } from \"./Paths\";\nimport { join } from \"path\";\n\nlet nextTrayId = 1;\nconst TrayMap = {};\n\ntype ConstructorOptions = {\n  title?: string;\n  image?: string;\n  template?: boolean;\n  width?: number;\n  height?: number;\n};\n\nexport class Tray {\n  id: number = nextTrayId++;\n\n  constructor({\n    title = \"\",\n    image = \"\",\n    template = true,\n    width = 16,\n    height = 16,\n  }: ConstructorOptions = {}) {\n    console.log(\"img\", image);\n    console.log(\"img\", this.resolveImagePath(image));\n    zigRPC.request.createTray({\n      id: this.id,\n      title,\n      image: this.resolveImagePath(image),\n      template,\n      width,\n      height,\n    });\n\n    TrayMap[this.id] = this;\n  }\n\n  resolveImagePath(imgPath: string) {\n    if (imgPath.startsWith(\"views://\")) {\n      return join(VIEWS_FOLDER, imgPath.replace(\"views://\", \"\"));\n    } else {\n      // can specify any file path here\n      return imgPath;\n    }\n  }\n\n  setTitle(title: string) {\n    zigRPC.request.setTrayTitle({ id: this.id, title });\n  }\n\n  setImage(imgPath: string) {\n    zigRPC.request.setTrayImage({\n      id: this.id,\n      image: this.resolveImagePath(imgPath),\n    });\n  }\n\n  setMenu(menu: Array<MenuItemConfig>) {\n    const menuWithDefaults = menuConfigWithDefaults(menu);\n    zigRPC.request.setTrayMenu({\n      id: this.id,\n      menuConfig: JSON.stringify(menuWithDefaults),\n    });\n  }\n\n  on(name: \"tray-clicked\", handler) {\n    const specificName = `${name}-${this.id}`;\n    electrobunEventEmitter.on(specificName, handler);\n  }\n\n  static getById(id: number) {\n    return TrayMap[id];\n  }\n\n  static getAll() {\n    return Object.values(TrayMap);\n  }\n}\n\nconst menuConfigWithDefaults = (\n  menu: Array<MenuItemConfig>\n): Array<MenuItemConfig> => {\n  return menu.map((item) => {\n    if (item.type === \"divider\" || item.type === \"separator\") {\n      return { type: \"divider\" };\n    } else {\n      return {\n        label: item.label || \"\",\n        type: item.type || \"normal\",\n        action: item.action || \"\",\n        // default enabled to true unless explicitly set to false\n        enabled: item.enabled === false ? false : true,\n        checked: Boolean(item.checked),\n        hidden: Boolean(item.hidden),\n        tooltip: item.tooltip || undefined,\n        ...(item.submenu\n          ? { submenu: menuConfigWithDefaults(item.submenu) }\n          : {}),\n      };\n    }\n  });\n};\n",
  "import { join, resolve } from \"path\";\nimport { type RPCSchema, type RPCTransport, createRPC } from \"rpc-anywhere\";\nimport { execSync } from \"child_process\";\nimport * as fs from \"fs\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport { BrowserView } from \"../core/BrowserView\";\nimport { Updater } from \"../core/Updater\";\nimport { Tray } from \"../core/Tray\";\nconst CHUNK_SIZE = 1024 * 4; // 4KB\n// todo (yoav): webviewBinaryPath and ELECTROBUN_VIEWS_FOLDER should be passed in as cli/env args by the launcher binary\n// will likely be different on different platforms. Right now these are hardcoded for relative paths inside the mac app bundle.\nconst webviewBinaryPath = join(\"native\", \"webview\");\n\nconst hash = await Updater.localInfo.hash();\n// Note: we use the build's hash to separate from different apps and different builds\n// but we also want a randomId to separate different instances of the same app\n// todo (yoav): since collisions can crash the app add a function that checks if the\n// file exists first\nconst randomId = Math.random().toString(36).substring(7);\nconst mainPipe = `/private/tmp/electrobun_ipc_pipe_${hash}_${randomId}_main_in`;\n\ntry {\n  execSync(\"mkfifo \" + mainPipe);\n} catch (e) {\n  console.log(\"pipe out already exists\");\n}\n\nconst zigProc = Bun.spawn([webviewBinaryPath], {\n  stdin: \"pipe\",\n  stdout: \"pipe\",\n  env: {\n    ...process.env,\n    ELECTROBUN_VIEWS_FOLDER: resolve(\"../Resources/app/views\"),\n    MAIN_PIPE_IN: mainPipe,\n  },\n  onExit: (_zigProc) => {\n    // right now just exit the whole app if the webview process dies.\n    // in the future we probably want to try spin it back up aagain\n    process.exit(0);\n  },\n});\n\nprocess.on(\"SIGINT\", (code) => {\n  // todo (yoav): maybe send a friendly signal to the webviews to let them know\n  // we're shutting down\n  // clean up the webview process when the bun process dies.\n  zigProc.kill();\n  // fs.unlinkSync(mainPipe);\n  process.exit();\n});\n\nprocess.on(\"exit\", (code) => {\n  // Note: this can happen when the bun process crashes\n  // make sure that zigProc is killed so it doesn't linger around\n  zigProc.kill();\n});\n\nconst inStream = fs.createWriteStream(mainPipe, {\n  flags: \"r+\",\n});\n\nfunction createStdioTransport(proc): RPCTransport {\n  return {\n    send(message) {\n      try {\n        // TODO: this is the same chunking code as browserview pipes,\n        // should dedupe\n        const messageString = JSON.stringify(message) + \"\\n\";\n\n        let offset = 0;\n        while (offset < messageString.length) {\n          const chunk = messageString.slice(offset, offset + CHUNK_SIZE);\n          inStream.write(chunk);\n          offset += CHUNK_SIZE;\n        }\n\n        // Ensure the newline is written after all chunks\n        inStream.write(\"\\n\");\n      } catch (error) {\n        console.error(\"bun: failed to serialize message to zig\", error);\n      }\n    },\n    registerHandler(handler) {\n      async function readStream(stream) {\n        const reader = stream.getReader();\n        let buffer = \"\";\n\n        try {\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) break;\n            buffer += new TextDecoder().decode(value);\n            let eolIndex;\n            // Process each line contained in the buffer\n            while ((eolIndex = buffer.indexOf(\"\\n\")) >= 0) {\n              const line = buffer.slice(0, eolIndex).trim();\n              buffer = buffer.slice(eolIndex + 1);\n              if (line) {\n                try {\n                  const event = JSON.parse(line);\n                  handler(event);\n                } catch (error) {\n                  // Non-json things are just bubbled up to the console.\n                  console.error(\"zig: \", line);\n                }\n              }\n            }\n          }\n        } catch (error) {\n          console.error(\"Error reading from stream:\", error);\n        } finally {\n          reader.releaseLock();\n        }\n      }\n\n      readStream(proc.stdout);\n    },\n  };\n}\n\n// todo: consider renaming to TrayMenuItemConfig\nexport type MenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<MenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\nexport type ApplicationMenuItemConfig =\n  | { type: \"divider\" | \"separator\" }\n  | {\n      type?: \"normal\";\n      label: string;\n      tooltip?: string;\n      action?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    }\n  | {\n      type?: \"normal\";\n      label?: string;\n      tooltip?: string;\n      role?: string;\n      submenu?: Array<ApplicationMenuItemConfig>;\n      enabled?: boolean;\n      checked?: boolean;\n      hidden?: boolean;\n    };\n\n// todo (yoav): move this stuff to bun/rpc/zig.ts\ntype ZigHandlers = RPCSchema<{\n  requests: {\n    createWindow: {\n      params: {\n        id: number;\n        url: string | null;\n        html: string | null;\n        title: string;\n        frame: {\n          width: number;\n          height: number;\n          x: number;\n          y: number;\n        };\n        styleMask: {\n          Borderless: boolean;\n          Titled: boolean;\n          Closable: boolean;\n          Miniaturizable: boolean;\n          Resizable: boolean;\n          UnifiedTitleAndToolbar: boolean;\n          FullScreen: boolean;\n          FullSizeContentView: boolean;\n          UtilityWindow: boolean;\n          DocModalWindow: boolean;\n          NonactivatingPanel: boolean;\n          HUDWindow: boolean;\n        };\n        titleBarStyle: string;\n      };\n      response: void;\n    };\n    createWebview: {\n      params: {\n        id: number;\n        hostWebviewId: number | null;\n        pipePrefix: string;\n        url: string | null;\n        html: string | null;\n        partition: string | null;\n        preload: string | null;\n        frame: {\n          x: number;\n          y: number;\n          width: number;\n          height: number;\n        };\n        autoResize: boolean;\n      };\n      response: void;\n    };\n\n    addWebviewToWindow: {\n      params: {\n        windowId: number;\n        webviewId: number;\n      };\n      response: void;\n    };\n\n    loadURL: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: void;\n    };\n    loadHTML: {\n      params: {\n        webviewId: number;\n        html: string;\n      };\n      response: void;\n    };\n\n    setTitle: {\n      params: {\n        winId: number;\n        title: string;\n      };\n      response: void;\n    };\n\n    closeWindow: {\n      params: {\n        winId: number;\n      };\n      response: void;\n    };\n\n    // fs\n    moveToTrash: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    showItemInFolder: {\n      params: {\n        path: string;\n      };\n      response: boolean;\n    };\n    openFileDialog: {\n      params: {\n        startingFolder: string | null;\n        allowedFileTypes: string | null;\n        canChooseFiles: boolean;\n        canChooseDirectory: boolean;\n        allowsMultipleSelection: boolean;\n      };\n      response: { openFileDialogResponse: string };\n    };\n\n    // tray and menu\n    createTray: {\n      params: {\n        id: number;\n        title: string;\n        image: string;\n        template: boolean;\n        width: number;\n        height: number;\n      };\n      response: void;\n    };\n    setTrayTitle: {\n      params: {\n        id: number;\n        title: string;\n      };\n      response: void;\n    };\n    setTrayImage: {\n      params: {\n        id: number;\n        image: string;\n      };\n      response: void;\n    };\n    setTrayMenu: {\n      params: {\n        id: number;\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    setApplicationMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n    showContextMenu: {\n      params: {\n        // json string of config\n        menuConfig: string;\n      };\n      response: void;\n    };\n  };\n}>;\n\ntype BunHandlers = RPCSchema<{\n  requests: {\n    decideNavigation: {\n      params: {\n        webviewId: number;\n        url: string;\n      };\n      response: {\n        allow: boolean;\n      };\n    };\n    syncRequest: {\n      params: {\n        webviewId: number;\n        request: string;\n      };\n      response: {\n        payload: string;\n      };\n    };\n    // todo: make these messages instead of requests\n    log: {\n      params: {\n        msg: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    trayEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    applicationMenuEvent: {\n      params: {\n        id: number;\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    contextMenuEvent: {\n      params: {\n        action: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    webviewEvent: {\n      params: {\n        id: number;\n        eventName: string;\n        detail: string;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowClose: {\n      params: {\n        id: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowMove: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n    windowResize: {\n      params: {\n        id: number;\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      };\n      response: {\n        success: boolean;\n      };\n    };\n  };\n}>;\n\nconst zigRPC = createRPC<BunHandlers, ZigHandlers>({\n  transport: createStdioTransport(zigProc),\n  requestHandler: {\n    decideNavigation: ({ webviewId, url }) => {\n      const willNavigate = electrobunEventEmitter.events.webview.willNavigate({\n        url,\n        webviewId,\n      });\n\n      let result;\n      // global will-navigate event\n      result = electrobunEventEmitter.emitEvent(willNavigate);\n\n      result = electrobunEventEmitter.emitEvent(willNavigate, webviewId);\n\n      if (willNavigate.responseWasSet) {\n        return willNavigate.response || { allow: true };\n      } else {\n        return { allow: true };\n      }\n    },\n    syncRequest: ({ webviewId, request: requestStr }) => {\n      const webview = BrowserView.getById(webviewId);\n      const { method, params } = JSON.parse(requestStr);\n\n      if (!webview) {\n        const err = `error: could not find webview with id ${webviewId}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!method) {\n        const err = `error: request missing a method`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      if (!webview.syncRpc || !webview.syncRpc[method]) {\n        const err = `error: webview does not have a handler for method ${method}`;\n        console.log(err);\n        return { payload: err };\n      }\n\n      const handler = webview.syncRpc[method];\n      var response;\n      try {\n        response = handler(params);\n        // Note: Stringify(undefined) returns undefined,\n        // if we send undefined as the payload it'll crash\n        // so send an empty string which is a better analog for\n        // undefined json string\n        if (response === undefined) {\n          response = \"\";\n        }\n      } catch (err) {\n        console.log(err);\n        console.log(\"syncRPC failed with\", { method, params });\n        return { payload: String(err) };\n      }\n\n      const payload = JSON.stringify(response);\n      return { payload };\n    },\n    log: ({ msg }) => {\n      console.log(\"zig: \", msg);\n      return { success: true };\n    },\n    trayEvent: ({ id, action }) => {\n      const tray = Tray.getById(id);\n      if (!tray) {\n        return { success: true };\n      }\n\n      const event = electrobunEventEmitter.events.tray.trayClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    applicationMenuEvent: ({ id, action }) => {\n      const event = electrobunEventEmitter.events.app.applicationMenuClicked({\n        id,\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    contextMenuEvent: ({ action }) => {\n      const event = electrobunEventEmitter.events.app.contextMenuClicked({\n        action,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      return { success: true };\n    },\n    webviewEvent: ({ id, eventName, detail }) => {\n      const eventMap = {\n        \"did-navigate\": \"didNavigate\",\n        \"did-navigate-in-page\": \"didNavigateInPage\",\n        \"did-commit-navigation\": \"didCommitNavigation\",\n        \"dom-ready\": \"domReady\",\n        \"new-window-open\": \"newWindowOpen\",\n      };\n\n      // todo: the events map should use the same hyphenated names instead of camelCase\n      const handler =\n        electrobunEventEmitter.events.webview[eventMap[eventName]];\n\n      if (!handler) {\n        console.log(`!!!no handler for webview event ${eventName}`);\n        return { success: false };\n      }\n\n      const event = handler({\n        id,\n        detail,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: true };\n    },\n    windowClose: ({ id }) => {\n      const handler = electrobunEventEmitter.events.window.close;\n\n      const event = handler({\n        id,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowMove: ({ id, x, y }) => {\n      const handler = electrobunEventEmitter.events.window.move;\n\n      const event = handler({\n        id,\n        x,\n        y,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n    windowResize: ({ id, x, y, width, height }) => {\n      const handler = electrobunEventEmitter.events.window.resize;\n\n      const event = handler({\n        id,\n        x,\n        y,\n        width,\n        height,\n      });\n\n      let result;\n      // global event\n      result = electrobunEventEmitter.emitEvent(event);\n\n      result = electrobunEventEmitter.emitEvent(event, id);\n      // Note: we don't care about the result right now\n\n      return { success: false };\n    },\n  },\n  maxRequestTime: 25000,\n});\n\nexport { zigRPC, zigProc };\n",
  "import { zigRPC } from \"../proc/zig\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\nimport { BrowserView } from \"./BrowserView\";\nimport { type RPC } from \"rpc-anywhere\";\n\nlet nextWindowId = 1;\n\n// todo (yoav): if we default to builtInSchema, we don't want dev to have to define custom handlers\n// for the built-in schema stuff.\ntype WindowOptionsType<T = undefined> = {\n  title: string;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  url: string | null;\n  html: string | null;\n  preload: string | null;\n  rpc?: T;\n  syncRpc?: { [method: string]: (params: any) => any };\n  styleMask?: {};\n  // TODO: implement all of them\n  titleBarStyle: \"hiddenInset\" | \"default\";\n};\n\nconst defaultOptions: WindowOptionsType = {\n  title: \"Electrobun\",\n  frame: {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  },\n  url: \"https://electrobun.dev\",\n  html: null,\n  preload: null,\n  titleBarStyle: \"default\",\n};\n\nconst BrowserWindowMap = {};\n\n// todo (yoav): do something where the type extends the default schema\n// that way we can provide built-in requests/messages and devs can extend it\n\nexport class BrowserWindow<T> {\n  id: number = nextWindowId++;\n  title: string = \"Electrobun\";\n  state: \"creating\" | \"created\" = \"creating\";\n  url: string | null = null;\n  html: string | null = null;\n  preload: string | null = null;\n  frame: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } = {\n    x: 0,\n    y: 0,\n    width: 800,\n    height: 600,\n  };\n  // todo (yoav): make this an array of ids or something\n  webviewId: number;\n\n  constructor(options: Partial<WindowOptionsType<T>> = defaultOptions) {\n    this.title = options.title || \"New Window\";\n    this.frame = options.frame\n      ? { ...defaultOptions.frame, ...options.frame }\n      : { ...defaultOptions.frame };\n    this.url = options.url || null;\n    this.html = options.html || null;\n    this.preload = options.preload || null;\n\n    this.init(options);\n  }\n\n  init({\n    rpc,\n    syncRpc,\n    styleMask,\n    titleBarStyle,\n  }: Partial<WindowOptionsType<T>>) {\n    zigRPC.request.createWindow({\n      id: this.id,\n      title: this.title,\n      url: this.url,\n      html: this.html,\n      frame: {\n        width: this.frame.width,\n        height: this.frame.height,\n        x: this.frame.x,\n        y: this.frame.y,\n      },\n      styleMask: {\n        Borderless: false,\n        Titled: true,\n        Closable: true,\n        Miniaturizable: true,\n        Resizable: true,\n        UnifiedTitleAndToolbar: false,\n        FullScreen: false,\n        FullSizeContentView: false,\n        UtilityWindow: false,\n        DocModalWindow: false,\n        NonactivatingPanel: false,\n        HUDWindow: false,\n        ...(styleMask || {}),\n        ...(titleBarStyle === \"hiddenInset\"\n          ? {\n              Titled: true,\n              FullSizeContentView: true,\n            }\n          : {}),\n      },\n      titleBarStyle: titleBarStyle || \"default\",\n    });\n\n    // todo (yoav): user should be able to override this and pass in their\n    // own webview instance, or instances for attaching to the window.\n    const webview = new BrowserView({\n      // TODO: decide whether we want to keep sending url/html\n      // here, if we're manually calling loadURL/loadHTML below\n      // then we can remove it from the api here\n      url: this.url,\n      html: this.html,\n      preload: this.preload,\n      // frame: this.frame,\n      frame: {\n        x: 0,\n        y: 0,\n        width: this.frame.width,\n        height: this.frame.height,\n      },\n      rpc,\n      syncRpc,\n    });\n\n    this.webviewId = webview.id;\n\n    zigRPC.request.addWebviewToWindow({\n      windowId: this.id,\n      webviewId: webview.id,\n    });\n\n    if (this.url) {\n      webview.loadURL(this.url);\n    } else if (this.html) {\n      webview.loadHTML(this.html);\n    }\n\n    BrowserWindowMap[this.id] = this;\n  }\n\n  get webview() {\n    // todo (yoav): we don't want this to be undefined, so maybe we should just\n    // link directly to the browserview object instead of a getter\n    return BrowserView.getById(this.webviewId) as BrowserView<T>;\n  }\n\n  setTitle(title: string) {\n    this.title = title;\n    return zigRPC.request.setTitle({ winId: this.id, title });\n  }\n\n  close() {\n    return zigRPC.request.closeWindow({ winId: this.id });\n  }\n\n  // todo (yoav): move this to a class that also has off, append, prepend, etc.\n  // name should only allow browserWindow events\n  on(name, handler) {\n    const specificName = `${name}-${this.id}`;\n    electrobunEventEmitter.on(specificName, handler);\n  }\n}\n",
  "import { zigRPC, type ApplicationMenuItemConfig } from \"../proc/zig\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\n\nexport const setApplicationMenu = (menu: Array<ApplicationMenuItemConfig>) => {\n  const menuWithDefaults = menuConfigWithDefaults(menu);\n  zigRPC.request.setApplicationMenu({\n    menuConfig: JSON.stringify(menuWithDefaults),\n  });\n};\n\nexport const on = (name: \"application-menu-clicked\", handler) => {\n  const specificName = `${name}`;\n  electrobunEventEmitter.on(specificName, handler);\n};\n\nconst roleLabelMap = {\n  quit: \"Quit\",\n  hide: \"Hide\",\n  hideOthers: \"Hide Others\",\n  showAll: \"Show All\",\n  undo: \"Undo\",\n  redo: \"Redo\",\n  cut: \"Cut\",\n  copy: \"Copy\",\n  paste: \"Paste\",\n  pasteAndMatchStyle: \"Paste And Match Style\",\n  delete: \"Delete\",\n  selectAll: \"Select All\",\n  startSpeaking: \"Start Speaking\",\n  stopSpeaking: \"Stop Speaking\",\n  enterFullScreen: \"Enter FullScreen\",\n  exitFullScreen: \"Exit FullScreen\",\n  toggleFullScreen: \"Toggle Full Screen\",\n  minimize: \"Minimize\",\n  zoom: \"Zoom\",\n  bringAllToFront: \"Bring All To Front\",\n  close: \"Close\",\n  cycleThroughWindows: \"Cycle Through Windows\",\n  showHelp: \"Show Help\",\n};\n\nconst menuConfigWithDefaults = (\n  menu: Array<ApplicationMenuItemConfig>\n): Array<ApplicationMenuItemConfig> => {\n  return menu.map((item) => {\n    if (item.type === \"divider\" || item.type === \"separator\") {\n      return { type: \"divider\" };\n    } else {\n      return {\n        label: item.label || roleLabelMap[item.role] || \"\",\n        type: item.type || \"normal\",\n        // application menus can either have an action or a role. not both.\n        ...(item.role ? { role: item.role } : { action: item.action || \"\" }),\n        // default enabled to true unless explicitly set to false\n        enabled: item.enabled === false ? false : true,\n        checked: Boolean(item.checked),\n        hidden: Boolean(item.hidden),\n        tooltip: item.tooltip || undefined,\n        ...(item.submenu\n          ? { submenu: menuConfigWithDefaults(item.submenu) }\n          : {}),\n      };\n    }\n  });\n};\n",
  "// TODO: have a context specific menu that excludes role\nimport { zigRPC, type ApplicationMenuItemConfig } from \"../proc/zig\";\nimport electrobunEventEmitter from \"../events/eventEmitter\";\n\nexport const showContextMenu = (menu: Array<ApplicationMenuItemConfig>) => {\n  const menuWithDefaults = menuConfigWithDefaults(menu);\n  zigRPC.request.showContextMenu({\n    menuConfig: JSON.stringify(menuWithDefaults),\n  });\n};\n\nexport const on = (name: \"context-menu-clicked\", handler) => {\n  const specificName = `${name}`;\n  electrobunEventEmitter.on(specificName, handler);\n};\n\n// todo: Consolidate Application menu, context menu, and tray menus can all have roles.\nconst roleLabelMap = {\n  quit: \"Quit\",\n  hide: \"Hide\",\n  hideOthers: \"Hide Others\",\n  showAll: \"Show All\",\n  undo: \"Undo\",\n  redo: \"Redo\",\n  cut: \"Cut\",\n  copy: \"Copy\",\n  paste: \"Paste\",\n  pasteAndMatchStyle: \"Paste And Match Style\",\n  delete: \"Delete\",\n  selectAll: \"Select All\",\n  startSpeaking: \"Start Speaking\",\n  stopSpeaking: \"Stop Speaking\",\n  enterFullScreen: \"Enter FullScreen\",\n  exitFullScreen: \"Exit FullScreen\",\n  toggleFullScreen: \"Toggle Full Screen\",\n  minimize: \"Minimize\",\n  zoom: \"Zoom\",\n  bringAllToFront: \"Bring All To Front\",\n  close: \"Close\",\n  cycleThroughWindows: \"Cycle Through Windows\",\n  showHelp: \"Show Help\",\n};\n\nconst menuConfigWithDefaults = (\n  menu: Array<ApplicationMenuItemConfig>\n): Array<ApplicationMenuItemConfig> => {\n  return menu.map((item) => {\n    if (item.type === \"divider\" || item.type === \"separator\") {\n      return { type: \"divider\" };\n    } else {\n      return {\n        label: item.label || roleLabelMap[item.role] || \"\",\n        type: item.type || \"normal\",\n        // application menus can either have an action or a role. not both.\n        ...(item.role ? { role: item.role } : { action: item.action || \"\" }),\n        // default enabled to true unless explicitly set to false\n        enabled: item.enabled === false ? false : true,\n        checked: Boolean(item.checked),\n        hidden: Boolean(item.hidden),\n        tooltip: item.tooltip || undefined,\n        ...(item.submenu\n          ? { submenu: menuConfigWithDefaults(item.submenu) }\n          : {}),\n      };\n    }\n  });\n};\n",
  "import { zigRPC } from \"../proc/zig\";\n\n// TODO: move this to a more appropriate namespace\nexport const moveToTrash = (path: string) => {\n  return zigRPC.request.moveToTrash({ path });\n};\n\nexport const showItemInFolder = (path: string) => {\n  return zigRPC.request.showItemInFolder({ path });\n};\n\nexport const openFileDialog = async (\n  opts: {\n    startingFolder?: string;\n    allowedFileTypes?: string;\n    canChooseFiles?: boolean;\n    canChooseDirectory?: boolean;\n    allowsMultipleSelection?: boolean;\n  } = {}\n): Promise<string[]> => {\n  const optsWithDefault = {\n    ...{\n      startingFolder: \"~/\",\n      allowedFileTypes: \"*\",\n      canChooseFiles: true,\n      canChooseDirectory: true,\n      allowsMultipleSelection: true,\n    },\n    ...opts,\n  };\n\n  // todo: extend the timeout for this one (this version of rpc-anywhere doesn't seem to be able to set custom timeouts per request)\n  // we really want it to be infinity since the open file dialog blocks everything anyway.\n  // todo: there's the timeout between bun and zig, and the timeout between browser and bun since user likely requests\n  // from a browser context\n  const result = await zigRPC.request.openFileDialog({\n    startingFolder: optsWithDefault.startingFolder,\n    allowedFileTypes: optsWithDefault.allowedFileTypes,\n    canChooseFiles: optsWithDefault.canChooseFiles,\n    canChooseDirectory: optsWithDefault.canChooseDirectory,\n    allowsMultipleSelection: optsWithDefault.allowsMultipleSelection,\n  });\n\n  const filePaths = result.openFileDialogResponse.split(\",\");\n\n  // todo: it's nested like this due to zig union types. needs a zig refactor and revisit\n  return filePaths;\n};\n",
  "import electobunEventEmmitter from \"./events/eventEmitter\";\nimport { BrowserWindow } from \"./core/BrowserWindow\";\nimport { BrowserView } from \"./core/BrowserView\";\nimport { Tray } from \"./core/Tray\";\nimport * as ApplicationMenu from \"./core/ApplicationMenu\";\nimport * as ContextMenu from \"./core/ContextMenu\";\nimport { Updater } from \"./core/Updater\";\nimport * as Utils from \"./core/Utils\";\nimport { type RPCSchema, createRPC } from \"rpc-anywhere\";\nimport type ElectrobunEvent from \"./events/event\";\nimport * as PATHS from \"./core/Paths\";\n\n// Named Exports\nexport {\n  type RPCSchema,\n  type ElectrobunEvent,\n  createRPC,\n  BrowserWindow,\n  BrowserView,\n  Tray,\n  Updater,\n  Utils,\n  ApplicationMenu,\n  ContextMenu,\n  PATHS,\n};\n\n// Default Export\nconst Electrobun = {\n  BrowserWindow,\n  BrowserView,\n  Tray,\n  Updater,\n  Utils,\n  ApplicationMenu,\n  ContextMenu,\n  events: electobunEventEmmitter,\n  PATHS,\n};\n\n// Electrobun\nexport default Electrobun;\n"
  ],
  "mappings": "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",
  "debugId": "6C7DA4A50F37B3BE64756e2164756e21",
  "names": []
}